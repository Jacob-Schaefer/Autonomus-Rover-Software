
RoverCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009cd8  08009cd8  00019cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e38  08009e38  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e40  08009e40  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009e48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d98  20000078  08009ec0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e10  08009ec0  00024e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019825  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000364f  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001062  00000000  00000000  0003e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246b5  00000000  00000000  0003f4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bb5  00000000  00000000  00063b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dca71  00000000  00000000  0007c734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060d0  00000000  00000000  001591a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009cbc 	.word	0x08009cbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009cbc 	.word	0x08009cbc

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b970 	b.w	8000e80 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9e08      	ldr	r6, [sp, #32]
 8000bbe:	460d      	mov	r5, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	460f      	mov	r7, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14a      	bne.n	8000c5e <__udivmoddi4+0xa6>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4694      	mov	ip, r2
 8000bcc:	d965      	bls.n	8000c9a <__udivmoddi4+0xe2>
 8000bce:	fab2 f382 	clz	r3, r2
 8000bd2:	b143      	cbz	r3, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bd8:	f1c3 0220 	rsb	r2, r3, #32
 8000bdc:	409f      	lsls	r7, r3
 8000bde:	fa20 f202 	lsr.w	r2, r0, r2
 8000be2:	4317      	orrs	r7, r2
 8000be4:	409c      	lsls	r4, r3
 8000be6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bea:	fa1f f58c 	uxth.w	r5, ip
 8000bee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf2:	0c22      	lsrs	r2, r4, #16
 8000bf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bfc:	fb01 f005 	mul.w	r0, r1, r5
 8000c00:	4290      	cmp	r0, r2
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x62>
 8000c04:	eb1c 0202 	adds.w	r2, ip, r2
 8000c08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c0c:	f080 811c 	bcs.w	8000e48 <__udivmoddi4+0x290>
 8000c10:	4290      	cmp	r0, r2
 8000c12:	f240 8119 	bls.w	8000e48 <__udivmoddi4+0x290>
 8000c16:	3902      	subs	r1, #2
 8000c18:	4462      	add	r2, ip
 8000c1a:	1a12      	subs	r2, r2, r0
 8000c1c:	b2a4      	uxth	r4, r4
 8000c1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2a:	fb00 f505 	mul.w	r5, r0, r5
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x90>
 8000c32:	eb1c 0404 	adds.w	r4, ip, r4
 8000c36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x294>
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x294>
 8000c44:	4464      	add	r4, ip
 8000c46:	3802      	subs	r0, #2
 8000c48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	2100      	movs	r1, #0
 8000c50:	b11e      	cbz	r6, 8000c5a <__udivmoddi4+0xa2>
 8000c52:	40dc      	lsrs	r4, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0xbc>
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	f000 80ed 	beq.w	8000e42 <__udivmoddi4+0x28a>
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c74:	fab3 f183 	clz	r1, r3
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d149      	bne.n	8000d10 <__udivmoddi4+0x158>
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	d302      	bcc.n	8000c86 <__udivmoddi4+0xce>
 8000c80:	4282      	cmp	r2, r0
 8000c82:	f200 80f8 	bhi.w	8000e76 <__udivmoddi4+0x2be>
 8000c86:	1a84      	subs	r4, r0, r2
 8000c88:	eb65 0203 	sbc.w	r2, r5, r3
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d0e2      	beq.n	8000c5a <__udivmoddi4+0xa2>
 8000c94:	e9c6 4700 	strd	r4, r7, [r6]
 8000c98:	e7df      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c9a:	b902      	cbnz	r2, 8000c9e <__udivmoddi4+0xe6>
 8000c9c:	deff      	udf	#255	; 0xff
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8090 	bne.w	8000dc8 <__udivmoddi4+0x210>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cb8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cbc:	0c22      	lsrs	r2, r4, #16
 8000cbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc2:	fb0e f005 	mul.w	r0, lr, r5
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x124>
 8000cca:	eb1c 0202 	adds.w	r2, ip, r2
 8000cce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x122>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2b8>
 8000cda:	4645      	mov	r5, r8
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ce8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x14e>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x14c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2c2>
 8000d04:	4610      	mov	r0, r2
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d0e:	e79f      	b.n	8000c50 <__udivmoddi4+0x98>
 8000d10:	f1c1 0720 	rsb	r7, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d22:	fa20 f307 	lsr.w	r3, r0, r7
 8000d26:	40fd      	lsrs	r5, r7
 8000d28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3a:	0c1c      	lsrs	r4, r3, #16
 8000d3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d40:	fb08 f50e 	mul.w	r5, r8, lr
 8000d44:	42a5      	cmp	r5, r4
 8000d46:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b0>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2b4>
 8000d5c:	42a5      	cmp	r5, r4
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2b4>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4464      	add	r4, ip
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	b29d      	uxth	r5, r3
 8000d6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d70:	fb09 4413 	mls	r4, r9, r3, r4
 8000d74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1da>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2ac>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2ac>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d96:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9a:	eba4 040e 	sub.w	r4, r4, lr
 8000d9e:	42ac      	cmp	r4, r5
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46ae      	mov	lr, r5
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x29c>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x298>
 8000da8:	b156      	cbz	r6, 8000dc0 <__udivmoddi4+0x208>
 8000daa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dae:	eb64 040e 	sbc.w	r4, r4, lr
 8000db2:	fa04 f707 	lsl.w	r7, r4, r7
 8000db6:	40ca      	lsrs	r2, r1
 8000db8:	40cc      	lsrs	r4, r1
 8000dba:	4317      	orrs	r7, r2
 8000dbc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc8:	f1c3 0120 	rsb	r1, r3, #32
 8000dcc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dd8:	409d      	lsls	r5, r3
 8000dda:	432a      	orrs	r2, r5
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dec:	0c11      	lsrs	r1, r2, #16
 8000dee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df2:	fb00 f50e 	mul.w	r5, r0, lr
 8000df6:	428d      	cmp	r5, r1
 8000df8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x258>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b0>
 8000e08:	428d      	cmp	r5, r1
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b0>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1b49      	subs	r1, r1, r5
 8000e12:	b292      	uxth	r2, r2
 8000e14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e18:	fb07 1115 	mls	r1, r7, r5, r1
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	fb05 f10e 	mul.w	r1, r5, lr
 8000e24:	4291      	cmp	r1, r2
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x282>
 8000e28:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000e32:	4291      	cmp	r1, r2
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000e36:	3d02      	subs	r5, #2
 8000e38:	4462      	add	r2, ip
 8000e3a:	1a52      	subs	r2, r2, r1
 8000e3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0xfc>
 8000e42:	4631      	mov	r1, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e708      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000e48:	4639      	mov	r1, r7
 8000e4a:	e6e6      	b.n	8000c1a <__udivmoddi4+0x62>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x90>
 8000e50:	4548      	cmp	r0, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f0>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f0>
 8000e60:	4645      	mov	r5, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x282>
 8000e64:	462b      	mov	r3, r5
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1da>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x258>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b0>
 8000e70:	3d02      	subs	r5, #2
 8000e72:	4462      	add	r2, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x124>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e70a      	b.n	8000c90 <__udivmoddi4+0xd8>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x14e>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <configureTimerForRunTimeStats+0x2c>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <configureTimerForRunTimeStats+0x2c>)
 8000e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e92:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <configureTimerForRunTimeStats+0x30>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <configureTimerForRunTimeStats+0x30>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <configureTimerForRunTimeStats+0x30>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000edf0 	.word	0xe000edf0
 8000eb4:	e0001000 	.word	0xe0001000

08000eb8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
return DWT->CYCCNT;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <getRunTimeCounterValue+0x14>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e0001000 	.word	0xe0001000

08000ed0 <map>:
void StartServoDrivers(void *argument);
void StartPathfinding(void *argument);

/* USER CODE BEGIN PFP */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	69b9      	ldr	r1, [r7, #24]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	1a8a      	subs	r2, r1, r2
 8000eea:	fb03 f202 	mul.w	r2, r3, r2
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1acb      	subs	r3, r1, r3
 8000ef4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	4413      	add	r3, r2
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <delay_us>:
	else
		return x;
}

void delay_us (uint16_t us)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim5,0);  // set the counter value a 0
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <delay_us+0x30>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim5) < us);  // wait for the counter to reach the us input in the parameter
 8000f1a:	bf00      	nop
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <delay_us+0x30>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3f9      	bcc.n	8000f1c <delay_us+0x14>
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	2000016c 	.word	0x2000016c

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f002 fa16 	bl	8003370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f872 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 fb4c 	bl	80015e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 fb20 	bl	8001590 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f50:	f000 f99e 	bl	8001290 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f54:	f000 fa32 	bl	80013bc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f58:	f000 faca 	bl	80014f0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000f5c:	f000 f8d4 	bl	8001108 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f60:	2100      	movs	r1, #0
 8000f62:	4826      	ldr	r0, [pc, #152]	; (8000ffc <main+0xc0>)
 8000f64:	f003 fca4 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4824      	ldr	r0, [pc, #144]	; (8000ffc <main+0xc0>)
 8000f6c:	f003 fca0 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4822      	ldr	r0, [pc, #136]	; (8000ffc <main+0xc0>)
 8000f74:	f003 fc9c 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f78:	210c      	movs	r1, #12
 8000f7a:	4820      	ldr	r0, [pc, #128]	; (8000ffc <main+0xc0>)
 8000f7c:	f003 fc98 	bl	80048b0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	481f      	ldr	r0, [pc, #124]	; (8001000 <main+0xc4>)
 8000f84:	f003 fc94 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <main+0xc4>)
 8000f8c:	f003 fc90 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f90:	2108      	movs	r1, #8
 8000f92:	481b      	ldr	r0, [pc, #108]	; (8001000 <main+0xc4>)
 8000f94:	f003 fc8c 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f98:	210c      	movs	r1, #12
 8000f9a:	4819      	ldr	r0, [pc, #100]	; (8001000 <main+0xc4>)
 8000f9c:	f003 fc88 	bl	80048b0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <main+0xc8>)
 8000fa4:	f003 fc84 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <main+0xc8>)
 8000fac:	f003 fc80 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4814      	ldr	r0, [pc, #80]	; (8001004 <main+0xc8>)
 8000fb4:	f003 fc7c 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000fb8:	210c      	movs	r1, #12
 8000fba:	4812      	ldr	r0, [pc, #72]	; (8001004 <main+0xc8>)
 8000fbc:	f003 fc78 	bl	80048b0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc0:	f004 fee6 	bl	8005d90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <main+0xcc>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <main+0xd0>)
 8000fca:	f004 ff2b 	bl	8005e24 <osThreadNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <main+0xd4>)
 8000fd2:	6013      	str	r3, [r2, #0]

  /* creation of ServoDrivers */
  ServoDriversHandle = osThreadNew(StartServoDrivers, NULL, &ServoDrivers_attributes);
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <main+0xd8>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <main+0xdc>)
 8000fda:	f004 ff23 	bl	8005e24 <osThreadNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <main+0xe0>)
 8000fe2:	6013      	str	r3, [r2, #0]

  /* creation of Pathfinding */
  PathfindingHandle = osThreadNew(StartPathfinding, NULL, &Pathfinding_attributes);
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <main+0xe4>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <main+0xe8>)
 8000fea:	f004 ff1b 	bl	8005e24 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <main+0xec>)
 8000ff2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ff4:	f004 fef0 	bl	8005dd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0xbc>
 8000ffa:	bf00      	nop
 8000ffc:	20000094 	.word	0x20000094
 8001000:	200000dc 	.word	0x200000dc
 8001004:	20000124 	.word	0x20000124
 8001008:	08009d40 	.word	0x08009d40
 800100c:	08001dd5 	.word	0x08001dd5
 8001010:	200001fc 	.word	0x200001fc
 8001014:	08009d64 	.word	0x08009d64
 8001018:	08001df5 	.word	0x08001df5
 800101c:	20000200 	.word	0x20000200
 8001020:	08009d88 	.word	0x08009d88
 8001024:	08001e07 	.word	0x08001e07
 8001028:	20000204 	.word	0x20000204

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2234      	movs	r2, #52	; 0x34
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f007 fc46 	bl	80088cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <SystemClock_Config+0xd4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <SystemClock_Config+0xd4>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <SystemClock_Config+0xd4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <SystemClock_Config+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <SystemClock_Config+0xd8>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <SystemClock_Config+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001094:	2310      	movs	r3, #16
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a0:	2310      	movs	r3, #16
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 ffd8 	bl	8004070 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010c6:	f000 febb 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fc46 	bl	8003978 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010f2:	f000 fea5 	bl	8001e40 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	; 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b096      	sub	sp, #88	; 0x58
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2220      	movs	r2, #32
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fbc3 	bl	80088cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <MX_TIM1_Init+0x180>)
 8001148:	4a50      	ldr	r2, [pc, #320]	; (800128c <MX_TIM1_Init+0x184>)
 800114a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800114c:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <MX_TIM1_Init+0x180>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <MX_TIM1_Init+0x180>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3359;
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <MX_TIM1_Init+0x180>)
 800115a:	f640 521f 	movw	r2, #3359	; 0xd1f
 800115e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b49      	ldr	r3, [pc, #292]	; (8001288 <MX_TIM1_Init+0x180>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001166:	4b48      	ldr	r3, [pc, #288]	; (8001288 <MX_TIM1_Init+0x180>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_TIM1_Init+0x180>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001172:	4845      	ldr	r0, [pc, #276]	; (8001288 <MX_TIM1_Init+0x180>)
 8001174:	f003 fa1a 	bl	80045ac <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800117e:	f000 fe5f 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800118c:	4619      	mov	r1, r3
 800118e:	483e      	ldr	r0, [pc, #248]	; (8001288 <MX_TIM1_Init+0x180>)
 8001190:	f003 fe08 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800119a:	f000 fe51 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800119e:	483a      	ldr	r0, [pc, #232]	; (8001288 <MX_TIM1_Init+0x180>)
 80011a0:	f003 fb2c 	bl	80047fc <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011aa:	f000 fe49 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ba:	4619      	mov	r1, r3
 80011bc:	4832      	ldr	r0, [pc, #200]	; (8001288 <MX_TIM1_Init+0x180>)
 80011be:	f004 f9fd 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011c8:	f000 fe3a 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011cc:	2360      	movs	r3, #96	; 0x60
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4825      	ldr	r0, [pc, #148]	; (8001288 <MX_TIM1_Init+0x180>)
 80011f2:	f003 fd15 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011fc:	f000 fe20 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	2204      	movs	r2, #4
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_TIM1_Init+0x180>)
 800120a:	f003 fd09 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001214:	f000 fe14 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2208      	movs	r2, #8
 800121e:	4619      	mov	r1, r3
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <MX_TIM1_Init+0x180>)
 8001222:	f003 fcfd 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800122c:	f000 fe08 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	220c      	movs	r2, #12
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x180>)
 800123a:	f003 fcf1 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001244:	f000 fdfc 	bl	8001e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM1_Init+0x180>)
 800126c:	f004 fa22 	bl	80056b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001276:	f000 fde3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM1_Init+0x180>)
 800127c:	f001 fe94 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	; 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000094 	.word	0x20000094
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3359;
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012d6:	f640 521f 	movw	r2, #3359	; 0xd1f
 80012da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e8:	4833      	ldr	r0, [pc, #204]	; (80013b8 <MX_TIM2_Init+0x128>)
 80012ea:	f003 f95f 	bl	80045ac <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012f4:	f000 fda4 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001302:	4619      	mov	r1, r3
 8001304:	482c      	ldr	r0, [pc, #176]	; (80013b8 <MX_TIM2_Init+0x128>)
 8001306:	f003 fd4d 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 fd96 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001314:	4828      	ldr	r0, [pc, #160]	; (80013b8 <MX_TIM2_Init+0x128>)
 8001316:	f003 fa71 	bl	80047fc <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001320:	f000 fd8e 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4619      	mov	r1, r3
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <MX_TIM2_Init+0x128>)
 8001334:	f004 f942 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 fd7f 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001342:	2360      	movs	r3, #96	; 0x60
 8001344:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_TIM2_Init+0x128>)
 800135a:	f003 fc61 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001364:	f000 fd6c 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2204      	movs	r2, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_TIM2_Init+0x128>)
 8001370:	f003 fc56 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800137a:	f000 fd61 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2208      	movs	r2, #8
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM2_Init+0x128>)
 8001386:	f003 fc4b 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001390:	f000 fd56 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	220c      	movs	r2, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM2_Init+0x128>)
 800139c:	f003 fc40 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80013a6:	f000 fd4b 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM2_Init+0x128>)
 80013ac:	f001 fdfc 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 80013b0:	bf00      	nop
 80013b2:	3738      	adds	r7, #56	; 0x38
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000dc 	.word	0x200000dc

080013bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_TIM3_Init+0x12c>)
 80013ee:	4a3f      	ldr	r2, [pc, #252]	; (80014ec <MX_TIM3_Init+0x130>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <MX_TIM3_Init+0x12c>)
 80013f4:	22a8      	movs	r2, #168	; 0xa8
 80013f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_TIM3_Init+0x12c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9899;
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <MX_TIM3_Init+0x12c>)
 8001400:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8001404:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <MX_TIM3_Init+0x12c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <MX_TIM3_Init+0x12c>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001412:	4835      	ldr	r0, [pc, #212]	; (80014e8 <MX_TIM3_Init+0x12c>)
 8001414:	f003 f8ca 	bl	80045ac <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800141e:	f000 fd0f 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142c:	4619      	mov	r1, r3
 800142e:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MX_TIM3_Init+0x12c>)
 8001430:	f003 fcb8 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800143a:	f000 fd01 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143e:	482a      	ldr	r0, [pc, #168]	; (80014e8 <MX_TIM3_Init+0x12c>)
 8001440:	f003 f9dc 	bl	80047fc <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800144a:	f000 fcf9 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4619      	mov	r1, r3
 800145c:	4822      	ldr	r0, [pc, #136]	; (80014e8 <MX_TIM3_Init+0x12c>)
 800145e:	f004 f8ad 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001468:	f000 fcea 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	4819      	ldr	r0, [pc, #100]	; (80014e8 <MX_TIM3_Init+0x12c>)
 8001484:	f003 fbcc 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800148e:	f000 fcd7 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2204      	movs	r2, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_TIM3_Init+0x12c>)
 800149a:	f003 fbc1 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014a4:	f000 fccc 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2208      	movs	r2, #8
 80014ac:	4619      	mov	r1, r3
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <MX_TIM3_Init+0x12c>)
 80014b0:	f003 fbb6 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014ba:	f000 fcc1 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.Pulse = 1999;
 80014be:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80014c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	220c      	movs	r2, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM3_Init+0x12c>)
 80014cc:	f003 fba8 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80014d6:	f000 fcb3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM3_Init+0x12c>)
 80014dc:	f001 fd64 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3738      	adds	r7, #56	; 0x38
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000124 	.word	0x20000124
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_TIM5_Init+0x98>)
 800150e:	4a1f      	ldr	r2, [pc, #124]	; (800158c <MX_TIM5_Init+0x9c>)
 8001510:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_TIM5_Init+0x98>)
 8001514:	2207      	movs	r2, #7
 8001516:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_TIM5_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10499;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_TIM5_Init+0x98>)
 8001520:	f642 1203 	movw	r2, #10499	; 0x2903
 8001524:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_TIM5_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_TIM5_Init+0x98>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <MX_TIM5_Init+0x98>)
 8001534:	f003 f83a 	bl	80045ac <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 fc7f 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	4619      	mov	r1, r3
 800154e:	480e      	ldr	r0, [pc, #56]	; (8001588 <MX_TIM5_Init+0x98>)
 8001550:	f003 fc28 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 fc71 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM5_Init+0x98>)
 800156c:	f004 f826 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001576:	f000 fc63 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM5_Init+0x98>)
 800157c:	f003 f866 	bl	800464c <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000016c 	.word	0x2000016c
 800158c:	40000c00 	.word	0x40000c00

08001590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_USART2_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART2_UART_Init+0x4c>)
 80015c8:	f004 f8da 	bl	8005780 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f000 fc35 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001b4 	.word	0x200001b4
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a36      	ldr	r2, [pc, #216]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <MX_GPIO_Init+0xf8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <MX_GPIO_Init+0xf8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <MX_GPIO_Init+0xf8>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a21      	ldr	r2, [pc, #132]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_GPIO_Init+0xf8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|Ultrasonic1_Trig_Pin|Ultrasonic2_Trig_Pin|Ultrasonic3_Trig_Pin
 800166a:	2200      	movs	r2, #0
 800166c:	f249 5155 	movw	r1, #38229	; 0x9555
 8001670:	481b      	ldr	r0, [pc, #108]	; (80016e0 <MX_GPIO_Init+0xfc>)
 8001672:	f002 f94d 	bl	8003910 <HAL_GPIO_WritePin>
                          |Ultrasonic4_Trig_Pin|Ultrasonic5_Trig_Pin|Ultrasonic6_Trig_Pin|Ultrasonic7_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2120      	movs	r1, #32
 800167a:	481a      	ldr	r0, [pc, #104]	; (80016e4 <MX_GPIO_Init+0x100>)
 800167c:	f002 f948 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ultrasonic7_Echo_Pin PC14 Ultrasonic1_Echo_Pin Ultrasonic2_Echo_Pin
                           Ultrasonic3_Echo_Pin Ultrasonic4_Echo_Pin Ultrasonic5_Echo_Pin Ultrasonic6_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic7_Echo_Pin|GPIO_PIN_14|Ultrasonic1_Echo_Pin|Ultrasonic2_Echo_Pin
 8001680:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8001684:	617b      	str	r3, [r7, #20]
                          |Ultrasonic3_Echo_Pin|Ultrasonic4_Echo_Pin|Ultrasonic5_Echo_Pin|Ultrasonic6_Echo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4812      	ldr	r0, [pc, #72]	; (80016e0 <MX_GPIO_Init+0xfc>)
 8001696:	f001 ff8f 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 Ultrasonic1_Trig_Pin Ultrasonic2_Trig_Pin Ultrasonic3_Trig_Pin
                           Ultrasonic4_Trig_Pin Ultrasonic5_Trig_Pin Ultrasonic6_Trig_Pin Ultrasonic7_Trig_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|Ultrasonic1_Trig_Pin|Ultrasonic2_Trig_Pin|Ultrasonic3_Trig_Pin
 800169a:	f249 5355 	movw	r3, #38229	; 0x9555
 800169e:	617b      	str	r3, [r7, #20]
                          |Ultrasonic4_Trig_Pin|Ultrasonic5_Trig_Pin|Ultrasonic6_Trig_Pin|Ultrasonic7_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <MX_GPIO_Init+0xfc>)
 80016b4:	f001 ff80 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b8:	2320      	movs	r3, #32
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_GPIO_Init+0x100>)
 80016d0:	f001 ff72 	bl	80035b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020000 	.word	0x40020000

080016e8 <fireSensors>:

/* USER CODE BEGIN 4 */

void fireSensors( void )
{
 80016e8:	b598      	push	{r3, r4, r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	while ((HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_1)) && pMillis + 50 > HAL_GetTick());
	val2 = __HAL_TIM_GET_COUNTER(&htim5);
	int pulse_durationFront = 0;
	pulse_durationFront = (val2-val1);
	*/
	HAL_GPIO_WritePin(GPIOC, TRIG_PIN1, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2101      	movs	r1, #1
 80016f0:	485d      	ldr	r0, [pc, #372]	; (8001868 <fireSensors+0x180>)
 80016f2:	f002 f90d 	bl	8003910 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <fireSensors+0x184>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
	delay_us(10);
 80016fe:	200a      	movs	r0, #10
 8001700:	f7ff fc02 	bl	8000f08 <delay_us>
	HAL_GPIO_WritePin(GPIOC, TRIG_PIN1, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	4857      	ldr	r0, [pc, #348]	; (8001868 <fireSensors+0x180>)
 800170a:	f002 f901 	bl	8003910 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick();
 800170e:	f001 fe65 	bl	80033dc <HAL_GetTick>
 8001712:	4603      	mov	r3, r0
 8001714:	4a56      	ldr	r2, [pc, #344]	; (8001870 <fireSensors+0x188>)
 8001716:	6013      	str	r3, [r2, #0]
	while(!(HAL_GPIO_ReadPin(GPIOC, ECHO_PIN1)) && pMillis +10 > HAL_GetTick());
 8001718:	bf00      	nop
 800171a:	2102      	movs	r1, #2
 800171c:	4852      	ldr	r0, [pc, #328]	; (8001868 <fireSensors+0x180>)
 800171e:	f002 f8df 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <fireSensors+0x52>
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <fireSensors+0x188>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f103 040a 	add.w	r4, r3, #10
 8001730:	f001 fe54 	bl	80033dc <HAL_GetTick>
 8001734:	4603      	mov	r3, r0
 8001736:	429c      	cmp	r4, r3
 8001738:	d8ef      	bhi.n	800171a <fireSensors+0x32>
	val1 = __HAL_TIM_GET_COUNTER(&htim5);
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <fireSensors+0x184>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <fireSensors+0x18c>)
 8001742:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick();
 8001744:	f001 fe4a 	bl	80033dc <HAL_GetTick>
 8001748:	4603      	mov	r3, r0
 800174a:	4a49      	ldr	r2, [pc, #292]	; (8001870 <fireSensors+0x188>)
 800174c:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(GPIOC, ECHO_PIN1)) && pMillis + 50 > HAL_GetTick());
 800174e:	bf00      	nop
 8001750:	2102      	movs	r1, #2
 8001752:	4845      	ldr	r0, [pc, #276]	; (8001868 <fireSensors+0x180>)
 8001754:	f002 f8c4 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d008      	beq.n	8001770 <fireSensors+0x88>
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <fireSensors+0x188>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001766:	f001 fe39 	bl	80033dc <HAL_GetTick>
 800176a:	4603      	mov	r3, r0
 800176c:	429c      	cmp	r4, r3
 800176e:	d8ef      	bhi.n	8001750 <fireSensors+0x68>
	val2 = __HAL_TIM_GET_COUNTER(&htim5);
 8001770:	4b3e      	ldr	r3, [pc, #248]	; (800186c <fireSensors+0x184>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	4a40      	ldr	r2, [pc, #256]	; (8001878 <fireSensors+0x190>)
 8001778:	6013      	str	r3, [r2, #0]

	pulse_durationFront = (val2 - val1);
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <fireSensors+0x190>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <fireSensors+0x18c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	461a      	mov	r2, r3
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <fireSensors+0x194>)
 8001788:	601a      	str	r2, [r3, #0]
	osDelay(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f004 fbdc 	bl	8005f48 <osDelay>

	/**Back**/
	HAL_GPIO_WritePin(GPIOC, TRIG_PIN2, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2104      	movs	r1, #4
 8001794:	4834      	ldr	r0, [pc, #208]	; (8001868 <fireSensors+0x180>)
 8001796:	f002 f8bb 	bl	8003910 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <fireSensors+0x184>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
	delay_us(10);
 80017a2:	200a      	movs	r0, #10
 80017a4:	f7ff fbb0 	bl	8000f08 <delay_us>
	HAL_GPIO_WritePin(GPIOC, TRIG_PIN2, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2104      	movs	r1, #4
 80017ac:	482e      	ldr	r0, [pc, #184]	; (8001868 <fireSensors+0x180>)
 80017ae:	f002 f8af 	bl	8003910 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick();
 80017b2:	f001 fe13 	bl	80033dc <HAL_GetTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a2d      	ldr	r2, [pc, #180]	; (8001870 <fireSensors+0x188>)
 80017ba:	6013      	str	r3, [r2, #0]
	while(!(HAL_GPIO_ReadPin(GPIOC, ECHO_PIN2)) && pMillis +10 > HAL_GetTick());
 80017bc:	bf00      	nop
 80017be:	2108      	movs	r1, #8
 80017c0:	4829      	ldr	r0, [pc, #164]	; (8001868 <fireSensors+0x180>)
 80017c2:	f002 f88d 	bl	80038e0 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d108      	bne.n	80017de <fireSensors+0xf6>
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <fireSensors+0x188>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f103 040a 	add.w	r4, r3, #10
 80017d4:	f001 fe02 	bl	80033dc <HAL_GetTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	429c      	cmp	r4, r3
 80017dc:	d8ef      	bhi.n	80017be <fireSensors+0xd6>
	val1 = __HAL_TIM_GET_COUNTER(&htim5);
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <fireSensors+0x184>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	4a23      	ldr	r2, [pc, #140]	; (8001874 <fireSensors+0x18c>)
 80017e6:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick();
 80017e8:	f001 fdf8 	bl	80033dc <HAL_GetTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a20      	ldr	r2, [pc, #128]	; (8001870 <fireSensors+0x188>)
 80017f0:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(GPIOC, ECHO_PIN2)) && pMillis + 50 > HAL_GetTick());
 80017f2:	bf00      	nop
 80017f4:	2108      	movs	r1, #8
 80017f6:	481c      	ldr	r0, [pc, #112]	; (8001868 <fireSensors+0x180>)
 80017f8:	f002 f872 	bl	80038e0 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <fireSensors+0x12c>
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <fireSensors+0x188>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800180a:	f001 fde7 	bl	80033dc <HAL_GetTick>
 800180e:	4603      	mov	r3, r0
 8001810:	429c      	cmp	r4, r3
 8001812:	d8ef      	bhi.n	80017f4 <fireSensors+0x10c>
	val2 = __HAL_TIM_GET_COUNTER(&htim5);
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <fireSensors+0x184>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <fireSensors+0x190>)
 800181c:	6013      	str	r3, [r2, #0]

	pulse_durationBack = (val2 - val1);
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <fireSensors+0x190>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <fireSensors+0x18c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <fireSensors+0x198>)
 800182c:	601a      	str	r2, [r3, #0]
	osDelay(1);
 800182e:	2001      	movs	r0, #1
 8001830:	f004 fb8a 	bl	8005f48 <osDelay>
	while((HAL_GPIO_ReadPin(GPIOC, ECHO_PIN8)) && pMillis + 50 > HAL_GetTick());
	uint32_t pulse_durationRightDown = __HAL_TIM_GET_COUNTER(&htim5);
	osDelay(1);
	*/

	calculateDistance(pulse_durationFront,pulse_durationBack,pulse_durationLeft,pulse_durationRight );
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <fireSensors+0x194>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <fireSensors+0x198>)
 800183a:	6819      	ldr	r1, [r3, #0]
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <fireSensors+0x19c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <fireSensors+0x1a0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f000 f82c 	bl	80018a0 <calculateDistance>
	calculateDistanceDown(pulse_durationFrontDown,pulse_durationBackDown,pulse_durationLeftDown,pulse_durationRightDown);
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <fireSensors+0x1a4>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <fireSensors+0x1a8>)
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <fireSensors+0x1ac>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <fireSensors+0x1b0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f000 f8ce 	bl	80019f8 <calculateDistanceDown>

	osDelay(1);
 800185c:	2001      	movs	r0, #1
 800185e:	f004 fb73 	bl	8005f48 <osDelay>

}
 8001862:	bf00      	nop
 8001864:	bd98      	pop	{r3, r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	40020800 	.word	0x40020800
 800186c:	2000016c 	.word	0x2000016c
 8001870:	20000208 	.word	0x20000208
 8001874:	2000020c 	.word	0x2000020c
 8001878:	20000210 	.word	0x20000210
 800187c:	20000234 	.word	0x20000234
 8001880:	20000238 	.word	0x20000238
 8001884:	2000023c 	.word	0x2000023c
 8001888:	20000240 	.word	0x20000240
 800188c:	20000244 	.word	0x20000244
 8001890:	20000248 	.word	0x20000248
 8001894:	2000024c 	.word	0x2000024c
 8001898:	20000250 	.word	0x20000250
 800189c:	00000000 	.word	0x00000000

080018a0 <calculateDistance>:

void calculateDistance(int pulse_durationFront, int pulse_durationBack, int pulse_durationLeft, int pulse_durationRight)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]

    // Calculate distance based on pulse duration
    // Distance = (pulse duration * speed of sound) / 2
    // Convert distance to inches by Distance * (1/2.54)
    distanceFront = ((pulse_durationFront * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7fe fe00 	bl	80004b4 <__aeabi_i2d>
 80018b4:	a348      	add	r3, pc, #288	; (adr r3, 80019d8 <calculateDistance+0x138>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe65 	bl	8000588 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ce:	f7fe ff85 	bl	80007dc <__aeabi_ddiv>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	a341      	add	r3, pc, #260	; (adr r3, 80019e0 <calculateDistance+0x140>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe52 	bl	8000588 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f8fc 	bl	8000ae8 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <calculateDistance+0x148>)
 80018f4:	6013      	str	r3, [r2, #0]
    distanceBack = ((pulse_durationBack * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f7fe fddc 	bl	80004b4 <__aeabi_i2d>
 80018fc:	a336      	add	r3, pc, #216	; (adr r3, 80019d8 <calculateDistance+0x138>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe41 	bl	8000588 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001916:	f7fe ff61 	bl	80007dc <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	a32f      	add	r3, pc, #188	; (adr r3, 80019e0 <calculateDistance+0x140>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe2e 	bl	8000588 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f8d8 	bl	8000ae8 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <calculateDistance+0x14c>)
 800193c:	6013      	str	r3, [r2, #0]
    distanceLeft = ((pulse_durationLeft * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fdb8 	bl	80004b4 <__aeabi_i2d>
 8001944:	a324      	add	r3, pc, #144	; (adr r3, 80019d8 <calculateDistance+0x138>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe1d 	bl	8000588 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	f7fe ff3d 	bl	80007dc <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	a31d      	add	r3, pc, #116	; (adr r3, 80019e0 <calculateDistance+0x140>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe0a 	bl	8000588 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f8b4 	bl	8000ae8 <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <calculateDistance+0x150>)
 8001984:	6013      	str	r3, [r2, #0]
    distanceRight = ((pulse_durationRight * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7fe fd94 	bl	80004b4 <__aeabi_i2d>
 800198c:	a312      	add	r3, pc, #72	; (adr r3, 80019d8 <calculateDistance+0x138>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fdf9 	bl	8000588 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a6:	f7fe ff19 	bl	80007dc <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	a30b      	add	r3, pc, #44	; (adr r3, 80019e0 <calculateDistance+0x140>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fde6 	bl	8000588 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f890 	bl	8000ae8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <calculateDistance+0x154>)
 80019cc:	6013      	str	r3, [r2, #0]

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	04816f00 	.word	0x04816f00
 80019dc:	3fa18fc5 	.word	0x3fa18fc5
 80019e0:	c993264c 	.word	0xc993264c
 80019e4:	3fd93264 	.word	0x3fd93264
 80019e8:	20000214 	.word	0x20000214
 80019ec:	20000218 	.word	0x20000218
 80019f0:	20000220 	.word	0x20000220
 80019f4:	2000021c 	.word	0x2000021c

080019f8 <calculateDistanceDown>:

void calculateDistanceDown(int pulse_durationFrontDown,int pulse_durationBackDown,int pulse_durationLeftDown,int pulse_durationRightDown)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
    distanceFrontDown = ((pulse_durationFrontDown * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7fe fd54 	bl	80004b4 <__aeabi_i2d>
 8001a0c:	a348      	add	r3, pc, #288	; (adr r3, 8001b30 <calculateDistanceDown+0x138>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fdb9 	bl	8000588 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a26:	f7fe fed9 	bl	80007dc <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	a341      	add	r3, pc, #260	; (adr r3, 8001b38 <calculateDistanceDown+0x140>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fda6 	bl	8000588 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f850 	bl	8000ae8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	; (8001b40 <calculateDistanceDown+0x148>)
 8001a4c:	6013      	str	r3, [r2, #0]
    distanceBackDown = ((pulse_durationBackDown * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f7fe fd30 	bl	80004b4 <__aeabi_i2d>
 8001a54:	a336      	add	r3, pc, #216	; (adr r3, 8001b30 <calculateDistanceDown+0x138>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fd95 	bl	8000588 <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6e:	f7fe feb5 	bl	80007dc <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	a32f      	add	r3, pc, #188	; (adr r3, 8001b38 <calculateDistanceDown+0x140>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fd82 	bl	8000588 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f82c 	bl	8000ae8 <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <calculateDistanceDown+0x14c>)
 8001a94:	6013      	str	r3, [r2, #0]
    distanceLeftDown = ((pulse_durationLeftDown * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7fe fd0c 	bl	80004b4 <__aeabi_i2d>
 8001a9c:	a324      	add	r3, pc, #144	; (adr r3, 8001b30 <calculateDistanceDown+0x138>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fd71 	bl	8000588 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab6:	f7fe fe91 	bl	80007dc <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	a31d      	add	r3, pc, #116	; (adr r3, 8001b38 <calculateDistanceDown+0x140>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fd5e 	bl	8000588 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f808 	bl	8000ae8 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <calculateDistanceDown+0x150>)
 8001adc:	6013      	str	r3, [r2, #0]
    distanceRightDown = ((pulse_durationRightDown * SOUND_SPEED_CM_PER_US) / 2.0) * (1/2.54);
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f7fe fce8 	bl	80004b4 <__aeabi_i2d>
 8001ae4:	a312      	add	r3, pc, #72	; (adr r3, 8001b30 <calculateDistanceDown+0x138>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd4d 	bl	8000588 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afe:	f7fe fe6d 	bl	80007dc <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	a30b      	add	r3, pc, #44	; (adr r3, 8001b38 <calculateDistanceDown+0x140>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fd3a 	bl	8000588 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ffe4 	bl	8000ae8 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <calculateDistanceDown+0x154>)
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	04816f00 	.word	0x04816f00
 8001b34:	3fa18fc5 	.word	0x3fa18fc5
 8001b38:	c993264c 	.word	0xc993264c
 8001b3c:	3fd93264 	.word	0x3fd93264
 8001b40:	20000224 	.word	0x20000224
 8001b44:	20000228 	.word	0x20000228
 8001b48:	2000022c 	.word	0x2000022c
 8001b4c:	20000230 	.word	0x20000230

08001b50 <navigateObject>:

void navigateObject()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
    bool doNotBackUp = (distanceBack < MIN_DISTANCE);
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <navigateObject+0x1d0>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	bf4c      	ite	mi
 8001b6a:	2301      	movmi	r3, #1
 8001b6c:	2300      	movpl	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	617b      	str	r3, [r7, #20]
    bool doNotTurnLeft = (distanceLeft < MIN_DISTANCE);
 8001b72:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <navigateObject+0x1d4>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	bf4c      	ite	mi
 8001b86:	2301      	movmi	r3, #1
 8001b88:	2300      	movpl	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	613b      	str	r3, [r7, #16]
    bool doNotTurnRight = (distanceRight < MIN_DISTANCE);
 8001b8e:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <navigateObject+0x1d8>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	bf4c      	ite	mi
 8001ba2:	2301      	movmi	r3, #1
 8001ba4:	2300      	movpl	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	60fb      	str	r3, [r7, #12]
    bool DropRight = (distanceRightDown > STAN_FLOOR_DISTANCE);
 8001baa:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <navigateObject+0x1dc>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	bfcc      	ite	gt
 8001bbe:	2301      	movgt	r3, #1
 8001bc0:	2300      	movle	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	60bb      	str	r3, [r7, #8]
    bool DropLeft = (distanceLeftDown > STAN_FLOOR_DISTANCE);
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <navigateObject+0x1e0>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	bfcc      	ite	gt
 8001bda:	2301      	movgt	r3, #1
 8001bdc:	2300      	movle	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	607b      	str	r3, [r7, #4]
    bool DropBack = (distanceBackDown > STAN_FLOOR_DISTANCE);
 8001be2:	4b54      	ldr	r3, [pc, #336]	; (8001d34 <navigateObject+0x1e4>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	bfcc      	ite	gt
 8001bf6:	2301      	movgt	r3, #1
 8001bf8:	2300      	movle	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	603b      	str	r3, [r7, #0]


    if (!doNotTurnRight && !DropRight)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d124      	bne.n	8001c4e <navigateObject+0xfe>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d121      	bne.n	8001c4e <navigateObject+0xfe>
    {
        // Turn right
        // Code to turn right...
    	driveServos( 500 );
 8001c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c0e:	f000 f91f 	bl	8001e50 <driveServos>
    	osDelay(500);
 8001c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c16:	f004 f997 	bl	8005f48 <osDelay>
        fireSensors();
 8001c1a:	f7ff fd65 	bl	80016e8 <fireSensors>
        if(distanceFront <= MIN_DISTANCE || distanceFrontDown > STAN_FLOOR_DISTANCE)
 8001c1e:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <navigateObject+0x1e8>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d90a      	bls.n	8001c48 <navigateObject+0xf8>
 8001c32:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <navigateObject+0x1ec>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	dc00      	bgt.n	8001c48 <navigateObject+0xf8>
 8001c46:	e067      	b.n	8001d18 <navigateObject+0x1c8>
        {
            navigateObject();
 8001c48:	f7ff ff82 	bl	8001b50 <navigateObject>
        if(distanceFront <= MIN_DISTANCE || distanceFrontDown > STAN_FLOOR_DISTANCE)
 8001c4c:	e064      	b.n	8001d18 <navigateObject+0x1c8>

        }
    }
    else if (doNotTurnRight && !doNotTurnLeft || DropRight && !doNotTurnLeft)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <navigateObject+0x10a>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <navigateObject+0x116>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <navigateObject+0x158>
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d120      	bne.n	8001ca8 <navigateObject+0x158>
    {
        // Turn left
        // Code to turn left...
    	driveServos( -500 );
 8001c66:	4836      	ldr	r0, [pc, #216]	; (8001d40 <navigateObject+0x1f0>)
 8001c68:	f000 f8f2 	bl	8001e50 <driveServos>
    	osDelay(500);
 8001c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c70:	f004 f96a 	bl	8005f48 <osDelay>
    	fireSensors();
 8001c74:	f7ff fd38 	bl	80016e8 <fireSensors>
        if(distanceFront <= MIN_DISTANCE || distanceFrontDown > STAN_FLOOR_DISTANCE)
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <navigateObject+0x1e8>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d90a      	bls.n	8001ca2 <navigateObject+0x152>
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <navigateObject+0x1ec>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dc00      	bgt.n	8001ca2 <navigateObject+0x152>
 8001ca0:	e03a      	b.n	8001d18 <navigateObject+0x1c8>
        {
            navigateObject();
 8001ca2:	f7ff ff55 	bl	8001b50 <navigateObject>
        if(distanceFront <= MIN_DISTANCE || distanceFrontDown > STAN_FLOOR_DISTANCE)
 8001ca6:	e037      	b.n	8001d18 <navigateObject+0x1c8>
        }
    }
    else if ((doNotTurnRight || DropRight) && (doNotTurnLeft || DropLeft) && !doNotBackUp)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <navigateObject+0x164>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d029      	beq.n	8001d08 <navigateObject+0x1b8>
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <navigateObject+0x170>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <navigateObject+0x1b8>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d120      	bne.n	8001d08 <navigateObject+0x1b8>
    {
        // Backup
        // Code to backup...
    	driveServos( 1 );
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f000 f8c2 	bl	8001e50 <driveServos>
    	osDelay(500);
 8001ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd0:	f004 f93a 	bl	8005f48 <osDelay>
    	fireSensors();
 8001cd4:	f7ff fd08 	bl	80016e8 <fireSensors>
        if(distanceFront <= MIN_DISTANCE || distanceFrontDown > STAN_FLOOR_DISTANCE)
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <navigateObject+0x1e8>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d90a      	bls.n	8001d02 <navigateObject+0x1b2>
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <navigateObject+0x1ec>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	dc00      	bgt.n	8001d02 <navigateObject+0x1b2>
 8001d00:	e00a      	b.n	8001d18 <navigateObject+0x1c8>
        {
            navigateObject();
 8001d02:	f7ff ff25 	bl	8001b50 <navigateObject>
        if(distanceFront <= MIN_DISTANCE || distanceFrontDown > STAN_FLOOR_DISTANCE)
 8001d06:	e007      	b.n	8001d18 <navigateObject+0x1c8>
        }
    }
    else
    {
    	driveServos(-2500 );
 8001d08:	480e      	ldr	r0, [pc, #56]	; (8001d44 <navigateObject+0x1f4>)
 8001d0a:	f000 f8a1 	bl	8001e50 <driveServos>
    	osDelay(500);
 8001d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d12:	f004 f919 	bl	8005f48 <osDelay>
       //osDelay(10000);
    }

}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000218 	.word	0x20000218
 8001d24:	20000220 	.word	0x20000220
 8001d28:	2000021c 	.word	0x2000021c
 8001d2c:	20000230 	.word	0x20000230
 8001d30:	2000022c 	.word	0x2000022c
 8001d34:	20000228 	.word	0x20000228
 8001d38:	20000214 	.word	0x20000214
 8001d3c:	20000224 	.word	0x20000224
 8001d40:	fffffe0c 	.word	0xfffffe0c
 8001d44:	fffff63c 	.word	0xfffff63c

08001d48 <standardTravel>:

void standardTravel( void )
{
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	af00      	add	r7, sp, #0
        fireSensors();
 8001d4e:	f7ff fccb 	bl	80016e8 <fireSensors>
        if (distanceFront <= MIN_DISTANCE)
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <standardTravel+0x78>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	d826      	bhi.n	8001db4 <standardTravel+0x6c>
        {
        	navigateObject(distanceLeft, distanceRight, distanceFront, distanceBack);
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <standardTravel+0x7c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbb4 	bl	80004d8 <__aeabi_f2d>
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <standardTravel+0x80>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbad 	bl	80004d8 <__aeabi_f2d>
 8001d7e:	4680      	mov	r8, r0
 8001d80:	4689      	mov	r9, r1
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <standardTravel+0x78>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fba6 	bl	80004d8 <__aeabi_f2d>
 8001d8c:	4682      	mov	sl, r0
 8001d8e:	468b      	mov	fp, r1
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <standardTravel+0x84>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fb9f 	bl	80004d8 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ec43 2b13 	vmov	d3, r2, r3
 8001da2:	ec4b ab12 	vmov	d2, sl, fp
 8001da6:	ec49 8b11 	vmov	d1, r8, r9
 8001daa:	ec45 4b10 	vmov	d0, r4, r5
 8001dae:	f7ff fecf 	bl	8001b50 <navigateObject>
		}
        else
        {
        	driveServos(-2500 );
        }
}
 8001db2:	e002      	b.n	8001dba <standardTravel+0x72>
        	driveServos(-2500 );
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <standardTravel+0x88>)
 8001db6:	f000 f84b 	bl	8001e50 <driveServos>
}
 8001dba:	bf00      	nop
 8001dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc0:	20000214 	.word	0x20000214
 8001dc4:	20000220 	.word	0x20000220
 8001dc8:	2000021c 	.word	0x2000021c
 8001dcc:	20000218 	.word	0x20000218
 8001dd0:	fffff63c 	.word	0xfffff63c

08001dd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
 	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ddc:	2120      	movs	r1, #32
 8001dde:	4804      	ldr	r0, [pc, #16]	; (8001df0 <StartDefaultTask+0x1c>)
 8001de0:	f001 fdaf 	bl	8003942 <HAL_GPIO_TogglePin>
	osDelay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f004 f8ae 	bl	8005f48 <osDelay>
 	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001dec:	e7f6      	b.n	8001ddc <StartDefaultTask+0x8>
 8001dee:	bf00      	nop
 8001df0:	40020000 	.word	0x40020000

08001df4 <StartServoDrivers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoDrivers */
void StartServoDrivers(void *argument)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
		  osDelay(50);
	  }
	  */

	  //driveServos( -2500, 1 );
	  osDelay(1000);
 8001dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e00:	f004 f8a2 	bl	8005f48 <osDelay>
 8001e04:	e7fa      	b.n	8001dfc <StartServoDrivers+0x8>

08001e06 <StartPathfinding>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPathfinding */
void StartPathfinding(void *argument)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPathfinding */
  /* Infinite loop */
  for(;;)
  {
	  standardTravel();
 8001e0e:	f7ff ff9b 	bl	8001d48 <standardTravel>
	  osDelay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f004 f898 	bl	8005f48 <osDelay>
	  standardTravel();
 8001e18:	e7f9      	b.n	8001e0e <StartPathfinding+0x8>
	...

08001e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2e:	f001 fac1 	bl	80033b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40001000 	.word	0x40001000

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>
 8001e4a:	0000      	movs	r0, r0
 8001e4c:	0000      	movs	r0, r0
	...

08001e50 <driveServos>:
 * outerHor = radius + ( WHEELWIDTH / 2 );
 * outerTheta = atan( outerHor / servoVert );
 * servo1Angle = (( outerTheta * 180 ) / PI);
 */
void driveServos( int radius )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	if( ( radius < -RADIUSMAXLIMIT) || ( radius > RADIUSMAXLIMIT ))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8001e5e:	db03      	blt.n	8001e68 <driveServos+0x18>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e66:	dd31      	ble.n	8001ecc <driveServos+0x7c>
	{
		setServo( 1, 90);
 8001e68:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001ec4 <driveServos+0x74>
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 fef3 	bl	8002c58 <setServo>
		setServo( 2, 90);
 8001e72:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001ec4 <driveServos+0x74>
 8001e76:	2002      	movs	r0, #2
 8001e78:	f000 feee 	bl	8002c58 <setServo>
		setServo( 3, 90);
 8001e7c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001ec4 <driveServos+0x74>
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fee9 	bl	8002c58 <setServo>
		setServo( 4, 90);
 8001e86:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001ec4 <driveServos+0x74>
 8001e8a:	2004      	movs	r0, #4
 8001e8c:	f000 fee4 	bl	8002c58 <setServo>
		// set motors
		setMotor( 1, STRAIGHT_V, 1 );
 8001e90:	2101      	movs	r1, #1
 8001e92:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001ec8 <driveServos+0x78>
 8001e96:	2001      	movs	r0, #1
 8001e98:	f000 ff48 	bl	8002d2c <setMotor>
		setMotor( 2, STRAIGHT_V, 1 );
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001ec8 <driveServos+0x78>
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f000 ff42 	bl	8002d2c <setMotor>
		setMotor( 3, STRAIGHT_V, 1 );
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001ec8 <driveServos+0x78>
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f000 ff3c 	bl	8002d2c <setMotor>
		setMotor( 4, STRAIGHT_V, 1 );
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001ec8 <driveServos+0x78>
 8001eba:	2004      	movs	r0, #4
 8001ebc:	f000 ff36 	bl	8002d2c <setMotor>
 8001ec0:	f000 be9b 	b.w	8002bfa <driveServos+0xdaa>
 8001ec4:	42b40000 	.word	0x42b40000
 8001ec8:	44af0000 	.word	0x44af0000
	}
	else
	{
		if( radius < ( 0 - (WHEELWIDTH / 2)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8001ed2:	f280 81ad 	bge.w	8002230 <driveServos+0x3e0>
		{
			//Servp 1 and 2 (Inner Wheels)
			int absRadius = abs( radius );
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bfb8      	it	lt
 8001edc:	425b      	neglt	r3, r3
 8001ede:	61bb      	str	r3, [r7, #24]
			innerHor = absRadius - ( WHEELWIDTH / 2 );
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	3b7d      	subs	r3, #125	; 0x7d
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eec:	4bc2      	ldr	r3, [pc, #776]	; (80021f8 <driveServos+0x3a8>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]
			innerTheta = atan( innerHor / servoVert );
 8001ef2:	4bc1      	ldr	r3, [pc, #772]	; (80021f8 <driveServos+0x3a8>)
 8001ef4:	ed93 7a00 	vldr	s14, [r3]
 8001ef8:	4bc0      	ldr	r3, [pc, #768]	; (80021fc <driveServos+0x3ac>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f02:	ee16 0a90 	vmov	r0, s13
 8001f06:	f7fe fae7 	bl	80004d8 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	ec43 2b10 	vmov	d0, r2, r3
 8001f12:	f006 fe69 	bl	8008be8 <atan>
 8001f16:	ec53 2b10 	vmov	r2, r3, d0
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fde3 	bl	8000ae8 <__aeabi_d2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4ab6      	ldr	r2, [pc, #728]	; (8002200 <driveServos+0x3b0>)
 8001f26:	6013      	str	r3, [r2, #0]
			innerAngle = (( innerTheta * 180 ) / PI);
 8001f28:	4bb5      	ldr	r3, [pc, #724]	; (8002200 <driveServos+0x3b0>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002204 <driveServos+0x3b4>
 8001f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe facd 	bl	80004d8 <__aeabi_f2d>
 8001f3e:	a3a8      	add	r3, pc, #672	; (adr r3, 80021e0 <driveServos+0x390>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fc4a 	bl	80007dc <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fdca 	bl	8000ae8 <__aeabi_d2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4aac      	ldr	r2, [pc, #688]	; (8002208 <driveServos+0x3b8>)
 8001f58:	6013      	str	r3, [r2, #0]
			setServo( 1, innerAngle); //Set servo 1
 8001f5a:	4bab      	ldr	r3, [pc, #684]	; (8002208 <driveServos+0x3b8>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	2001      	movs	r0, #1
 8001f66:	f000 fe77 	bl	8002c58 <setServo>
			setServo( 2, ( 180 - innerAngle ));
 8001f6a:	4ba7      	ldr	r3, [pc, #668]	; (8002208 <driveServos+0x3b8>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002204 <driveServos+0x3b4>
 8001f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f000 fe6b 	bl	8002c58 <setServo>

			//Servo 3 and 4 (Outer Wheel)
			outerHor = absRadius + ( WHEELWIDTH / 2 );
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	337d      	adds	r3, #125	; 0x7d
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8e:	4b9f      	ldr	r3, [pc, #636]	; (800220c <driveServos+0x3bc>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
			outerTheta = atan( outerHor / servoVert );
 8001f94:	4b9d      	ldr	r3, [pc, #628]	; (800220c <driveServos+0x3bc>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	4b98      	ldr	r3, [pc, #608]	; (80021fc <driveServos+0x3ac>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fa4:	ee16 0a90 	vmov	r0, s13
 8001fa8:	f7fe fa96 	bl	80004d8 <__aeabi_f2d>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	ec43 2b10 	vmov	d0, r2, r3
 8001fb4:	f006 fe18 	bl	8008be8 <atan>
 8001fb8:	ec53 2b10 	vmov	r2, r3, d0
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f7fe fd92 	bl	8000ae8 <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a92      	ldr	r2, [pc, #584]	; (8002210 <driveServos+0x3c0>)
 8001fc8:	6013      	str	r3, [r2, #0]
			outerAngle = (( outerTheta * 180 ) / PI);
 8001fca:	4b91      	ldr	r3, [pc, #580]	; (8002210 <driveServos+0x3c0>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002204 <driveServos+0x3b4>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd8:	ee17 0a90 	vmov	r0, s15
 8001fdc:	f7fe fa7c 	bl	80004d8 <__aeabi_f2d>
 8001fe0:	a37f      	add	r3, pc, #508	; (adr r3, 80021e0 <driveServos+0x390>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fbf9 	bl	80007dc <__aeabi_ddiv>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fd79 	bl	8000ae8 <__aeabi_d2f>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a86      	ldr	r2, [pc, #536]	; (8002214 <driveServos+0x3c4>)
 8001ffa:	6013      	str	r3, [r2, #0]
			setServo( 3, ( 180 - outerAngle ));
 8001ffc:	4b85      	ldr	r3, [pc, #532]	; (8002214 <driveServos+0x3c4>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002204 <driveServos+0x3b4>
 8002006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200a:	eeb0 0a67 	vmov.f32	s0, s15
 800200e:	2003      	movs	r0, #3
 8002010:	f000 fe22 	bl	8002c58 <setServo>
			setServo( 4, outerAngle);
 8002014:	4b7f      	ldr	r3, [pc, #508]	; (8002214 <driveServos+0x3c4>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	2004      	movs	r0, #4
 8002020:	f000 fe1a 	bl	8002c58 <setServo>

			// set motor driver 2
			Rref = sqrt( (pow( outerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 8002024:	4b79      	ldr	r3, [pc, #484]	; (800220c <driveServos+0x3bc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa55 	bl	80004d8 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80021e8 <driveServos+0x398>
 8002036:	ec43 2b10 	vmov	d0, r2, r3
 800203a:	f006 fd37 	bl	8008aac <pow>
 800203e:	ec51 0b10 	vmov	r0, r1, d0
 8002042:	a36b      	add	r3, pc, #428	; (adr r3, 80021f0 <driveServos+0x3a0>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe f8e8 	bl	800021c <__adddf3>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	ec43 2b17 	vmov	d7, r2, r3
 8002054:	eeb0 0a47 	vmov.f32	s0, s14
 8002058:	eef0 0a67 	vmov.f32	s1, s15
 800205c:	f006 fd96 	bl	8008b8c <sqrt>
 8002060:	ec53 2b10 	vmov	r2, r3, d0
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fd3e 	bl	8000ae8 <__aeabi_d2f>
 800206c:	4603      	mov	r3, r0
 800206e:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <driveServos+0x3c8>)
 8002070:	6013      	str	r3, [r2, #0]
			Vref = sqrt( (A_C * Rref ) );
 8002072:	4b69      	ldr	r3, [pc, #420]	; (8002218 <driveServos+0x3c8>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800221c <driveServos+0x3cc>
 800207c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002080:	ee17 0a90 	vmov	r0, s15
 8002084:	f7fe fa28 	bl	80004d8 <__aeabi_f2d>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	ec43 2b10 	vmov	d0, r2, r3
 8002090:	f006 fd7c 	bl	8008b8c <sqrt>
 8002094:	ec53 2b10 	vmov	r2, r3, d0
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd24 	bl	8000ae8 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a5f      	ldr	r2, [pc, #380]	; (8002220 <driveServos+0x3d0>)
 80020a4:	6013      	str	r3, [r2, #0]

			int motor2Velo = Vref;
 80020a6:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <driveServos+0x3d0>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b0:	ee17 3a90 	vmov	r3, s15
 80020b4:	617b      	str	r3, [r7, #20]

			// motor driver 4
			motor4Radius = outerHor;
 80020b6:	4b55      	ldr	r3, [pc, #340]	; (800220c <driveServos+0x3bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <driveServos+0x3d4>)
 80020bc:	6013      	str	r3, [r2, #0]
			int motor4Velo = (Vref * motor4Radius) / Rref;
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <driveServos+0x3d0>)
 80020c0:	ed93 7a00 	vldr	s14, [r3]
 80020c4:	4b57      	ldr	r3, [pc, #348]	; (8002224 <driveServos+0x3d4>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <driveServos+0x3c8>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	ee17 3a90 	vmov	r3, s15
 80020e0:	613b      	str	r3, [r7, #16]

			// set motor driver 1
			motor1Radius = sqrt( (pow( innerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 80020e2:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <driveServos+0x3a8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f9f6 	bl	80004d8 <__aeabi_f2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80021e8 <driveServos+0x398>
 80020f4:	ec43 2b10 	vmov	d0, r2, r3
 80020f8:	f006 fcd8 	bl	8008aac <pow>
 80020fc:	ec51 0b10 	vmov	r0, r1, d0
 8002100:	a33b      	add	r3, pc, #236	; (adr r3, 80021f0 <driveServos+0x3a0>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe f889 	bl	800021c <__adddf3>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	ec43 2b17 	vmov	d7, r2, r3
 8002112:	eeb0 0a47 	vmov.f32	s0, s14
 8002116:	eef0 0a67 	vmov.f32	s1, s15
 800211a:	f006 fd37 	bl	8008b8c <sqrt>
 800211e:	ec53 2b10 	vmov	r2, r3, d0
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f7fe fcdf 	bl	8000ae8 <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <driveServos+0x3d8>)
 800212e:	6013      	str	r3, [r2, #0]
			int motor1Velo = (Vref * motor1Radius) / Rref;
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <driveServos+0x3d0>)
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <driveServos+0x3d8>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <driveServos+0x3c8>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214e:	ee17 3a90 	vmov	r3, s15
 8002152:	60fb      	str	r3, [r7, #12]

			// motor driver 3
			motor3Radius = innerHor;
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <driveServos+0x3a8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a34      	ldr	r2, [pc, #208]	; (800222c <driveServos+0x3dc>)
 800215a:	6013      	str	r3, [r2, #0]
			int motor3Velo = (Vref * motor3Radius) / Rref;
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <driveServos+0x3d0>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <driveServos+0x3dc>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee67 6a27 	vmul.f32	s13, s14, s15
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <driveServos+0x3c8>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217a:	ee17 3a90 	vmov	r3, s15
 800217e:	60bb      	str	r3, [r7, #8]

			setMotor( 1, motor1Velo, 1 );
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218a:	2101      	movs	r1, #1
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	2001      	movs	r0, #1
 8002192:	f000 fdcb 	bl	8002d2c <setMotor>
			setMotor( 2, motor2Velo, 1 );
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a0:	2101      	movs	r1, #1
 80021a2:	eeb0 0a67 	vmov.f32	s0, s15
 80021a6:	2002      	movs	r0, #2
 80021a8:	f000 fdc0 	bl	8002d2c <setMotor>
			setMotor( 3, motor3Velo, 1 );
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	2101      	movs	r1, #1
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	2003      	movs	r0, #3
 80021be:	f000 fdb5 	bl	8002d2c <setMotor>
			setMotor( 4, motor4Velo, 1 );
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021cc:	2101      	movs	r1, #1
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	2004      	movs	r0, #4
 80021d4:	f000 fdaa 	bl	8002d2c <setMotor>
			setMotor( 2, motor2Velo, 1 );
			setMotor( 3, motor3Velo, 1 );
			setMotor( 4, motor4Velo, 1 );
		}
	}
}
 80021d8:	f000 bd0f 	b.w	8002bfa <driveServos+0xdaa>
 80021dc:	f3af 8000 	nop.w
 80021e0:	54524550 	.word	0x54524550
 80021e4:	400921fb 	.word	0x400921fb
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40000000 	.word	0x40000000
 80021f0:	00000000 	.word	0x00000000
 80021f4:	40e38800 	.word	0x40e38800
 80021f8:	2000025c 	.word	0x2000025c
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000254 	.word	0x20000254
 8002204:	43340000 	.word	0x43340000
 8002208:	20000258 	.word	0x20000258
 800220c:	20000268 	.word	0x20000268
 8002210:	20000260 	.word	0x20000260
 8002214:	20000264 	.word	0x20000264
 8002218:	2000026c 	.word	0x2000026c
 800221c:	44610000 	.word	0x44610000
 8002220:	20000270 	.word	0x20000270
 8002224:	20000280 	.word	0x20000280
 8002228:	20000274 	.word	0x20000274
 800222c:	2000027c 	.word	0x2000027c
		else if( (radius > ( 0 - (WHEELWIDTH /2))) && (radius < 0) )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f113 0f7c 	cmn.w	r3, #124	; 0x7c
 8002236:	f2c0 81af 	blt.w	8002598 <driveServos+0x748>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f280 81ab 	bge.w	8002598 <driveServos+0x748>
			int absRadius = abs( radius );
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	bfb8      	it	lt
 8002248:	425b      	neglt	r3, r3
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
			innerHor = ( WHEELWIDTH / 2 ) - absRadius;
 800224c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	4bc1      	ldr	r3, [pc, #772]	; (8002560 <driveServos+0x710>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
			innerTheta = atan( innerHor / servoVert );
 8002260:	4bbf      	ldr	r3, [pc, #764]	; (8002560 <driveServos+0x710>)
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	4bbf      	ldr	r3, [pc, #764]	; (8002564 <driveServos+0x714>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002270:	ee16 0a90 	vmov	r0, s13
 8002274:	f7fe f930 	bl	80004d8 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	ec43 2b10 	vmov	d0, r2, r3
 8002280:	f006 fcb2 	bl	8008be8 <atan>
 8002284:	ec53 2b10 	vmov	r2, r3, d0
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fc2c 	bl	8000ae8 <__aeabi_d2f>
 8002290:	4603      	mov	r3, r0
 8002292:	4ab5      	ldr	r2, [pc, #724]	; (8002568 <driveServos+0x718>)
 8002294:	6013      	str	r3, [r2, #0]
			innerAngle = (( innerTheta * 180 ) / PI);
 8002296:	4bb4      	ldr	r3, [pc, #720]	; (8002568 <driveServos+0x718>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800256c <driveServos+0x71c>
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	ee17 0a90 	vmov	r0, s15
 80022a8:	f7fe f916 	bl	80004d8 <__aeabi_f2d>
 80022ac:	a3a6      	add	r3, pc, #664	; (adr r3, 8002548 <driveServos+0x6f8>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe fa93 	bl	80007dc <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fc13 	bl	8000ae8 <__aeabi_d2f>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4aaa      	ldr	r2, [pc, #680]	; (8002570 <driveServos+0x720>)
 80022c6:	6013      	str	r3, [r2, #0]
			setServo( 1, ( 180 - innerAngle ));
 80022c8:	4ba9      	ldr	r3, [pc, #676]	; (8002570 <driveServos+0x720>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800256c <driveServos+0x71c>
 80022d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d6:	eeb0 0a67 	vmov.f32	s0, s15
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fcbc 	bl	8002c58 <setServo>
			setServo( 2, innerAngle);
 80022e0:	4ba3      	ldr	r3, [pc, #652]	; (8002570 <driveServos+0x720>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ea:	2002      	movs	r0, #2
 80022ec:	f000 fcb4 	bl	8002c58 <setServo>
			outerHor = ( WHEELWIDTH / 2 ) + absRadius;
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	337d      	adds	r3, #125	; 0x7d
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fc:	4b9d      	ldr	r3, [pc, #628]	; (8002574 <driveServos+0x724>)
 80022fe:	edc3 7a00 	vstr	s15, [r3]
			outerTheta = atan( outerHor / servoVert );
 8002302:	4b9c      	ldr	r3, [pc, #624]	; (8002574 <driveServos+0x724>)
 8002304:	ed93 7a00 	vldr	s14, [r3]
 8002308:	4b96      	ldr	r3, [pc, #600]	; (8002564 <driveServos+0x714>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002312:	ee16 0a90 	vmov	r0, s13
 8002316:	f7fe f8df 	bl	80004d8 <__aeabi_f2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	ec43 2b10 	vmov	d0, r2, r3
 8002322:	f006 fc61 	bl	8008be8 <atan>
 8002326:	ec53 2b10 	vmov	r2, r3, d0
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fbdb 	bl	8000ae8 <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	4a90      	ldr	r2, [pc, #576]	; (8002578 <driveServos+0x728>)
 8002336:	6013      	str	r3, [r2, #0]
			outerAngle = (( outerTheta * 180 ) / PI);
 8002338:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <driveServos+0x728>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800256c <driveServos+0x71c>
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f8c5 	bl	80004d8 <__aeabi_f2d>
 800234e:	a37e      	add	r3, pc, #504	; (adr r3, 8002548 <driveServos+0x6f8>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fa42 	bl	80007dc <__aeabi_ddiv>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbc2 	bl	8000ae8 <__aeabi_d2f>
 8002364:	4603      	mov	r3, r0
 8002366:	4a85      	ldr	r2, [pc, #532]	; (800257c <driveServos+0x72c>)
 8002368:	6013      	str	r3, [r2, #0]
			setServo( 3, ( 180 - outerAngle ));
 800236a:	4b84      	ldr	r3, [pc, #528]	; (800257c <driveServos+0x72c>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800256c <driveServos+0x71c>
 8002374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002378:	eeb0 0a67 	vmov.f32	s0, s15
 800237c:	2003      	movs	r0, #3
 800237e:	f000 fc6b 	bl	8002c58 <setServo>
			setServo( 4, outerAngle);
 8002382:	4b7e      	ldr	r3, [pc, #504]	; (800257c <driveServos+0x72c>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	eeb0 0a67 	vmov.f32	s0, s15
 800238c:	2004      	movs	r0, #4
 800238e:	f000 fc63 	bl	8002c58 <setServo>
			Rref = sqrt( (pow( outerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <driveServos+0x724>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f89e 	bl	80004d8 <__aeabi_f2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002550 <driveServos+0x700>
 80023a4:	ec43 2b10 	vmov	d0, r2, r3
 80023a8:	f006 fb80 	bl	8008aac <pow>
 80023ac:	ec51 0b10 	vmov	r0, r1, d0
 80023b0:	a369      	add	r3, pc, #420	; (adr r3, 8002558 <driveServos+0x708>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fd ff31 	bl	800021c <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	ec43 2b17 	vmov	d7, r2, r3
 80023c2:	eeb0 0a47 	vmov.f32	s0, s14
 80023c6:	eef0 0a67 	vmov.f32	s1, s15
 80023ca:	f006 fbdf 	bl	8008b8c <sqrt>
 80023ce:	ec53 2b10 	vmov	r2, r3, d0
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fb87 	bl	8000ae8 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a68      	ldr	r2, [pc, #416]	; (8002580 <driveServos+0x730>)
 80023de:	6013      	str	r3, [r2, #0]
			Vref = sqrt( (A_C * Rref ) );
 80023e0:	4b67      	ldr	r3, [pc, #412]	; (8002580 <driveServos+0x730>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002584 <driveServos+0x734>
 80023ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ee:	ee17 0a90 	vmov	r0, s15
 80023f2:	f7fe f871 	bl	80004d8 <__aeabi_f2d>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ec43 2b10 	vmov	d0, r2, r3
 80023fe:	f006 fbc5 	bl	8008b8c <sqrt>
 8002402:	ec53 2b10 	vmov	r2, r3, d0
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fb6d 	bl	8000ae8 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	4a5d      	ldr	r2, [pc, #372]	; (8002588 <driveServos+0x738>)
 8002412:	6013      	str	r3, [r2, #0]
			int motor2Velo = Vref;
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <driveServos+0x738>)
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
			motor4Radius = outerHor;
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <driveServos+0x724>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <driveServos+0x73c>)
 800242a:	6013      	str	r3, [r2, #0]
			int motor4Velo = (Vref * motor4Radius) / Rref;
 800242c:	4b56      	ldr	r3, [pc, #344]	; (8002588 <driveServos+0x738>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <driveServos+0x73c>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 6a27 	vmul.f32	s13, s14, s15
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <driveServos+0x730>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244a:	ee17 3a90 	vmov	r3, s15
 800244e:	647b      	str	r3, [r7, #68]	; 0x44
			motor1Radius = sqrt( (pow( innerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 8002450:	4b43      	ldr	r3, [pc, #268]	; (8002560 <driveServos+0x710>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f83f 	bl	80004d8 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002550 <driveServos+0x700>
 8002462:	ec43 2b10 	vmov	d0, r2, r3
 8002466:	f006 fb21 	bl	8008aac <pow>
 800246a:	ec51 0b10 	vmov	r0, r1, d0
 800246e:	a33a      	add	r3, pc, #232	; (adr r3, 8002558 <driveServos+0x708>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fd fed2 	bl	800021c <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	ec43 2b17 	vmov	d7, r2, r3
 8002480:	eeb0 0a47 	vmov.f32	s0, s14
 8002484:	eef0 0a67 	vmov.f32	s1, s15
 8002488:	f006 fb80 	bl	8008b8c <sqrt>
 800248c:	ec53 2b10 	vmov	r2, r3, d0
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe fb28 	bl	8000ae8 <__aeabi_d2f>
 8002498:	4603      	mov	r3, r0
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <driveServos+0x740>)
 800249c:	6013      	str	r3, [r2, #0]
			int motor1Velo = (Vref * motor1Radius) / Rref;
 800249e:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <driveServos+0x738>)
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <driveServos+0x740>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <driveServos+0x730>)
 80024b0:	ed93 7a00 	vldr	s14, [r3]
 80024b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024bc:	ee17 3a90 	vmov	r3, s15
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
			motor3Radius = innerHor;
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <driveServos+0x710>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a33      	ldr	r2, [pc, #204]	; (8002594 <driveServos+0x744>)
 80024c8:	6013      	str	r3, [r2, #0]
			int motor3Velo = (Vref * motor3Radius) / Rref;
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <driveServos+0x738>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <driveServos+0x744>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <driveServos+0x730>)
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 3a90 	vmov	r3, s15
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			setMotor( 1, motor1Velo, 0 );
 80024ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f8:	2100      	movs	r1, #0
 80024fa:	eeb0 0a67 	vmov.f32	s0, s15
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 fc14 	bl	8002d2c <setMotor>
			setMotor( 2, motor2Velo, 1 );
 8002504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250e:	2101      	movs	r1, #1
 8002510:	eeb0 0a67 	vmov.f32	s0, s15
 8002514:	2002      	movs	r0, #2
 8002516:	f000 fc09 	bl	8002d2c <setMotor>
			setMotor( 3, motor3Velo, 0 );
 800251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002524:	2100      	movs	r1, #0
 8002526:	eeb0 0a67 	vmov.f32	s0, s15
 800252a:	2003      	movs	r0, #3
 800252c:	f000 fbfe 	bl	8002d2c <setMotor>
			setMotor( 4, motor4Velo, 1 );
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	2101      	movs	r1, #1
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	2004      	movs	r0, #4
 8002542:	f000 fbf3 	bl	8002d2c <setMotor>
		{
 8002546:	e358      	b.n	8002bfa <driveServos+0xdaa>
 8002548:	54524550 	.word	0x54524550
 800254c:	400921fb 	.word	0x400921fb
 8002550:	00000000 	.word	0x00000000
 8002554:	40000000 	.word	0x40000000
 8002558:	00000000 	.word	0x00000000
 800255c:	40e38800 	.word	0x40e38800
 8002560:	2000025c 	.word	0x2000025c
 8002564:	20000000 	.word	0x20000000
 8002568:	20000254 	.word	0x20000254
 800256c:	43340000 	.word	0x43340000
 8002570:	20000258 	.word	0x20000258
 8002574:	20000268 	.word	0x20000268
 8002578:	20000260 	.word	0x20000260
 800257c:	20000264 	.word	0x20000264
 8002580:	2000026c 	.word	0x2000026c
 8002584:	44610000 	.word	0x44610000
 8002588:	20000270 	.word	0x20000270
 800258c:	20000280 	.word	0x20000280
 8002590:	20000274 	.word	0x20000274
 8002594:	2000027c 	.word	0x2000027c
		else if( (radius < (WHEELWIDTH /2)) && (radius > 0) )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b7c      	cmp	r3, #124	; 0x7c
 800259c:	f300 81ac 	bgt.w	80028f8 <driveServos+0xaa8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f340 81a8 	ble.w	80028f8 <driveServos+0xaa8>
			innerHor = ( WHEELWIDTH / 2 ) - radius;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	4bc2      	ldr	r3, [pc, #776]	; (80028c0 <driveServos+0xa70>)
 80025b8:	edc3 7a00 	vstr	s15, [r3]
			innerTheta = atan( innerHor / servoVert );
 80025bc:	4bc0      	ldr	r3, [pc, #768]	; (80028c0 <driveServos+0xa70>)
 80025be:	ed93 7a00 	vldr	s14, [r3]
 80025c2:	4bc0      	ldr	r3, [pc, #768]	; (80028c4 <driveServos+0xa74>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80025cc:	ee16 0a90 	vmov	r0, s13
 80025d0:	f7fd ff82 	bl	80004d8 <__aeabi_f2d>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	ec43 2b10 	vmov	d0, r2, r3
 80025dc:	f006 fb04 	bl	8008be8 <atan>
 80025e0:	ec53 2b10 	vmov	r2, r3, d0
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fa7e 	bl	8000ae8 <__aeabi_d2f>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4ab6      	ldr	r2, [pc, #728]	; (80028c8 <driveServos+0xa78>)
 80025f0:	6013      	str	r3, [r2, #0]
			innerAngle = (( innerTheta * 180 ) / PI);
 80025f2:	4bb5      	ldr	r3, [pc, #724]	; (80028c8 <driveServos+0xa78>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80028cc <driveServos+0xa7c>
 80025fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002600:	ee17 0a90 	vmov	r0, s15
 8002604:	f7fd ff68 	bl	80004d8 <__aeabi_f2d>
 8002608:	a3a7      	add	r3, pc, #668	; (adr r3, 80028a8 <driveServos+0xa58>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fe f8e5 	bl	80007dc <__aeabi_ddiv>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fe fa65 	bl	8000ae8 <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	4aab      	ldr	r2, [pc, #684]	; (80028d0 <driveServos+0xa80>)
 8002622:	6013      	str	r3, [r2, #0]
			setServo( 3, ( 180 - innerAngle ));
 8002624:	4baa      	ldr	r3, [pc, #680]	; (80028d0 <driveServos+0xa80>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80028cc <driveServos+0xa7c>
 800262e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	2003      	movs	r0, #3
 8002638:	f000 fb0e 	bl	8002c58 <setServo>
			setServo( 4, innerAngle);
 800263c:	4ba4      	ldr	r3, [pc, #656]	; (80028d0 <driveServos+0xa80>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	2004      	movs	r0, #4
 8002648:	f000 fb06 	bl	8002c58 <setServo>
			outerHor = ( WHEELWIDTH / 2 ) + radius;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	337d      	adds	r3, #125	; 0x7d
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002658:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <driveServos+0xa84>)
 800265a:	edc3 7a00 	vstr	s15, [r3]
			outerTheta = atan( outerHor / servoVert );
 800265e:	4b9d      	ldr	r3, [pc, #628]	; (80028d4 <driveServos+0xa84>)
 8002660:	ed93 7a00 	vldr	s14, [r3]
 8002664:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <driveServos+0xa74>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800266e:	ee16 0a90 	vmov	r0, s13
 8002672:	f7fd ff31 	bl	80004d8 <__aeabi_f2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	ec43 2b10 	vmov	d0, r2, r3
 800267e:	f006 fab3 	bl	8008be8 <atan>
 8002682:	ec53 2b10 	vmov	r2, r3, d0
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f7fe fa2d 	bl	8000ae8 <__aeabi_d2f>
 800268e:	4603      	mov	r3, r0
 8002690:	4a91      	ldr	r2, [pc, #580]	; (80028d8 <driveServos+0xa88>)
 8002692:	6013      	str	r3, [r2, #0]
			outerAngle = (( outerTheta * 180 ) / PI);
 8002694:	4b90      	ldr	r3, [pc, #576]	; (80028d8 <driveServos+0xa88>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80028cc <driveServos+0xa7c>
 800269e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a2:	ee17 0a90 	vmov	r0, s15
 80026a6:	f7fd ff17 	bl	80004d8 <__aeabi_f2d>
 80026aa:	a37f      	add	r3, pc, #508	; (adr r3, 80028a8 <driveServos+0xa58>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fe f894 	bl	80007dc <__aeabi_ddiv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f7fe fa14 	bl	8000ae8 <__aeabi_d2f>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a86      	ldr	r2, [pc, #536]	; (80028dc <driveServos+0xa8c>)
 80026c4:	6013      	str	r3, [r2, #0]
			setServo( 1, ( 180 - outerAngle ));
 80026c6:	4b85      	ldr	r3, [pc, #532]	; (80028dc <driveServos+0xa8c>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80028cc <driveServos+0xa7c>
 80026d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	2001      	movs	r0, #1
 80026da:	f000 fabd 	bl	8002c58 <setServo>
			setServo( 2, outerAngle);
 80026de:	4b7f      	ldr	r3, [pc, #508]	; (80028dc <driveServos+0xa8c>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	2002      	movs	r0, #2
 80026ea:	f000 fab5 	bl	8002c58 <setServo>
			Rref = sqrt( (pow( outerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 80026ee:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <driveServos+0xa84>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fef0 	bl	80004d8 <__aeabi_f2d>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 80028b0 <driveServos+0xa60>
 8002700:	ec43 2b10 	vmov	d0, r2, r3
 8002704:	f006 f9d2 	bl	8008aac <pow>
 8002708:	ec51 0b10 	vmov	r0, r1, d0
 800270c:	a36a      	add	r3, pc, #424	; (adr r3, 80028b8 <driveServos+0xa68>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd fd83 	bl	800021c <__adddf3>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	ec43 2b17 	vmov	d7, r2, r3
 800271e:	eeb0 0a47 	vmov.f32	s0, s14
 8002722:	eef0 0a67 	vmov.f32	s1, s15
 8002726:	f006 fa31 	bl	8008b8c <sqrt>
 800272a:	ec53 2b10 	vmov	r2, r3, d0
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe f9d9 	bl	8000ae8 <__aeabi_d2f>
 8002736:	4603      	mov	r3, r0
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <driveServos+0xa90>)
 800273a:	6013      	str	r3, [r2, #0]
			Vref = sqrt( (A_C * Rref ) );
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <driveServos+0xa90>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80028e4 <driveServos+0xa94>
 8002746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274a:	ee17 0a90 	vmov	r0, s15
 800274e:	f7fd fec3 	bl	80004d8 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ec43 2b10 	vmov	d0, r2, r3
 800275a:	f006 fa17 	bl	8008b8c <sqrt>
 800275e:	ec53 2b10 	vmov	r2, r3, d0
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f7fe f9bf 	bl	8000ae8 <__aeabi_d2f>
 800276a:	4603      	mov	r3, r0
 800276c:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <driveServos+0xa98>)
 800276e:	6013      	str	r3, [r2, #0]
			int motor1Velo = Vref;
 8002770:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <driveServos+0xa98>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277a:	ee17 3a90 	vmov	r3, s15
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38
			motor3Radius = outerHor;
 8002780:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <driveServos+0xa84>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a59      	ldr	r2, [pc, #356]	; (80028ec <driveServos+0xa9c>)
 8002786:	6013      	str	r3, [r2, #0]
			int motor3Velo = (Vref * motor3Radius) / Rref;
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <driveServos+0xa98>)
 800278a:	ed93 7a00 	vldr	s14, [r3]
 800278e:	4b57      	ldr	r3, [pc, #348]	; (80028ec <driveServos+0xa9c>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002798:	4b51      	ldr	r3, [pc, #324]	; (80028e0 <driveServos+0xa90>)
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027a6:	ee17 3a90 	vmov	r3, s15
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
			motor2Radius = sqrt( (pow( innerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 80027ac:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <driveServos+0xa70>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fe91 	bl	80004d8 <__aeabi_f2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80028b0 <driveServos+0xa60>
 80027be:	ec43 2b10 	vmov	d0, r2, r3
 80027c2:	f006 f973 	bl	8008aac <pow>
 80027c6:	ec51 0b10 	vmov	r0, r1, d0
 80027ca:	a33b      	add	r3, pc, #236	; (adr r3, 80028b8 <driveServos+0xa68>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd fd24 	bl	800021c <__adddf3>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	ec43 2b17 	vmov	d7, r2, r3
 80027dc:	eeb0 0a47 	vmov.f32	s0, s14
 80027e0:	eef0 0a67 	vmov.f32	s1, s15
 80027e4:	f006 f9d2 	bl	8008b8c <sqrt>
 80027e8:	ec53 2b10 	vmov	r2, r3, d0
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f97a 	bl	8000ae8 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <driveServos+0xaa0>)
 80027f8:	6013      	str	r3, [r2, #0]
			int motor2Velo = (Vref * motor2Radius) / Rref;
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <driveServos+0xa98>)
 80027fc:	ed93 7a00 	vldr	s14, [r3]
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <driveServos+0xaa0>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ee67 6a27 	vmul.f32	s13, s14, s15
 800280a:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <driveServos+0xa90>)
 800280c:	ed93 7a00 	vldr	s14, [r3]
 8002810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002818:	ee17 3a90 	vmov	r3, s15
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
			motor4Radius = innerHor;
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <driveServos+0xa70>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <driveServos+0xaa4>)
 8002824:	6013      	str	r3, [r2, #0]
			int motor4Velo = (Vref * motor4Radius) / Rref;
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <driveServos+0xa98>)
 8002828:	ed93 7a00 	vldr	s14, [r3]
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <driveServos+0xaa4>)
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <driveServos+0xa90>)
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002844:	ee17 3a90 	vmov	r3, s15
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
			setMotor( 1, motor1Velo, 1 );
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002854:	2101      	movs	r1, #1
 8002856:	eeb0 0a67 	vmov.f32	s0, s15
 800285a:	2001      	movs	r0, #1
 800285c:	f000 fa66 	bl	8002d2c <setMotor>
			setMotor( 2, motor2Velo, 0 );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286a:	2100      	movs	r1, #0
 800286c:	eeb0 0a67 	vmov.f32	s0, s15
 8002870:	2002      	movs	r0, #2
 8002872:	f000 fa5b 	bl	8002d2c <setMotor>
			setMotor( 3, motor3Velo, 1 );
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002880:	2101      	movs	r1, #1
 8002882:	eeb0 0a67 	vmov.f32	s0, s15
 8002886:	2003      	movs	r0, #3
 8002888:	f000 fa50 	bl	8002d2c <setMotor>
			setMotor( 4, motor4Velo, 0 );
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002896:	2100      	movs	r1, #0
 8002898:	eeb0 0a67 	vmov.f32	s0, s15
 800289c:	2004      	movs	r0, #4
 800289e:	f000 fa45 	bl	8002d2c <setMotor>
		{
 80028a2:	e1aa      	b.n	8002bfa <driveServos+0xdaa>
 80028a4:	f3af 8000 	nop.w
 80028a8:	54524550 	.word	0x54524550
 80028ac:	400921fb 	.word	0x400921fb
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40000000 	.word	0x40000000
 80028b8:	00000000 	.word	0x00000000
 80028bc:	40e38800 	.word	0x40e38800
 80028c0:	2000025c 	.word	0x2000025c
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000254 	.word	0x20000254
 80028cc:	43340000 	.word	0x43340000
 80028d0:	20000258 	.word	0x20000258
 80028d4:	20000268 	.word	0x20000268
 80028d8:	20000260 	.word	0x20000260
 80028dc:	20000264 	.word	0x20000264
 80028e0:	2000026c 	.word	0x2000026c
 80028e4:	44610000 	.word	0x44610000
 80028e8:	20000270 	.word	0x20000270
 80028ec:	2000027c 	.word	0x2000027c
 80028f0:	20000278 	.word	0x20000278
 80028f4:	20000280 	.word	0x20000280
		else if ( radius > (WHEELWIDTH /2) )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b7d      	cmp	r3, #125	; 0x7d
 80028fc:	f340 817d 	ble.w	8002bfa <driveServos+0xdaa>
			innerHor =  radius - ( WHEELWIDTH / 2 );
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b7d      	subs	r3, #125	; 0x7d
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290c:	4bc4      	ldr	r3, [pc, #784]	; (8002c20 <driveServos+0xdd0>)
 800290e:	edc3 7a00 	vstr	s15, [r3]
			innerTheta = atan( innerHor / servoVert );
 8002912:	4bc3      	ldr	r3, [pc, #780]	; (8002c20 <driveServos+0xdd0>)
 8002914:	ed93 7a00 	vldr	s14, [r3]
 8002918:	4bc2      	ldr	r3, [pc, #776]	; (8002c24 <driveServos+0xdd4>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002922:	ee16 0a90 	vmov	r0, s13
 8002926:	f7fd fdd7 	bl	80004d8 <__aeabi_f2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	ec43 2b10 	vmov	d0, r2, r3
 8002932:	f006 f959 	bl	8008be8 <atan>
 8002936:	ec53 2b10 	vmov	r2, r3, d0
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f8d3 	bl	8000ae8 <__aeabi_d2f>
 8002942:	4603      	mov	r3, r0
 8002944:	4ab8      	ldr	r2, [pc, #736]	; (8002c28 <driveServos+0xdd8>)
 8002946:	6013      	str	r3, [r2, #0]
			innerAngle = (( innerTheta * 180 ) / PI);
 8002948:	4bb7      	ldr	r3, [pc, #732]	; (8002c28 <driveServos+0xdd8>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002c2c <driveServos+0xddc>
 8002952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002956:	ee17 0a90 	vmov	r0, s15
 800295a:	f7fd fdbd 	bl	80004d8 <__aeabi_f2d>
 800295e:	a3aa      	add	r3, pc, #680	; (adr r3, 8002c08 <driveServos+0xdb8>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd ff3a 	bl	80007dc <__aeabi_ddiv>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f8ba 	bl	8000ae8 <__aeabi_d2f>
 8002974:	4603      	mov	r3, r0
 8002976:	4aae      	ldr	r2, [pc, #696]	; (8002c30 <driveServos+0xde0>)
 8002978:	6013      	str	r3, [r2, #0]
			setServo( 3, innerAngle);
 800297a:	4bad      	ldr	r3, [pc, #692]	; (8002c30 <driveServos+0xde0>)
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	eeb0 0a67 	vmov.f32	s0, s15
 8002984:	2003      	movs	r0, #3
 8002986:	f000 f967 	bl	8002c58 <setServo>
			setServo( 4, ( 180 - innerAngle ));
 800298a:	4ba9      	ldr	r3, [pc, #676]	; (8002c30 <driveServos+0xde0>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002c2c <driveServos+0xddc>
 8002994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	2004      	movs	r0, #4
 800299e:	f000 f95b 	bl	8002c58 <setServo>
			outerHor = ( WHEELWIDTH / 2 ) + radius;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	337d      	adds	r3, #125	; 0x7d
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ae:	4ba1      	ldr	r3, [pc, #644]	; (8002c34 <driveServos+0xde4>)
 80029b0:	edc3 7a00 	vstr	s15, [r3]
			outerTheta = atan( outerHor / servoVert );
 80029b4:	4b9f      	ldr	r3, [pc, #636]	; (8002c34 <driveServos+0xde4>)
 80029b6:	ed93 7a00 	vldr	s14, [r3]
 80029ba:	4b9a      	ldr	r3, [pc, #616]	; (8002c24 <driveServos+0xdd4>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029c4:	ee16 0a90 	vmov	r0, s13
 80029c8:	f7fd fd86 	bl	80004d8 <__aeabi_f2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	ec43 2b10 	vmov	d0, r2, r3
 80029d4:	f006 f908 	bl	8008be8 <atan>
 80029d8:	ec53 2b10 	vmov	r2, r3, d0
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f7fe f882 	bl	8000ae8 <__aeabi_d2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a94      	ldr	r2, [pc, #592]	; (8002c38 <driveServos+0xde8>)
 80029e8:	6013      	str	r3, [r2, #0]
			outerAngle = (( outerTheta * 180 ) / PI);
 80029ea:	4b93      	ldr	r3, [pc, #588]	; (8002c38 <driveServos+0xde8>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002c2c <driveServos+0xddc>
 80029f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f8:	ee17 0a90 	vmov	r0, s15
 80029fc:	f7fd fd6c 	bl	80004d8 <__aeabi_f2d>
 8002a00:	a381      	add	r3, pc, #516	; (adr r3, 8002c08 <driveServos+0xdb8>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fee9 	bl	80007dc <__aeabi_ddiv>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f869 	bl	8000ae8 <__aeabi_d2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a88      	ldr	r2, [pc, #544]	; (8002c3c <driveServos+0xdec>)
 8002a1a:	6013      	str	r3, [r2, #0]
			setServo( 1, ( 180 - outerAngle ));
 8002a1c:	4b87      	ldr	r3, [pc, #540]	; (8002c3c <driveServos+0xdec>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002c2c <driveServos+0xddc>
 8002a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f000 f912 	bl	8002c58 <setServo>
			setServo( 2, outerAngle);
 8002a34:	4b81      	ldr	r3, [pc, #516]	; (8002c3c <driveServos+0xdec>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f000 f90a 	bl	8002c58 <setServo>
			Rref = sqrt( (pow( outerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 8002a44:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <driveServos+0xde4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd45 	bl	80004d8 <__aeabi_f2d>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002c10 <driveServos+0xdc0>
 8002a56:	ec43 2b10 	vmov	d0, r2, r3
 8002a5a:	f006 f827 	bl	8008aac <pow>
 8002a5e:	ec51 0b10 	vmov	r0, r1, d0
 8002a62:	a36d      	add	r3, pc, #436	; (adr r3, 8002c18 <driveServos+0xdc8>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fbd8 	bl	800021c <__adddf3>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	ec43 2b17 	vmov	d7, r2, r3
 8002a74:	eeb0 0a47 	vmov.f32	s0, s14
 8002a78:	eef0 0a67 	vmov.f32	s1, s15
 8002a7c:	f006 f886 	bl	8008b8c <sqrt>
 8002a80:	ec53 2b10 	vmov	r2, r3, d0
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f82e 	bl	8000ae8 <__aeabi_d2f>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a6c      	ldr	r2, [pc, #432]	; (8002c40 <driveServos+0xdf0>)
 8002a90:	6013      	str	r3, [r2, #0]
			Vref = sqrt( (A_C * Rref ) );
 8002a92:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <driveServos+0xdf0>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002c44 <driveServos+0xdf4>
 8002a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa0:	ee17 0a90 	vmov	r0, s15
 8002aa4:	f7fd fd18 	bl	80004d8 <__aeabi_f2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	ec43 2b10 	vmov	d0, r2, r3
 8002ab0:	f006 f86c 	bl	8008b8c <sqrt>
 8002ab4:	ec53 2b10 	vmov	r2, r3, d0
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f814 	bl	8000ae8 <__aeabi_d2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a61      	ldr	r2, [pc, #388]	; (8002c48 <driveServos+0xdf8>)
 8002ac4:	6013      	str	r3, [r2, #0]
			int motor1Velo = Vref;
 8002ac6:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <driveServos+0xdf8>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad0:	ee17 3a90 	vmov	r3, s15
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
			motor3Radius = outerHor;
 8002ad6:	4b57      	ldr	r3, [pc, #348]	; (8002c34 <driveServos+0xde4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a5c      	ldr	r2, [pc, #368]	; (8002c4c <driveServos+0xdfc>)
 8002adc:	6013      	str	r3, [r2, #0]
			int motor3Velo = (Vref * motor3Radius) / Rref;
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <driveServos+0xdf8>)
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <driveServos+0xdfc>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002aee:	4b54      	ldr	r3, [pc, #336]	; (8002c40 <driveServos+0xdf0>)
 8002af0:	ed93 7a00 	vldr	s14, [r3]
 8002af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afc:	ee17 3a90 	vmov	r3, s15
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
			motor2Radius = sqrt( (pow( innerHor, 2) + pow( (WHEELBASE / 2), 2) ) );
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <driveServos+0xdd0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fce6 	bl	80004d8 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002c10 <driveServos+0xdc0>
 8002b14:	ec43 2b10 	vmov	d0, r2, r3
 8002b18:	f005 ffc8 	bl	8008aac <pow>
 8002b1c:	ec51 0b10 	vmov	r0, r1, d0
 8002b20:	a33d      	add	r3, pc, #244	; (adr r3, 8002c18 <driveServos+0xdc8>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fb79 	bl	800021c <__adddf3>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	ec43 2b17 	vmov	d7, r2, r3
 8002b32:	eeb0 0a47 	vmov.f32	s0, s14
 8002b36:	eef0 0a67 	vmov.f32	s1, s15
 8002b3a:	f006 f827 	bl	8008b8c <sqrt>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fd ffcf 	bl	8000ae8 <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a40      	ldr	r2, [pc, #256]	; (8002c50 <driveServos+0xe00>)
 8002b4e:	6013      	str	r3, [r2, #0]
			int motor2Velo = (Vref * motor2Radius) / Rref;
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <driveServos+0xdf8>)
 8002b52:	ed93 7a00 	vldr	s14, [r3]
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <driveServos+0xe00>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <driveServos+0xdf0>)
 8002b62:	ed93 7a00 	vldr	s14, [r3]
 8002b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6e:	ee17 3a90 	vmov	r3, s15
 8002b72:	623b      	str	r3, [r7, #32]
			motor4Radius = innerHor;
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <driveServos+0xdd0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a36      	ldr	r2, [pc, #216]	; (8002c54 <driveServos+0xe04>)
 8002b7a:	6013      	str	r3, [r2, #0]
			int motor4Velo = (Vref * motor4Radius) / Rref;
 8002b7c:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <driveServos+0xdf8>)
 8002b7e:	ed93 7a00 	vldr	s14, [r3]
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <driveServos+0xe04>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <driveServos+0xdf0>)
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
 8002b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9a:	ee17 3a90 	vmov	r3, s15
 8002b9e:	61fb      	str	r3, [r7, #28]
			setMotor( 1, motor1Velo, 1 );
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002baa:	2101      	movs	r1, #1
 8002bac:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f000 f8bb 	bl	8002d2c <setMotor>
			setMotor( 2, motor2Velo, 1 );
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	f000 f8b0 	bl	8002d2c <setMotor>
			setMotor( 3, motor3Velo, 1 );
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f000 f8a5 	bl	8002d2c <setMotor>
			setMotor( 4, motor4Velo, 1 );
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	2101      	movs	r1, #1
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	2004      	movs	r0, #4
 8002bf4:	f000 f89a 	bl	8002d2c <setMotor>
}
 8002bf8:	e7ff      	b.n	8002bfa <driveServos+0xdaa>
 8002bfa:	bf00      	nop
 8002bfc:	3750      	adds	r7, #80	; 0x50
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	54524550 	.word	0x54524550
 8002c0c:	400921fb 	.word	0x400921fb
 8002c10:	00000000 	.word	0x00000000
 8002c14:	40000000 	.word	0x40000000
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	40e38800 	.word	0x40e38800
 8002c20:	2000025c 	.word	0x2000025c
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000254 	.word	0x20000254
 8002c2c:	43340000 	.word	0x43340000
 8002c30:	20000258 	.word	0x20000258
 8002c34:	20000268 	.word	0x20000268
 8002c38:	20000260 	.word	0x20000260
 8002c3c:	20000264 	.word	0x20000264
 8002c40:	2000026c 	.word	0x2000026c
 8002c44:	44610000 	.word	0x44610000
 8002c48:	20000270 	.word	0x20000270
 8002c4c:	2000027c 	.word	0x2000027c
 8002c50:	20000278 	.word	0x20000278
 8002c54:	20000280 	.word	0x20000280

08002c58 <setServo>:



void setServo( int servoNum, float angle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	ed87 0a00 	vstr	s0, [r7]
	switch (servoNum)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d857      	bhi.n	8002d1c <setServo+0xc4>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <setServo+0x1c>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002cab 	.word	0x08002cab
 8002c7c:	08002cd1 	.word	0x08002cd1
 8002c80:	08002cf7 	.word	0x08002cf7
	{
	case 1:
		//code for servo 1
		int servo1PWM = map( angle, 0, 180, SERVOPWMMIN, SERVOPWMMAX );
 8002c84:	edd7 7a00 	vldr	s15, [r7]
 8002c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c8c:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	23fa      	movs	r3, #250	; 0xfa
 8002c94:	22b4      	movs	r2, #180	; 0xb4
 8002c96:	2100      	movs	r1, #0
 8002c98:	ee17 0a90 	vmov	r0, s15
 8002c9c:	f7fe f918 	bl	8000ed0 <map>
 8002ca0:	60b8      	str	r0, [r7, #8]
		TIM3->CCR1 = servo1PWM;
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <setServo+0xd0>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8002ca8:	e039      	b.n	8002d1e <setServo+0xc6>
	case 2:
		//code for servo 2
		int servo2PWM = map( angle, 0, 180, SERVOPWMMIN, SERVOPWMMAX);
 8002caa:	edd7 7a00 	vldr	s15, [r7]
 8002cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb2:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	23fa      	movs	r3, #250	; 0xfa
 8002cba:	22b4      	movs	r2, #180	; 0xb4
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	ee17 0a90 	vmov	r0, s15
 8002cc2:	f7fe f905 	bl	8000ed0 <map>
 8002cc6:	60f8      	str	r0, [r7, #12]
		TIM3->CCR2 = servo2PWM;
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <setServo+0xd0>)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002cce:	e026      	b.n	8002d1e <setServo+0xc6>
	case 3:
		//code for servo 3
		int servo3PWM = map( angle, 0, 180, SERVOPWMMIN, SERVOPWMMAX);
 8002cd0:	edd7 7a00 	vldr	s15, [r7]
 8002cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd8:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	23fa      	movs	r3, #250	; 0xfa
 8002ce0:	22b4      	movs	r2, #180	; 0xb4
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	ee17 0a90 	vmov	r0, s15
 8002ce8:	f7fe f8f2 	bl	8000ed0 <map>
 8002cec:	6138      	str	r0, [r7, #16]
		TIM3->CCR3 = servo3PWM;
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <setServo+0xd0>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002cf4:	e013      	b.n	8002d1e <setServo+0xc6>
	case 4:
		//code for servo 4
		int servo4PWM = map( angle, 0, 180, SERVOPWMMIN, SERVOPWMMAX);
 8002cf6:	edd7 7a00 	vldr	s15, [r7]
 8002cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cfe:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	23fa      	movs	r3, #250	; 0xfa
 8002d06:	22b4      	movs	r2, #180	; 0xb4
 8002d08:	2100      	movs	r1, #0
 8002d0a:	ee17 0a90 	vmov	r0, s15
 8002d0e:	f7fe f8df 	bl	8000ed0 <map>
 8002d12:	6178      	str	r0, [r7, #20]
		TIM3->CCR4 = servo4PWM;
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <setServo+0xd0>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002d1a:	e000      	b.n	8002d1e <setServo+0xc6>
	default:
		break;
 8002d1c:	bf00      	nop
	}

}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40000400 	.word	0x40000400

08002d2c <setMotor>:

void setMotor( int motorNum, float power, int direction )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d38:	6079      	str	r1, [r7, #4]
	switch (motorNum)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f200 809c 	bhi.w	8002e7c <setMotor+0x150>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <setMotor+0x20>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002ded 	.word	0x08002ded
 8002d58:	08002e35 	.word	0x08002e35
	{
	case 1:
		//code for motor driver 1
		int motor1PWM = map( power, 0, MAX_V, MOTOR_MIN_PWM, MOTOR_MAX_PWM);
 8002d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d64:	f640 531f 	movw	r3, #3359	; 0xd1f
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002d6e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002d72:	2100      	movs	r1, #0
 8002d74:	ee17 0a90 	vmov	r0, s15
 8002d78:	f7fe f8aa 	bl	8000ed0 <map>
 8002d7c:	6138      	str	r0, [r7, #16]
		if( direction == 1 ) //forward
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <setMotor+0x68>
		{
			// set other to 0
			TIM2->CCR1 = 0;
 8002d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR1 = motor1PWM;
 8002d8c:	4a3e      	ldr	r2, [pc, #248]	; (8002e88 <setMotor+0x15c>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6353      	str	r3, [r2, #52]	; 0x34
			// set other to 0
			TIM1->CCR1 = 0;
			TIM2->CCR1 = motor1PWM;
		}

		break;
 8002d92:	e074      	b.n	8002e7e <setMotor+0x152>
			TIM1->CCR1 = 0;
 8002d94:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <setMotor+0x15c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = motor1PWM;
 8002d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8002da2:	e06c      	b.n	8002e7e <setMotor+0x152>
	case 2:
		//code for motor driver 2
		int motor2PWM = map( power, 0, MAX_V, MOTOR_MIN_PWM, MOTOR_MAX_PWM);
 8002da4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dac:	f640 531f 	movw	r3, #3359	; 0xd1f
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002db6:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002dba:	2100      	movs	r1, #0
 8002dbc:	ee17 0a90 	vmov	r0, s15
 8002dc0:	f7fe f886 	bl	8000ed0 <map>
 8002dc4:	6178      	str	r0, [r7, #20]
		if( direction == 1 ) //forward
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <setMotor+0xb0>
		{
			//set other to 0
			TIM1->CCR2 = 0;
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <setMotor+0x15c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR2 = motor2PWM;
 8002dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	6393      	str	r3, [r2, #56]	; 0x38
			// set other to 0
			TIM2->CCR2 = 0;
			TIM1->CCR2 = motor2PWM;

		}
		break;
 8002dda:	e050      	b.n	8002e7e <setMotor+0x152>
			TIM2->CCR2 = 0;
 8002ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002de0:	2200      	movs	r2, #0
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR2 = motor2PWM;
 8002de4:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <setMotor+0x15c>)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002dea:	e048      	b.n	8002e7e <setMotor+0x152>
	case 3:
		//code for motor driver 3
		int motor3PWM = map( power, 0, MAX_V, MOTOR_MIN_PWM, MOTOR_MAX_PWM);
 8002dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df4:	f640 531f 	movw	r3, #3359	; 0xd1f
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002dfe:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002e02:	2100      	movs	r1, #0
 8002e04:	ee17 0a90 	vmov	r0, s15
 8002e08:	f7fe f862 	bl	8000ed0 <map>
 8002e0c:	61b8      	str	r0, [r7, #24]
		if( direction == 1 ) //forward
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <setMotor+0xf8>
		{
			// set other to 0
			TIM2->CCR3 = 0;
 8002e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e18:	2200      	movs	r2, #0
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR3 = motor3PWM;
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <setMotor+0x15c>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	63d3      	str	r3, [r2, #60]	; 0x3c
			//set other to 0
			TIM1->CCR3 = 0;
			TIM2->CCR3 = motor3PWM;

		}
		break;
 8002e22:	e02c      	b.n	8002e7e <setMotor+0x152>
			TIM1->CCR3 = 0;
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <setMotor+0x15c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR3 = motor3PWM;
 8002e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002e32:	e024      	b.n	8002e7e <setMotor+0x152>
	case 4:
		//code for motor driver 4
		int motor4PWM = map( power, 0, MAX_V, MOTOR_MIN_PWM, MOTOR_MAX_PWM);
 8002e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e3c:	f640 531f 	movw	r3, #3359	; 0xd1f
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e46:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	ee17 0a90 	vmov	r0, s15
 8002e50:	f7fe f83e 	bl	8000ed0 <map>
 8002e54:	61f8      	str	r0, [r7, #28]
		if( direction == 1 ) //forward
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <setMotor+0x140>
		{
			//set other to 0
			TIM1->CCR4 = 0;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <setMotor+0x15c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
			TIM2->CCR4 = motor4PWM;
 8002e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
			// set other to 0
			TIM2->CCR4 = 0;
			TIM1->CCR4 = motor4PWM;

		}
		break;
 8002e6a:	e008      	b.n	8002e7e <setMotor+0x152>
			TIM2->CCR4 = 0;
 8002e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
			TIM1->CCR4 = motor4PWM;
 8002e74:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <setMotor+0x15c>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002e7a:	e000      	b.n	8002e7e <setMotor+0x152>
	default:
		break;
 8002e7c:	bf00      	nop
	}
}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40010000 	.word	0x40010000

08002e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_MspInit+0x54>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_MspInit+0x54>)
 8002e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_MspInit+0x54>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_MspInit+0x54>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_MspInit+0x54>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_MspInit+0x54>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	210f      	movs	r1, #15
 8002ece:	f06f 0001 	mvn.w	r0, #1
 8002ed2:	f000 fb47 	bl	8003564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <HAL_TIM_Base_MspInit+0xb4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f12:	e03a      	b.n	8002f8a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
}
 8002f3a:	e026      	b.n	8002f8a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_TIM_Base_MspInit+0xbc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	e012      	b.n	8002f8a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_TIM_Base_MspInit+0xc0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_TIM_Base_MspInit+0xb8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000c00 	.word	0x40000c00

08002fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	; 0x30
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a55      	ldr	r2, [pc, #340]	; (800311c <HAL_TIM_MspPostInit+0x174>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d11f      	bne.n	800300a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a53      	ldr	r2, [pc, #332]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b51      	ldr	r3, [pc, #324]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorCh1BKWD_Pin|MotorCh2BKWD_Pin|MotorCh3BKWD_Pin|MotorCh4BKWD_Pin;
 8002fe6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	4848      	ldr	r0, [pc, #288]	; (8003124 <HAL_TIM_MspPostInit+0x17c>)
 8003004:	f000 fad8 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003008:	e083      	b.n	8003112 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d13d      	bne.n	8003090 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4a40      	ldr	r2, [pc, #256]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6313      	str	r3, [r2, #48]	; 0x30
 8003024:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a39      	ldr	r2, [pc, #228]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b37      	ldr	r3, [pc, #220]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MotorCh1FWD_Pin|MotorCh2FWD_Pin;
 800304c:	2303      	movs	r3, #3
 800304e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800305c:	2301      	movs	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4619      	mov	r1, r3
 8003066:	482f      	ldr	r0, [pc, #188]	; (8003124 <HAL_TIM_MspPostInit+0x17c>)
 8003068:	f000 faa6 	bl	80035b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorCh4FWD_Pin|MotorCh3FWD_Pin;
 800306c:	f240 4304 	movw	r3, #1028	; 0x404
 8003070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800307e:	2301      	movs	r3, #1
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	4827      	ldr	r0, [pc, #156]	; (8003128 <HAL_TIM_MspPostInit+0x180>)
 800308a:	f000 fa95 	bl	80035b8 <HAL_GPIO_Init>
}
 800308e:	e040      	b.n	8003112 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <HAL_TIM_MspPostInit+0x184>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d13b      	bne.n	8003112 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HAL_TIM_MspPostInit+0x178>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ServoCh1_Pin|ServoCh2_Pin;
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030e2:	2302      	movs	r3, #2
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 031c 	add.w	r3, r7, #28
 80030ea:	4619      	mov	r1, r3
 80030ec:	480d      	ldr	r0, [pc, #52]	; (8003124 <HAL_TIM_MspPostInit+0x17c>)
 80030ee:	f000 fa63 	bl	80035b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ServoCh3_Pin|ServoCh4_Pin;
 80030f2:	2303      	movs	r3, #3
 80030f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003102:	2302      	movs	r3, #2
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003106:	f107 031c 	add.w	r3, r7, #28
 800310a:	4619      	mov	r1, r3
 800310c:	4806      	ldr	r0, [pc, #24]	; (8003128 <HAL_TIM_MspPostInit+0x180>)
 800310e:	f000 fa53 	bl	80035b8 <HAL_GPIO_Init>
}
 8003112:	bf00      	nop
 8003114:	3730      	adds	r7, #48	; 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40000400 	.word	0x40000400

08003130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_UART_MspInit+0x84>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d12b      	bne.n	80031aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_UART_MspInit+0x88>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_UART_MspInit+0x88>)
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_UART_MspInit+0x88>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_UART_MspInit+0x88>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <HAL_UART_MspInit+0x88>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_UART_MspInit+0x88>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800318a:	230c      	movs	r3, #12
 800318c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800319a:	2307      	movs	r3, #7
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <HAL_UART_MspInit+0x8c>)
 80031a6:	f000 fa07 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	; 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020000 	.word	0x40020000

080031c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	; 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <HAL_InitTick+0xe4>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	4a32      	ldr	r2, [pc, #200]	; (80032a4 <HAL_InitTick+0xe4>)
 80031da:	f043 0310 	orr.w	r3, r3, #16
 80031de:	6413      	str	r3, [r2, #64]	; 0x40
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <HAL_InitTick+0xe4>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031ec:	f107 0210 	add.w	r2, r7, #16
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fcd8 	bl	8003bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003206:	f000 fca9 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 800320a:	6378      	str	r0, [r7, #52]	; 0x34
 800320c:	e004      	b.n	8003218 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800320e:	f000 fca5 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8003212:	4603      	mov	r3, r0
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	4a23      	ldr	r2, [pc, #140]	; (80032a8 <HAL_InitTick+0xe8>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	0c9b      	lsrs	r3, r3, #18
 8003222:	3b01      	subs	r3, #1
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_InitTick+0xec>)
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_InitTick+0xf0>)
 800322a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_InitTick+0xec>)
 800322e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003232:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_InitTick+0xec>)
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_InitTick+0xec>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_InitTick+0xec>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003246:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_InitTick+0xec>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800324c:	4817      	ldr	r0, [pc, #92]	; (80032ac <HAL_InitTick+0xec>)
 800324e:	f001 f9ad 	bl	80045ac <HAL_TIM_Base_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11b      	bne.n	8003298 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003260:	4812      	ldr	r0, [pc, #72]	; (80032ac <HAL_InitTick+0xec>)
 8003262:	f001 fa5b 	bl	800471c <HAL_TIM_Base_Start_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800326c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003274:	2036      	movs	r0, #54	; 0x36
 8003276:	f000 f991 	bl	800359c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d808      	bhi.n	8003292 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003280:	2200      	movs	r2, #0
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	2036      	movs	r0, #54	; 0x36
 8003286:	f000 f96d 	bl	8003564 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_InitTick+0xf4>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e002      	b.n	8003298 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003298:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800329c:	4618      	mov	r0, r3
 800329e:	3738      	adds	r7, #56	; 0x38
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	431bde83 	.word	0x431bde83
 80032ac:	20000284 	.word	0x20000284
 80032b0:	40001000 	.word	0x40001000
 80032b4:	20000008 	.word	0x20000008

080032b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032bc:	e7fe      	b.n	80032bc <NMI_Handler+0x4>

080032be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <HardFault_Handler+0x4>

080032c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <MemManage_Handler+0x4>

080032ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <BusFault_Handler+0x4>

080032d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler+0x4>

080032d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <TIM6_DAC_IRQHandler+0x10>)
 80032ea:	f001 fba9 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000284 	.word	0x20000284

080032f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <SystemInit+0x20>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	4a05      	ldr	r2, [pc, #20]	; (8003318 <SystemInit+0x20>)
 8003304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <Reset_Handler>:
 800331c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003354 <LoopFillZerobss+0xe>
 8003320:	f7ff ffea 	bl	80032f8 <SystemInit>
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <LoopFillZerobss+0x12>)
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <LoopFillZerobss+0x16>)
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <LoopFillZerobss+0x1a>)
 800332a:	2300      	movs	r3, #0
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:
 800332e:	58d4      	ldr	r4, [r2, r3]
 8003330:	50c4      	str	r4, [r0, r3]
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:
 8003334:	18c4      	adds	r4, r0, r3
 8003336:	428c      	cmp	r4, r1
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <LoopFillZerobss+0x1e>)
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <LoopFillZerobss+0x22>)
 800333e:	2300      	movs	r3, #0
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:
 8003346:	42a2      	cmp	r2, r4
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>
 800334a:	f005 fb23 	bl	8008994 <__libc_init_array>
 800334e:	f7fd fdf5 	bl	8000f3c <main>
 8003352:	4770      	bx	lr
 8003354:	20020000 	.word	0x20020000
 8003358:	20000000 	.word	0x20000000
 800335c:	20000078 	.word	0x20000078
 8003360:	08009e48 	.word	0x08009e48
 8003364:	20000078 	.word	0x20000078
 8003368:	20004e10 	.word	0x20004e10

0800336c <ADC_IRQHandler>:
 800336c:	e7fe      	b.n	800336c <ADC_IRQHandler>
	...

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_Init+0x40>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <HAL_Init+0x40>)
 800337a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_Init+0x40>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <HAL_Init+0x40>)
 8003386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_Init+0x40>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_Init+0x40>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003398:	2003      	movs	r0, #3
 800339a:	f000 f8d8 	bl	800354e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800339e:	200f      	movs	r0, #15
 80033a0:	f7ff ff0e 	bl	80031c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a4:	f7ff fd72 	bl	8002e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00

080033b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_IncTick+0x20>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_IncTick+0x24>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_IncTick+0x24>)
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	200002cc 	.word	0x200002cc

080033dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return uwTick;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_GetTick+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	200002cc 	.word	0x200002cc

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff4c 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003576:	f7ff ff61 	bl	800343c <__NVIC_GetPriorityGrouping>
 800357a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	6978      	ldr	r0, [r7, #20]
 8003582:	f7ff ffb1 	bl	80034e8 <NVIC_EncodePriority>
 8003586:	4602      	mov	r2, r0
 8003588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff80 	bl	8003494 <__NVIC_SetPriority>
}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff54 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e165      	b.n	80038a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d4:	2201      	movs	r2, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	f040 8154 	bne.w	800389a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d005      	beq.n	800360a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003606:	2b02      	cmp	r3, #2
 8003608:	d130      	bne.n	800366c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	2203      	movs	r2, #3
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 0201 	and.w	r2, r3, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b03      	cmp	r3, #3
 8003676:	d017      	beq.n	80036a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d123      	bne.n	80036fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	08da      	lsrs	r2, r3, #3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3208      	adds	r2, #8
 80036bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3208      	adds	r2, #8
 80036f6:	69b9      	ldr	r1, [r7, #24]
 80036f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0203 	and.w	r2, r3, #3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80ae 	beq.w	800389a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_GPIO_Init+0x300>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <HAL_GPIO_Init+0x300>)
 8003748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b5a      	ldr	r3, [pc, #360]	; (80038b8 <HAL_GPIO_Init+0x300>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375a:	4a58      	ldr	r2, [pc, #352]	; (80038bc <HAL_GPIO_Init+0x304>)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4f      	ldr	r2, [pc, #316]	; (80038c0 <HAL_GPIO_Init+0x308>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d025      	beq.n	80037d2 <HAL_GPIO_Init+0x21a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4e      	ldr	r2, [pc, #312]	; (80038c4 <HAL_GPIO_Init+0x30c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <HAL_GPIO_Init+0x216>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4d      	ldr	r2, [pc, #308]	; (80038c8 <HAL_GPIO_Init+0x310>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d019      	beq.n	80037ca <HAL_GPIO_Init+0x212>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4c      	ldr	r2, [pc, #304]	; (80038cc <HAL_GPIO_Init+0x314>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_GPIO_Init+0x20e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_GPIO_Init+0x318>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_GPIO_Init+0x20a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4a      	ldr	r2, [pc, #296]	; (80038d4 <HAL_GPIO_Init+0x31c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <HAL_GPIO_Init+0x206>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_GPIO_Init+0x320>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_GPIO_Init+0x202>
 80037b6:	2306      	movs	r3, #6
 80037b8:	e00c      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037ba:	2307      	movs	r3, #7
 80037bc:	e00a      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037be:	2305      	movs	r3, #5
 80037c0:	e008      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037c2:	2304      	movs	r3, #4
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037c6:	2303      	movs	r3, #3
 80037c8:	e004      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e002      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_GPIO_Init+0x21c>
 80037d2:	2300      	movs	r3, #0
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f002 0203 	and.w	r2, r2, #3
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	4093      	lsls	r3, r2
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e4:	4935      	ldr	r1, [pc, #212]	; (80038bc <HAL_GPIO_Init+0x304>)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3302      	adds	r3, #2
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f2:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_GPIO_Init+0x324>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003816:	4a31      	ldr	r2, [pc, #196]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800381c:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <HAL_GPIO_Init+0x324>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003846:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386a:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <HAL_GPIO_Init+0x324>)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003894:	4a11      	ldr	r2, [pc, #68]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3301      	adds	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	f67f ae96 	bls.w	80035d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40020000 	.word	0x40020000
 80038c4:	40020400 	.word	0x40020400
 80038c8:	40020800 	.word	0x40020800
 80038cc:	40020c00 	.word	0x40020c00
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40021400 	.word	0x40021400
 80038d8:	40021800 	.word	0x40021800
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	041a      	lsls	r2, r3, #16
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43d9      	mvns	r1, r3
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	400b      	ands	r3, r1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	619a      	str	r2, [r3, #24]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cc      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90c      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b65      	ldr	r3, [pc, #404]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e067      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4934      	ldr	r1, [pc, #208]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7ff fcb8 	bl	80033dc <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7ff fcb4 	bl	80033dc <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20c      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f887 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fb4e 	bl	80031c0 <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08009dac 	.word	0x08009dac
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	20000008 	.word	0x20000008

08003b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000004 	.word	0x20000004

08003b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b60:	f7ff fff0 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0a9b      	lsrs	r3, r3, #10
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	08009dbc 	.word	0x08009dbc

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b88:	f7ff ffdc 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0b5b      	lsrs	r3, r3, #13
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08009dbc 	.word	0x08009dbc

08003bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	220f      	movs	r2, #15
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_RCC_GetClockConfig+0x60>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40023c00 	.word	0x40023c00

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b0ae      	sub	sp, #184	; 0xb8
 8003c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c36:	4bcb      	ldr	r3, [pc, #812]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	f200 8206 	bhi.w	8004050 <HAL_RCC_GetSysClockFreq+0x440>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08004051 	.word	0x08004051
 8003c54:	08004051 	.word	0x08004051
 8003c58:	08004051 	.word	0x08004051
 8003c5c:	08003c89 	.word	0x08003c89
 8003c60:	08004051 	.word	0x08004051
 8003c64:	08004051 	.word	0x08004051
 8003c68:	08004051 	.word	0x08004051
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08004051 	.word	0x08004051
 8003c74:	08004051 	.word	0x08004051
 8003c78:	08004051 	.word	0x08004051
 8003c7c:	08003e81 	.word	0x08003e81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4bb9      	ldr	r3, [pc, #740]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c86:	e1e7      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4bb8      	ldr	r3, [pc, #736]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c8e:	e1e3      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c90:	4bb4      	ldr	r3, [pc, #720]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9c:	4bb1      	ldr	r3, [pc, #708]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d071      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca8:	4bae      	ldr	r3, [pc, #696]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cce:	4622      	mov	r2, r4
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	0159      	lsls	r1, r3, #5
 8003cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce0:	0150      	lsls	r0, r2, #5
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	1a51      	subs	r1, r2, r1
 8003cea:	6439      	str	r1, [r7, #64]	; 0x40
 8003cec:	4629      	mov	r1, r5
 8003cee:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d00:	4649      	mov	r1, r9
 8003d02:	018b      	lsls	r3, r1, #6
 8003d04:	4641      	mov	r1, r8
 8003d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	018a      	lsls	r2, r1, #6
 8003d0e:	4641      	mov	r1, r8
 8003d10:	1a51      	subs	r1, r2, r1
 8003d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d14:	4649      	mov	r1, r9
 8003d16:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d28:	4649      	mov	r1, r9
 8003d2a:	00cb      	lsls	r3, r1, #3
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d32:	4641      	mov	r1, r8
 8003d34:	00ca      	lsls	r2, r1, #3
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
 8003d42:	462b      	mov	r3, r5
 8003d44:	460a      	mov	r2, r1
 8003d46:	eb42 0303 	adc.w	r3, r2, r3
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d58:	4629      	mov	r1, r5
 8003d5a:	024b      	lsls	r3, r1, #9
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d62:	4621      	mov	r1, r4
 8003d64:	024a      	lsls	r2, r1, #9
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d7c:	f7fc ff04 	bl	8000b88 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8a:	e067      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003da6:	2300      	movs	r3, #0
 8003da8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003daa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003de0:	4649      	mov	r1, r9
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dea:	4641      	mov	r1, r8
 8003dec:	018a      	lsls	r2, r1, #6
 8003dee:	4641      	mov	r1, r8
 8003df0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003df4:	4649      	mov	r1, r9
 8003df6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0e:	4692      	mov	sl, r2
 8003e10:	469b      	mov	fp, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb1a 0303 	adds.w	r3, sl, r3
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	028b      	lsls	r3, r1, #10
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e38:	4621      	mov	r1, r4
 8003e3a:	028a      	lsls	r2, r1, #10
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e44:	2200      	movs	r2, #0
 8003e46:	673b      	str	r3, [r7, #112]	; 0x70
 8003e48:	677a      	str	r2, [r7, #116]	; 0x74
 8003e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e4e:	f7fc fe9b 	bl	8000b88 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4613      	mov	r3, r2
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	3301      	adds	r3, #1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e7e:	e0eb      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8c:	4b35      	ldr	r3, [pc, #212]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d06b      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003eac:	2300      	movs	r3, #0
 8003eae:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	f04f 0000 	mov.w	r0, #0
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	0159      	lsls	r1, r3, #5
 8003ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec6:	0150      	lsls	r0, r2, #5
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4621      	mov	r1, r4
 8003ece:	1a51      	subs	r1, r2, r1
 8003ed0:	61b9      	str	r1, [r7, #24]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	018b      	lsls	r3, r1, #6
 8003eea:	4651      	mov	r1, sl
 8003eec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	018a      	lsls	r2, r1, #6
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ebb2 0801 	subs.w	r8, r2, r1
 8003efa:	4659      	mov	r1, fp
 8003efc:	eb63 0901 	sbc.w	r9, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f14:	4690      	mov	r8, r2
 8003f16:	4699      	mov	r9, r3
 8003f18:	4623      	mov	r3, r4
 8003f1a:	eb18 0303 	adds.w	r3, r8, r3
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	462b      	mov	r3, r5
 8003f22:	eb49 0303 	adc.w	r3, r9, r3
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f34:	4629      	mov	r1, r5
 8003f36:	024b      	lsls	r3, r1, #9
 8003f38:	4621      	mov	r1, r4
 8003f3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f3e:	4621      	mov	r1, r4
 8003f40:	024a      	lsls	r2, r1, #9
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f54:	f7fc fe18 	bl	8000b88 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f62:	e065      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x420>
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f70:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	2200      	movs	r2, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
 8003f82:	2300      	movs	r3, #0
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
 8003f86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	f04f 0000 	mov.w	r0, #0
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	0159      	lsls	r1, r3, #5
 8003f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9c:	0150      	lsls	r0, r2, #5
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	1a51      	subs	r1, r2, r1
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	4649      	mov	r1, r9
 8003faa:	eb63 0301 	sbc.w	r3, r3, r1
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	018b      	lsls	r3, r1, #6
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	018a      	lsls	r2, r1, #6
 8003fca:	4651      	mov	r1, sl
 8003fcc:	1a54      	subs	r4, r2, r1
 8003fce:	4659      	mov	r1, fp
 8003fd0:	eb63 0501 	sbc.w	r5, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	464b      	mov	r3, r9
 8003ff0:	eb45 0303 	adc.w	r3, r5, r3
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004002:	4629      	mov	r1, r5
 8004004:	028b      	lsls	r3, r1, #10
 8004006:	4621      	mov	r1, r4
 8004008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800400c:	4621      	mov	r1, r4
 800400e:	028a      	lsls	r2, r1, #10
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004018:	2200      	movs	r2, #0
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
 800401c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800401e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004022:	f7fc fdb1 	bl	8000b88 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4613      	mov	r3, r2
 800402c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_GetSysClockFreq+0x458>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0f1b      	lsrs	r3, r3, #28
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800404e:	e003      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800405c:	4618      	mov	r0, r3
 800405e:	37b8      	adds	r7, #184	; 0xb8
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400

08004070 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e28d      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8083 	beq.w	8004196 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004090:	4b94      	ldr	r3, [pc, #592]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b04      	cmp	r3, #4
 800409a:	d019      	beq.n	80040d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800409c:	4b91      	ldr	r3, [pc, #580]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a8:	4b8e      	ldr	r3, [pc, #568]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d00c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b8b      	ldr	r3, [pc, #556]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d112      	bne.n	80040e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b84      	ldr	r3, [pc, #528]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05b      	beq.n	8004194 <HAL_RCC_OscConfig+0x124>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d157      	bne.n	8004194 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e25a      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x90>
 80040f2:	4b7c      	ldr	r3, [pc, #496]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7b      	ldr	r2, [pc, #492]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0xcc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0xb4>
 800410a:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a75      	ldr	r2, [pc, #468]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a72      	ldr	r2, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0xcc>
 8004124:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a6e      	ldr	r2, [pc, #440]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6b      	ldr	r2, [pc, #428]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7ff f94a 	bl	80033dc <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414c:	f7ff f946 	bl	80033dc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e21f      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0xdc>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7ff f936 	bl	80033dc <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004174:	f7ff f932 	bl	80033dc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e20b      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x104>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d06f      	beq.n	8004282 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041a2:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d017      	beq.n	80041de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ae:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d105      	bne.n	80041c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ba:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x186>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1d3      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4937      	ldr	r1, [pc, #220]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <HAL_RCC_OscConfig+0x278>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7ff f8df 	bl	80033dc <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004222:	f7ff f8db 	bl	80033dc <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1b4      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4925      	ldr	r1, [pc, #148]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_OscConfig+0x278>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7ff f8be 	bl	80033dc <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004264:	f7ff f8ba 	bl	80033dc <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e193      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_RCC_OscConfig+0x27c>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7ff f89e 	bl	80033dc <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a4:	f7ff f89a 	bl	80033dc <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e173      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x274>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x234>
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_OscConfig+0x27c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7ff f887 	bl	80033dc <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	e00e      	b.n	80042f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d2:	f7ff f883 	bl	80033dc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d907      	bls.n	80042f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e15c      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470000 	.word	0x42470000
 80042ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b8a      	ldr	r3, [pc, #552]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ea      	bne.n	80042d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8097 	beq.w	8004438 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b83      	ldr	r3, [pc, #524]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a7e      	ldr	r2, [pc, #504]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b7c      	ldr	r3, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b79      	ldr	r3, [pc, #484]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7ff f843 	bl	80033dc <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7ff f83f 	bl	80033dc <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e118      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x4b0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x31e>
 8004380:	4b66      	ldr	r3, [pc, #408]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a65      	ldr	r2, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e01c      	b.n	80043c8 <HAL_RCC_OscConfig+0x358>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x340>
 8004396:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a60      	ldr	r2, [pc, #384]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x358>
 80043b0:	4b5a      	ldr	r3, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	4a59      	ldr	r2, [pc, #356]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70
 80043bc:	4b57      	ldr	r3, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a56      	ldr	r2, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7ff f804 	bl	80033dc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7ff f800 	bl	80033dc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0d7      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RCC_OscConfig+0x368>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fe ffee 	bl	80033dc <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fe ffea 	bl	80033dc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0c1      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ee      	bne.n	8004404 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80ad 	beq.w	800459c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d060      	beq.n	8004510 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d145      	bne.n	80044e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x4b4>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe ffbe 	bl	80033dc <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004464:	f7fe ffba 	bl	80033dc <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e093      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	071b      	lsls	r3, r3, #28
 80044ae:	491b      	ldr	r1, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x4b4>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fe ff8f 	bl	80033dc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fe ff8b 	bl	80033dc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e064      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x452>
 80044e0:	e05c      	b.n	800459c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x4b4>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fe ff78 	bl	80033dc <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fe ff74 	bl	80033dc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e04d      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x4ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x480>
 800450e:	e045      	b.n	800459c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e040      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
 800451c:	40023800 	.word	0x40023800
 8004520:	40007000 	.word	0x40007000
 8004524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <HAL_RCC_OscConfig+0x538>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d030      	beq.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d129      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d122      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	4293      	cmp	r3, r2
 8004562:	d119      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	3b01      	subs	r3, #1
 8004572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d10f      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d107      	bne.n	8004598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e041      	b.n	8004642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fe fc86 	bl	8002ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 fcca 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e046      	b.n	80046f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a23      	ldr	r2, [pc, #140]	; (8004700 <HAL_TIM_Base_Start+0xb4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d01d      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <HAL_TIM_Base_Start+0xb8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <HAL_TIM_Base_Start+0xbc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_TIM_Base_Start+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <HAL_TIM_Base_Start+0xc4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a19      	ldr	r2, [pc, #100]	; (8004714 <HAL_TIM_Base_Start+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_TIM_Base_Start+0x70>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	; (8004718 <HAL_TIM_Base_Start+0xcc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d111      	bne.n	80046e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d010      	beq.n	80046f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	e007      	b.n	80046f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40010400 	.word	0x40010400
 8004714:	40014000 	.word	0x40014000
 8004718:	40001800 	.word	0x40001800

0800471c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e04e      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d01d      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_TIM_Base_Start_IT+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d010      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	e007      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40001800 	.word	0x40001800

080047fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e041      	b.n	8004892 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f839 	bl	800489a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fba2 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start+0x24>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e022      	b.n	800491a <HAL_TIM_PWM_Start+0x6a>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d109      	bne.n	80048ee <HAL_TIM_PWM_Start+0x3e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e015      	b.n	800491a <HAL_TIM_PWM_Start+0x6a>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start+0x58>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e008      	b.n	800491a <HAL_TIM_PWM_Start+0x6a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07c      	b.n	8004a1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start+0x82>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	e013      	b.n	800495a <HAL_TIM_PWM_Start+0xaa>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0x92>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004940:	e00b      	b.n	800495a <HAL_TIM_PWM_Start+0xaa>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Start+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	e003      	b.n	800495a <HAL_TIM_PWM_Start+0xaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fe04 	bl	8005570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <HAL_TIM_PWM_Start+0x174>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_TIM_PWM_Start+0xcc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2c      	ldr	r2, [pc, #176]	; (8004a28 <HAL_TIM_PWM_Start+0x178>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_TIM_PWM_Start+0xd0>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_TIM_PWM_Start+0xd2>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_TIM_PWM_Start+0x174>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d022      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d01d      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <HAL_TIM_PWM_Start+0x17c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <HAL_TIM_PWM_Start+0x180>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_TIM_PWM_Start+0x184>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <HAL_TIM_PWM_Start+0x178>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <HAL_TIM_PWM_Start+0x188>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x136>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <HAL_TIM_PWM_Start+0x18c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d111      	bne.n	8004a0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d010      	beq.n	8004a1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a08:	e007      	b.n	8004a1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40001800 	.word	0x40001800

08004a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0202 	mvn.w	r2, #2
 8004a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa5b 	bl	8004f46 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa4d 	bl	8004f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa5e 	bl	8004f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0204 	mvn.w	r2, #4
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa35 	bl	8004f46 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa27 	bl	8004f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fa38 	bl	8004f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d020      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0208 	mvn.w	r2, #8
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa0f 	bl	8004f46 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa01 	bl	8004f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa12 	bl	8004f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0210 	mvn.w	r2, #16
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9e9 	bl	8004f46 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9db 	bl	8004f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f9ec 	bl	8004f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0201 	mvn.w	r2, #1
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd f938 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fdce 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9bd 	bl	8004f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0220 	mvn.w	r2, #32
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fda0 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0ae      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	f200 809f 	bhi.w	8004d8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004d8d 	.word	0x08004d8d
 8004c5c:	08004d8d 	.word	0x08004d8d
 8004c60:	08004d8d 	.word	0x08004d8d
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004d8d 	.word	0x08004d8d
 8004c6c:	08004d8d 	.word	0x08004d8d
 8004c70:	08004d8d 	.word	0x08004d8d
 8004c74:	08004d0b 	.word	0x08004d0b
 8004c78:	08004d8d 	.word	0x08004d8d
 8004c7c:	08004d8d 	.word	0x08004d8d
 8004c80:	08004d8d 	.word	0x08004d8d
 8004c84:	08004d4b 	.word	0x08004d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fa24 	bl	80050dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0204 	bic.w	r2, r2, #4
 8004cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6999      	ldr	r1, [r3, #24]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	619a      	str	r2, [r3, #24]
      break;
 8004cc6:	e064      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fa74 	bl	80051bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
      break;
 8004d08:	e043      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fac9 	bl	80052a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0208 	orr.w	r2, r2, #8
 8004d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0204 	bic.w	r2, r2, #4
 8004d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69d9      	ldr	r1, [r3, #28]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	61da      	str	r2, [r3, #28]
      break;
 8004d48:	e023      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fb1d 	bl	8005390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69d9      	ldr	r1, [r3, #28]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	021a      	lsls	r2, r3, #8
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	61da      	str	r2, [r3, #28]
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0b4      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x186>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df8:	d03e      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0xd4>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	f200 8087 	bhi.w	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e06:	f000 8086 	beq.w	8004f16 <HAL_TIM_ConfigClockSource+0x172>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d87f      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b70      	cmp	r3, #112	; 0x70
 8004e12:	d01a      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0xa6>
 8004e14:	2b70      	cmp	r3, #112	; 0x70
 8004e16:	d87b      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b60      	cmp	r3, #96	; 0x60
 8004e1a:	d050      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x11a>
 8004e1c:	2b60      	cmp	r3, #96	; 0x60
 8004e1e:	d877      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b50      	cmp	r3, #80	; 0x50
 8004e22:	d03c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0xfa>
 8004e24:	2b50      	cmp	r3, #80	; 0x50
 8004e26:	d873      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	d058      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x13a>
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d86f      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b30      	cmp	r3, #48	; 0x30
 8004e32:	d064      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e34:	2b30      	cmp	r3, #48	; 0x30
 8004e36:	d86b      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d060      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d867      	bhi.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d05c      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d05a      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	e062      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5a:	f000 fb69 	bl	8005530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	609a      	str	r2, [r3, #8]
      break;
 8004e76:	e04f      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	f000 fb52 	bl	8005530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e9a:	609a      	str	r2, [r3, #8]
      break;
 8004e9c:	e03c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 fac6 	bl	800543c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2150      	movs	r1, #80	; 0x50
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fb1f 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e02c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fae5 	bl	800549a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2160      	movs	r1, #96	; 0x60
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb0f 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004edc:	e01c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 faa6 	bl	800543c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2140      	movs	r1, #64	; 0x40
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 faff 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004efc:	e00c      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 faf6 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e003      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
      break;
 8004f14:	e000      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a46      	ldr	r2, [pc, #280]	; (80050b0 <TIM_Base_SetConfig+0x12c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d00f      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a43      	ldr	r2, [pc, #268]	; (80050b4 <TIM_Base_SetConfig+0x130>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a42      	ldr	r2, [pc, #264]	; (80050b8 <TIM_Base_SetConfig+0x134>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a41      	ldr	r2, [pc, #260]	; (80050bc <TIM_Base_SetConfig+0x138>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a40      	ldr	r2, [pc, #256]	; (80050c0 <TIM_Base_SetConfig+0x13c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a35      	ldr	r2, [pc, #212]	; (80050b0 <TIM_Base_SetConfig+0x12c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d02b      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d027      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a32      	ldr	r2, [pc, #200]	; (80050b4 <TIM_Base_SetConfig+0x130>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d023      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a31      	ldr	r2, [pc, #196]	; (80050b8 <TIM_Base_SetConfig+0x134>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01f      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <TIM_Base_SetConfig+0x138>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01b      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <TIM_Base_SetConfig+0x13c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d017      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2e      	ldr	r2, [pc, #184]	; (80050c4 <TIM_Base_SetConfig+0x140>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2d      	ldr	r2, [pc, #180]	; (80050c8 <TIM_Base_SetConfig+0x144>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00f      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <TIM_Base_SetConfig+0x148>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00b      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2b      	ldr	r2, [pc, #172]	; (80050d0 <TIM_Base_SetConfig+0x14c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d007      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <TIM_Base_SetConfig+0x150>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <TIM_Base_SetConfig+0x154>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d108      	bne.n	8005048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <TIM_Base_SetConfig+0x12c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_Base_SetConfig+0xf8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <TIM_Base_SetConfig+0x13c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d103      	bne.n	8005084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d105      	bne.n	80050a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f023 0201 	bic.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	611a      	str	r2, [r3, #16]
  }
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800
 80050d0:	40001800 	.word	0x40001800
 80050d4:	40001c00 	.word	0x40001c00
 80050d8:	40002000 	.word	0x40002000

080050dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 0201 	bic.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0302 	bic.w	r3, r3, #2
 8005124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <TIM_OC1_SetConfig+0xd8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC1_SetConfig+0x64>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <TIM_OC1_SetConfig+0xdc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10c      	bne.n	800515a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0308 	bic.w	r3, r3, #8
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <TIM_OC1_SetConfig+0xd8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC1_SetConfig+0x8e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <TIM_OC1_SetConfig+0xdc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40010400 	.word	0x40010400

080051bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 0210 	bic.w	r2, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0320 	bic.w	r3, r3, #32
 8005206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <TIM_OC2_SetConfig+0xe4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC2_SetConfig+0x68>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <TIM_OC2_SetConfig+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10d      	bne.n	8005240 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <TIM_OC2_SetConfig+0xe4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_OC2_SetConfig+0x94>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <TIM_OC2_SetConfig+0xe8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d113      	bne.n	8005278 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40010400 	.word	0x40010400

080052a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a21      	ldr	r2, [pc, #132]	; (8005388 <TIM_OC3_SetConfig+0xe0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC3_SetConfig+0x66>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <TIM_OC3_SetConfig+0xe4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10d      	bne.n	800532a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a16      	ldr	r2, [pc, #88]	; (8005388 <TIM_OC3_SetConfig+0xe0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC3_SetConfig+0x92>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <TIM_OC3_SetConfig+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d113      	bne.n	8005362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40010000 	.word	0x40010000
 800538c:	40010400 	.word	0x40010400

08005390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	031b      	lsls	r3, r3, #12
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <TIM_OC4_SetConfig+0xa4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_OC4_SetConfig+0x68>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a11      	ldr	r2, [pc, #68]	; (8005438 <TIM_OC4_SetConfig+0xa8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d109      	bne.n	800540c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40010400 	.word	0x40010400

0800543c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0201 	bic.w	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 030a 	bic.w	r3, r3, #10
 8005478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f023 0210 	bic.w	r2, r3, #16
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	031b      	lsls	r3, r3, #12
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	f043 0307 	orr.w	r3, r3, #7
 800551c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	021a      	lsls	r2, r3, #8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	431a      	orrs	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2201      	movs	r2, #1
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	43db      	mvns	r3, r3
 8005592:	401a      	ands	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	fa01 f303 	lsl.w	r3, r1, r3
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e05a      	b.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a21      	ldr	r2, [pc, #132]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d022      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d01d      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1d      	ldr	r2, [pc, #116]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d018      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a17      	ldr	r2, [pc, #92]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10c      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	4313      	orrs	r3, r2
 800566e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010400 	.word	0x40010400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40001800 	.word	0x40001800

080056b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e03d      	b.n	800574c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e042      	b.n	8005818 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fd fcc2 	bl	8003130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	; 0x24
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f82b 	bl	8005820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005824:	b0c0      	sub	sp, #256	; 0x100
 8005826:	af00      	add	r7, sp, #0
 8005828:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	68d9      	ldr	r1, [r3, #12]
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	ea40 0301 	orr.w	r3, r0, r1
 8005848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	431a      	orrs	r2, r3
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005878:	f021 010c 	bic.w	r1, r1, #12
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005886:	430b      	orrs	r3, r1
 8005888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	6999      	ldr	r1, [r3, #24]
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	ea40 0301 	orr.w	r3, r0, r1
 80058a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b8f      	ldr	r3, [pc, #572]	; (8005aec <UART_SetConfig+0x2cc>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d005      	beq.n	80058c0 <UART_SetConfig+0xa0>
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b8d      	ldr	r3, [pc, #564]	; (8005af0 <UART_SetConfig+0x2d0>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d104      	bne.n	80058ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c0:	f7fe f960 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80058c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058c8:	e003      	b.n	80058d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ca:	f7fe f947 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80058ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058dc:	f040 810c 	bne.w	8005af8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80058fa:	415b      	adcs	r3, r3
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005902:	4621      	mov	r1, r4
 8005904:	eb12 0801 	adds.w	r8, r2, r1
 8005908:	4629      	mov	r1, r5
 800590a:	eb43 0901 	adc.w	r9, r3, r1
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800591a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800591e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005922:	4690      	mov	r8, r2
 8005924:	4699      	mov	r9, r3
 8005926:	4623      	mov	r3, r4
 8005928:	eb18 0303 	adds.w	r3, r8, r3
 800592c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005930:	462b      	mov	r3, r5
 8005932:	eb49 0303 	adc.w	r3, r9, r3
 8005936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005946:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800594a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800594e:	460b      	mov	r3, r1
 8005950:	18db      	adds	r3, r3, r3
 8005952:	653b      	str	r3, [r7, #80]	; 0x50
 8005954:	4613      	mov	r3, r2
 8005956:	eb42 0303 	adc.w	r3, r2, r3
 800595a:	657b      	str	r3, [r7, #84]	; 0x54
 800595c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005960:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005964:	f7fb f910 	bl	8000b88 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <UART_SetConfig+0x2d4>)
 800596e:	fba3 2302 	umull	r2, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	011c      	lsls	r4, r3, #4
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005980:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005984:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005988:	4642      	mov	r2, r8
 800598a:	464b      	mov	r3, r9
 800598c:	1891      	adds	r1, r2, r2
 800598e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005990:	415b      	adcs	r3, r3
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005998:	4641      	mov	r1, r8
 800599a:	eb12 0a01 	adds.w	sl, r2, r1
 800599e:	4649      	mov	r1, r9
 80059a0:	eb43 0b01 	adc.w	fp, r3, r1
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b8:	4692      	mov	sl, r2
 80059ba:	469b      	mov	fp, r3
 80059bc:	4643      	mov	r3, r8
 80059be:	eb1a 0303 	adds.w	r3, sl, r3
 80059c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059c6:	464b      	mov	r3, r9
 80059c8:	eb4b 0303 	adc.w	r3, fp, r3
 80059cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059e4:	460b      	mov	r3, r1
 80059e6:	18db      	adds	r3, r3, r3
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ea:	4613      	mov	r3, r2
 80059ec:	eb42 0303 	adc.w	r3, r2, r3
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
 80059f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059fa:	f7fb f8c5 	bl	8000b88 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005a06:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2264      	movs	r2, #100	; 0x64
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a28:	441c      	add	r4, r3
 8005a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	1891      	adds	r1, r2, r2
 8005a42:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a44:	415b      	adcs	r3, r3
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	1851      	adds	r1, r2, r1
 8005a50:	6339      	str	r1, [r7, #48]	; 0x30
 8005a52:	4649      	mov	r1, r9
 8005a54:	414b      	adcs	r3, r1
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a64:	4659      	mov	r1, fp
 8005a66:	00cb      	lsls	r3, r1, #3
 8005a68:	4651      	mov	r1, sl
 8005a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6e:	4651      	mov	r1, sl
 8005a70:	00ca      	lsls	r2, r1, #3
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	4642      	mov	r2, r8
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a80:	464b      	mov	r3, r9
 8005a82:	460a      	mov	r2, r1
 8005a84:	eb42 0303 	adc.w	r3, r2, r3
 8005a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	18db      	adds	r3, r3, r3
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ab6:	f7fb f867 	bl	8000b88 <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	2164      	movs	r1, #100	; 0x64
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3332      	adds	r3, #50	; 0x32
 8005ad2:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	f003 0207 	and.w	r2, r3, #7
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4422      	add	r2, r4
 8005ae6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae8:	e106      	b.n	8005cf8 <UART_SetConfig+0x4d8>
 8005aea:	bf00      	nop
 8005aec:	40011000 	.word	0x40011000
 8005af0:	40011400 	.word	0x40011400
 8005af4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	1891      	adds	r1, r2, r2
 8005b10:	6239      	str	r1, [r7, #32]
 8005b12:	415b      	adcs	r3, r3
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	1854      	adds	r4, r2, r1
 8005b1e:	4649      	mov	r1, r9
 8005b20:	eb43 0501 	adc.w	r5, r3, r1
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	00eb      	lsls	r3, r5, #3
 8005b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b32:	00e2      	lsls	r2, r4, #3
 8005b34:	4614      	mov	r4, r2
 8005b36:	461d      	mov	r5, r3
 8005b38:	4643      	mov	r3, r8
 8005b3a:	18e3      	adds	r3, r4, r3
 8005b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b40:	464b      	mov	r3, r9
 8005b42:	eb45 0303 	adc.w	r3, r5, r3
 8005b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b66:	4629      	mov	r1, r5
 8005b68:	008b      	lsls	r3, r1, #2
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b70:	4621      	mov	r1, r4
 8005b72:	008a      	lsls	r2, r1, #2
 8005b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b78:	f7fb f806 	bl	8000b88 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b60      	ldr	r3, [pc, #384]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 2302 	umull	r2, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	011c      	lsls	r4, r3, #4
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	61b9      	str	r1, [r7, #24]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bac:	4641      	mov	r1, r8
 8005bae:	1851      	adds	r1, r2, r1
 8005bb0:	6139      	str	r1, [r7, #16]
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	414b      	adcs	r3, r1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	00cb      	lsls	r3, r1, #3
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bce:	4651      	mov	r1, sl
 8005bd0:	00ca      	lsls	r2, r1, #3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4642      	mov	r2, r8
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005be0:	464b      	mov	r3, r9
 8005be2:	460a      	mov	r2, r1
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c04:	4649      	mov	r1, r9
 8005c06:	008b      	lsls	r3, r1, #2
 8005c08:	4641      	mov	r1, r8
 8005c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c0e:	4641      	mov	r1, r8
 8005c10:	008a      	lsls	r2, r1, #2
 8005c12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c16:	f7fa ffb7 	bl	8000b88 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4b38      	ldr	r3, [pc, #224]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005c22:	fba3 2301 	umull	r2, r3, r3, r1
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2264      	movs	r2, #100	; 0x64
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	1acb      	subs	r3, r1, r3
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	3332      	adds	r3, #50	; 0x32
 8005c34:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c40:	441c      	add	r4, r3
 8005c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c46:	2200      	movs	r2, #0
 8005c48:	673b      	str	r3, [r7, #112]	; 0x70
 8005c4a:	677a      	str	r2, [r7, #116]	; 0x74
 8005c4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	1891      	adds	r1, r2, r2
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	415b      	adcs	r3, r3
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c60:	4641      	mov	r1, r8
 8005c62:	1851      	adds	r1, r2, r1
 8005c64:	6039      	str	r1, [r7, #0]
 8005c66:	4649      	mov	r1, r9
 8005c68:	414b      	adcs	r3, r1
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c78:	4659      	mov	r1, fp
 8005c7a:	00cb      	lsls	r3, r1, #3
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c82:	4651      	mov	r1, sl
 8005c84:	00ca      	lsls	r2, r1, #3
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c92:	464b      	mov	r3, r9
 8005c94:	460a      	mov	r2, r1
 8005c96:	eb42 0303 	adc.w	r3, r2, r3
 8005c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca6:	667a      	str	r2, [r7, #100]	; 0x64
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	008b      	lsls	r3, r1, #2
 8005cb8:	4641      	mov	r1, r8
 8005cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	008a      	lsls	r2, r1, #2
 8005cc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cc6:	f7fa ff5f 	bl	8000b88 <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	; 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	3332      	adds	r3, #50	; 0x32
 8005ce2:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 020f 	and.w	r2, r3, #15
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4422      	add	r2, r4
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d04:	51eb851f 	.word	0x51eb851f

08005d08 <__NVIC_SetPriority>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db0a      	blt.n	8005d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	490c      	ldr	r1, [pc, #48]	; (8005d54 <__NVIC_SetPriority+0x4c>)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	0112      	lsls	r2, r2, #4
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d30:	e00a      	b.n	8005d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4908      	ldr	r1, [pc, #32]	; (8005d58 <__NVIC_SetPriority+0x50>)
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	0112      	lsls	r2, r2, #4
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	440b      	add	r3, r1
 8005d46:	761a      	strb	r2, [r3, #24]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000e100 	.word	0xe000e100
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <SysTick_Handler+0x1c>)
 8005d62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d64:	f001 fd4c 	bl	8007800 <xTaskGetSchedulerState>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d6e:	f002 fb33 	bl	80083d8 <xPortSysTickHandler>
  }
}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	e000e010 	.word	0xe000e010

08005d7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d80:	2100      	movs	r1, #0
 8005d82:	f06f 0004 	mvn.w	r0, #4
 8005d86:	f7ff ffbf 	bl	8005d08 <__NVIC_SetPriority>
#endif
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d96:	f3ef 8305 	mrs	r3, IPSR
 8005d9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005da2:	f06f 0305 	mvn.w	r3, #5
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e00c      	b.n	8005dc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <osKernelInitialize+0x44>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d105      	bne.n	8005dbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <osKernelInitialize+0x44>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	e002      	b.n	8005dc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dc4:	687b      	ldr	r3, [r7, #4]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	200002d0 	.word	0x200002d0

08005dd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dde:	f3ef 8305 	mrs	r3, IPSR
 8005de2:	603b      	str	r3, [r7, #0]
  return(result);
 8005de4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dea:	f06f 0305 	mvn.w	r3, #5
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	e010      	b.n	8005e14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <osKernelStart+0x48>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d109      	bne.n	8005e0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dfa:	f7ff ffbf 	bl	8005d7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <osKernelStart+0x48>)
 8005e00:	2202      	movs	r2, #2
 8005e02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e04:	f001 f882 	bl	8006f0c <vTaskStartScheduler>
      stat = osOK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	e002      	b.n	8005e14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e14:	687b      	ldr	r3, [r7, #4]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200002d0 	.word	0x200002d0

08005e24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08e      	sub	sp, #56	; 0x38
 8005e28:	af04      	add	r7, sp, #16
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e34:	f3ef 8305 	mrs	r3, IPSR
 8005e38:	617b      	str	r3, [r7, #20]
  return(result);
 8005e3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d17e      	bne.n	8005f3e <osThreadNew+0x11a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d07b      	beq.n	8005f3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e4a:	2318      	movs	r3, #24
 8005e4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e52:	f04f 33ff 	mov.w	r3, #4294967295
 8005e56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d045      	beq.n	8005eea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <osThreadNew+0x48>
        name = attr->name;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <osThreadNew+0x6e>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b38      	cmp	r3, #56	; 0x38
 8005e84:	d805      	bhi.n	8005e92 <osThreadNew+0x6e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <osThreadNew+0x72>
        return (NULL);
 8005e92:	2300      	movs	r3, #0
 8005e94:	e054      	b.n	8005f40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <osThreadNew+0xa8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2baf      	cmp	r3, #175	; 0xaf
 8005eb4:	d90a      	bls.n	8005ecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <osThreadNew+0xa8>
        mem = 1;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e010      	b.n	8005eee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10c      	bne.n	8005eee <osThreadNew+0xca>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <osThreadNew+0xca>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <osThreadNew+0xca>
          mem = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	e001      	b.n	8005eee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d110      	bne.n	8005f16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005efc:	9202      	str	r2, [sp, #8]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6a3a      	ldr	r2, [r7, #32]
 8005f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fe0c 	bl	8006b28 <xTaskCreateStatic>
 8005f10:	4603      	mov	r3, r0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e013      	b.n	8005f3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f107 0310 	add.w	r3, r7, #16
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fe57 	bl	8006be2 <xTaskCreate>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d001      	beq.n	8005f3e <osThreadNew+0x11a>
            hTask = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f3e:	693b      	ldr	r3, [r7, #16]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f50:	f3ef 8305 	mrs	r3, IPSR
 8005f54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <osDelay+0x1c>
    stat = osErrorISR;
 8005f5c:	f06f 0305 	mvn.w	r3, #5
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e007      	b.n	8005f74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 ff98 	bl	8006ea4 <vTaskDelay>
    }
  }

  return (stat);
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <vApplicationGetIdleTaskMemory+0x2c>)
 8005f90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4a06      	ldr	r2, [pc, #24]	; (8005fb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005f96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	200002d4 	.word	0x200002d4
 8005fb0:	20000384 	.word	0x20000384

08005fb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4a06      	ldr	r2, [pc, #24]	; (8005fe4 <vApplicationGetTimerTaskMemory+0x30>)
 8005fca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000584 	.word	0x20000584
 8005fe4:	20000634 	.word	0x20000634

08005fe8 <vListInitialise>:
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f103 0208 	add.w	r2, r3, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	609a      	str	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f103 0208 	add.w	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f103 0208 	add.w	r2, r3, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <vListInitialiseItem>:
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <vListInsertEnd>:
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	611a      	str	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <vListInsert>:
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d103      	bne.n	80060aa <vListInsert+0x20>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e00c      	b.n	80060c4 <vListInsert+0x3a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3308      	adds	r3, #8
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e002      	b.n	80060b8 <vListInsert+0x2e>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d2f6      	bcs.n	80060b2 <vListInsert+0x28>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	609a      	str	r2, [r3, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	605a      	str	r2, [r3, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	611a      	str	r2, [r3, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <uxListRemove>:
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6892      	ldr	r2, [r2, #8]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6852      	ldr	r2, [r2, #4]
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d103      	bne.n	8006130 <uxListRemove+0x34>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <xQueueGenericReset>:
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xQueueGenericReset+0x2a>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xQueueGenericReset+0x28>
 800617a:	f002 f89b 	bl	80082b4 <vPortEnterCritical>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	609a      	str	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	3b01      	subs	r3, #1
 80061ac:	68f9      	ldr	r1, [r7, #12]
 80061ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	22ff      	movs	r2, #255	; 0xff
 80061be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d114      	bne.n	80061fa <xQueueGenericReset+0xaa>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01a      	beq.n	800620e <xQueueGenericReset+0xbe>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3310      	adds	r3, #16
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 f94d 	bl	800747c <xTaskRemoveFromEventList>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d012      	beq.n	800620e <xQueueGenericReset+0xbe>
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <xQueueGenericReset+0xcc>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	e009      	b.n	800620e <xQueueGenericReset+0xbe>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3310      	adds	r3, #16
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fef2 	bl	8005fe8 <vListInitialise>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff feed 	bl	8005fe8 <vListInitialise>
 800620e:	f002 f881 	bl	8008314 <vPortExitCritical>
 8006212:	2301      	movs	r3, #1
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <xQueueGenericCreateStatic>:
 8006220:	b580      	push	{r7, lr}
 8006222:	b08e      	sub	sp, #56	; 0x38
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <xQueueGenericCreateStatic+0x2a>
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	62bb      	str	r3, [r7, #40]	; 0x28
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xQueueGenericCreateStatic+0x28>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xQueueGenericCreateStatic+0x46>
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xQueueGenericCreateStatic+0x44>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <xQueueGenericCreateStatic+0x52>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <xQueueGenericCreateStatic+0x56>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <xQueueGenericCreateStatic+0x58>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueGenericCreateStatic+0x72>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericCreateStatic+0x70>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <xQueueGenericCreateStatic+0x7e>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <xQueueGenericCreateStatic+0x82>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <xQueueGenericCreateStatic+0x84>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xQueueGenericCreateStatic+0x9e>
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueGenericCreateStatic+0x9c>
 80062be:	2350      	movs	r3, #80	; 0x50
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b50      	cmp	r3, #80	; 0x50
 80062c6:	d00a      	beq.n	80062de <xQueueGenericCreateStatic+0xbe>
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreateStatic+0xbc>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <xQueueGenericCreateStatic+0xe6>
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4613      	mov	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f805 	bl	8006310 <prvInitialiseNewQueue>
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	4618      	mov	r0, r3
 800630a:	3730      	adds	r7, #48	; 0x30
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvInitialiseNewQueue>:
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	70fb      	strb	r3, [r7, #3]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <prvInitialiseNewQueue+0x1c>
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e002      	b.n	8006332 <prvInitialiseNewQueue+0x22>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
 800633e:	2101      	movs	r1, #1
 8006340:	69b8      	ldr	r0, [r7, #24]
 8006342:	f7ff ff05 	bl	8006150 <xQueueGenericReset>
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <xQueueGenericSend>:
 8006358:	b580      	push	{r7, lr}
 800635a:	b08e      	sub	sp, #56	; 0x38
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <xQueueGenericSend+0x32>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xQueueGenericSend+0x30>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <xQueueGenericSend+0x40>
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <xQueueGenericSend+0x44>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <xQueueGenericSend+0x46>
 800639c:	2300      	movs	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <xQueueGenericSend+0x60>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xQueueGenericSend+0x5e>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d103      	bne.n	80063c6 <xQueueGenericSend+0x6e>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <xQueueGenericSend+0x72>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueGenericSend+0x74>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericSend+0x8e>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericSend+0x8c>
 80063e6:	f001 fa0b 	bl	8007800 <xTaskGetSchedulerState>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <xQueueGenericSend+0x9e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <xQueueGenericSend+0xa2>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <xQueueGenericSend+0xa4>
 80063fa:	2300      	movs	r3, #0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <xQueueGenericSend+0xbe>
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xQueueGenericSend+0xbc>
 8006416:	f001 ff4d 	bl	80082b4 <vPortEnterCritical>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	429a      	cmp	r2, r3
 8006424:	d302      	bcc.n	800642c <xQueueGenericSend+0xd4>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d129      	bne.n	8006480 <xQueueGenericSend+0x128>
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006432:	f000 fa0b 	bl	800684c <prvCopyDataToQueue>
 8006436:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <xQueueGenericSend+0x10a>
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	3324      	adds	r3, #36	; 0x24
 8006444:	4618      	mov	r0, r3
 8006446:	f001 f819 	bl	800747c <xTaskRemoveFromEventList>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <xQueueGenericSend+0x120>
 8006450:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <xQueueGenericSend+0x1f8>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	e00a      	b.n	8006478 <xQueueGenericSend+0x120>
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <xQueueGenericSend+0x120>
 8006468:	4b39      	ldr	r3, [pc, #228]	; (8006550 <xQueueGenericSend+0x1f8>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f001 ff4c 	bl	8008314 <vPortExitCritical>
 800647c:	2301      	movs	r3, #1
 800647e:	e063      	b.n	8006548 <xQueueGenericSend+0x1f0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <xQueueGenericSend+0x136>
 8006486:	f001 ff45 	bl	8008314 <vPortExitCritical>
 800648a:	2300      	movs	r3, #0
 800648c:	e05c      	b.n	8006548 <xQueueGenericSend+0x1f0>
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <xQueueGenericSend+0x14a>
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f853 	bl	8007544 <vTaskInternalSetTimeOutState>
 800649e:	2301      	movs	r3, #1
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	f001 ff37 	bl	8008314 <vPortExitCritical>
 80064a6:	f000 fda3 	bl	8006ff0 <vTaskSuspendAll>
 80064aa:	f001 ff03 	bl	80082b4 <vPortEnterCritical>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d103      	bne.n	80064c4 <xQueueGenericSend+0x16c>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d103      	bne.n	80064da <xQueueGenericSend+0x182>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064da:	f001 ff1b 	bl	8008314 <vPortExitCritical>
 80064de:	1d3a      	adds	r2, r7, #4
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f842 	bl	8007570 <xTaskCheckForTimeOut>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d124      	bne.n	800653c <xQueueGenericSend+0x1e4>
 80064f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f4:	f000 faa2 	bl	8006a3c <prvIsQueueFull>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <xQueueGenericSend+0x1d8>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	3310      	adds	r3, #16
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ff68 	bl	80073dc <vTaskPlaceOnEventList>
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 fa2d 	bl	800696c <prvUnlockQueue>
 8006512:	f000 fd7b 	bl	800700c <xTaskResumeAll>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	f47f af7c 	bne.w	8006416 <xQueueGenericSend+0xbe>
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <xQueueGenericSend+0x1f8>)
 8006520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	e772      	b.n	8006416 <xQueueGenericSend+0xbe>
 8006530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006532:	f000 fa1b 	bl	800696c <prvUnlockQueue>
 8006536:	f000 fd69 	bl	800700c <xTaskResumeAll>
 800653a:	e76c      	b.n	8006416 <xQueueGenericSend+0xbe>
 800653c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653e:	f000 fa15 	bl	800696c <prvUnlockQueue>
 8006542:	f000 fd63 	bl	800700c <xTaskResumeAll>
 8006546:	2300      	movs	r3, #0
 8006548:	4618      	mov	r0, r3
 800654a:	3738      	adds	r7, #56	; 0x38
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xQueueGenericSendFromISR>:
 8006554:	b580      	push	{r7, lr}
 8006556:	b090      	sub	sp, #64	; 0x40
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	63bb      	str	r3, [r7, #56]	; 0x38
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueGenericSendFromISR+0x2e>
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericSendFromISR+0x2c>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <xQueueGenericSendFromISR+0x3c>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <xQueueGenericSendFromISR+0x40>
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <xQueueGenericSendFromISR+0x42>
 8006594:	2300      	movs	r3, #0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <xQueueGenericSendFromISR+0x5c>
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSendFromISR+0x5a>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d103      	bne.n	80065be <xQueueGenericSendFromISR+0x6a>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSendFromISR+0x6e>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSendFromISR+0x70>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xQueueGenericSendFromISR+0x8a>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xQueueGenericSendFromISR+0x88>
 80065de:	f001 ff4b 	bl	8008478 <vPortValidateInterruptPriority>
 80065e2:	f3ef 8211 	mrs	r2, BASEPRI
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	61fa      	str	r2, [r7, #28]
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <xQueueGenericSendFromISR+0xbc>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d12f      	bne.n	8006670 <xQueueGenericSendFromISR+0x11c>
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006626:	f000 f911 	bl	800684c <prvCopyDataToQueue>
 800662a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d112      	bne.n	800665a <xQueueGenericSendFromISR+0x106>
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d016      	beq.n	800666a <xQueueGenericSendFromISR+0x116>
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	3324      	adds	r3, #36	; 0x24
 8006640:	4618      	mov	r0, r3
 8006642:	f000 ff1b 	bl	800747c <xTaskRemoveFromEventList>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00e      	beq.n	800666a <xQueueGenericSendFromISR+0x116>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <xQueueGenericSendFromISR+0x116>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e007      	b.n	800666a <xQueueGenericSendFromISR+0x116>
 800665a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800665e:	3301      	adds	r3, #1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	b25a      	sxtb	r2, r3
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800666a:	2301      	movs	r3, #1
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666e:	e001      	b.n	8006674 <xQueueGenericSendFromISR+0x120>
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	bf00      	nop
 8006680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006682:	4618      	mov	r0, r3
 8006684:	3740      	adds	r7, #64	; 0x40
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <xQueueReceive>:
 800668c:	b580      	push	{r7, lr}
 800668e:	b08c      	sub	sp, #48	; 0x30
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <xQueueReceive+0x30>
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <xQueueReceive+0x2e>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <xQueueReceive+0x3e>
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueReceive+0x42>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueReceive+0x44>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueReceive+0x5e>
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueReceive+0x5c>
 80066ea:	f001 f889 	bl	8007800 <xTaskGetSchedulerState>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <xQueueReceive+0x6e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <xQueueReceive+0x72>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <xQueueReceive+0x74>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xQueueReceive+0x8e>
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueReceive+0x8c>
 800671a:	f001 fdcb 	bl	80082b4 <vPortEnterCritical>
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01f      	beq.n	800676a <xQueueReceive+0xde>
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672e:	f000 f8f7 	bl	8006920 <prvCopyDataFromQueue>
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1e5a      	subs	r2, r3, #1
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00f      	beq.n	8006762 <xQueueReceive+0xd6>
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	3310      	adds	r3, #16
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fe98 	bl	800747c <xTaskRemoveFromEventList>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <xQueueReceive+0xd6>
 8006752:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <xQueueReceive+0x1bc>)
 8006754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f001 fdd7 	bl	8008314 <vPortExitCritical>
 8006766:	2301      	movs	r3, #1
 8006768:	e069      	b.n	800683e <xQueueReceive+0x1b2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <xQueueReceive+0xec>
 8006770:	f001 fdd0 	bl	8008314 <vPortExitCritical>
 8006774:	2300      	movs	r3, #0
 8006776:	e062      	b.n	800683e <xQueueReceive+0x1b2>
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <xQueueReceive+0x100>
 800677e:	f107 0310 	add.w	r3, r7, #16
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fede 	bl	8007544 <vTaskInternalSetTimeOutState>
 8006788:	2301      	movs	r3, #1
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678c:	f001 fdc2 	bl	8008314 <vPortExitCritical>
 8006790:	f000 fc2e 	bl	8006ff0 <vTaskSuspendAll>
 8006794:	f001 fd8e 	bl	80082b4 <vPortEnterCritical>
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800679e:	b25b      	sxtb	r3, r3
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d103      	bne.n	80067ae <xQueueReceive+0x122>
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b4:	b25b      	sxtb	r3, r3
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d103      	bne.n	80067c4 <xQueueReceive+0x138>
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c4:	f001 fda6 	bl	8008314 <vPortExitCritical>
 80067c8:	1d3a      	adds	r2, r7, #4
 80067ca:	f107 0310 	add.w	r3, r7, #16
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fecd 	bl	8007570 <xTaskCheckForTimeOut>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d123      	bne.n	8006824 <xQueueReceive+0x198>
 80067dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067de:	f000 f917 	bl	8006a10 <prvIsQueueEmpty>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <xQueueReceive+0x18c>
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	3324      	adds	r3, #36	; 0x24
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fdf3 	bl	80073dc <vTaskPlaceOnEventList>
 80067f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f8:	f000 f8b8 	bl	800696c <prvUnlockQueue>
 80067fc:	f000 fc06 	bl	800700c <xTaskResumeAll>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d189      	bne.n	800671a <xQueueReceive+0x8e>
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <xQueueReceive+0x1bc>)
 8006808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	e780      	b.n	800671a <xQueueReceive+0x8e>
 8006818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681a:	f000 f8a7 	bl	800696c <prvUnlockQueue>
 800681e:	f000 fbf5 	bl	800700c <xTaskResumeAll>
 8006822:	e77a      	b.n	800671a <xQueueReceive+0x8e>
 8006824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006826:	f000 f8a1 	bl	800696c <prvUnlockQueue>
 800682a:	f000 fbef 	bl	800700c <xTaskResumeAll>
 800682e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006830:	f000 f8ee 	bl	8006a10 <prvIsQueueEmpty>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	f43f af6f 	beq.w	800671a <xQueueReceive+0x8e>
 800683c:	2300      	movs	r3, #0
 800683e:	4618      	mov	r0, r3
 8006840:	3730      	adds	r7, #48	; 0x30
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <prvCopyDataToQueue>:
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <prvCopyDataToQueue+0x3a>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d14d      	bne.n	800690e <prvCopyDataToQueue+0xc2>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 ffe0 	bl	800783c <xTaskPriorityDisinherit>
 800687c:	6178      	str	r0, [r7, #20]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	e043      	b.n	800690e <prvCopyDataToQueue+0xc2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d119      	bne.n	80068c0 <prvCopyDataToQueue+0x74>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6858      	ldr	r0, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	461a      	mov	r2, r3
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	f002 f8a2 	bl	80089e0 <memcpy>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	441a      	add	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d32b      	bcc.n	800690e <prvCopyDataToQueue+0xc2>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	e026      	b.n	800690e <prvCopyDataToQueue+0xc2>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68d8      	ldr	r0, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	461a      	mov	r2, r3
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	f002 f888 	bl	80089e0 <memcpy>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	425b      	negs	r3, r3
 80068da:	441a      	add	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d207      	bcs.n	80068fc <prvCopyDataToQueue+0xb0>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	425b      	negs	r3, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	60da      	str	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d105      	bne.n	800690e <prvCopyDataToQueue+0xc2>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <prvCopyDataToQueue+0xc2>
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3b01      	subs	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvCopyDataFromQueue>:
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <prvCopyDataFromQueue+0x44>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	441a      	add	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	429a      	cmp	r2, r3
 800694a:	d303      	bcc.n	8006954 <prvCopyDataFromQueue+0x34>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60da      	str	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68d9      	ldr	r1, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	461a      	mov	r2, r3
 800695e:	6838      	ldr	r0, [r7, #0]
 8006960:	f002 f83e 	bl	80089e0 <memcpy>
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <prvUnlockQueue>:
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	f001 fc9e 	bl	80082b4 <vPortEnterCritical>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e011      	b.n	80069a6 <prvUnlockQueue+0x3a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d012      	beq.n	80069b0 <prvUnlockQueue+0x44>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3324      	adds	r3, #36	; 0x24
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fd74 	bl	800747c <xTaskRemoveFromEventList>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <prvUnlockQueue+0x32>
 800699a:	f000 fe4b 	bl	8007634 <vTaskMissedYield>
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dce9      	bgt.n	8006982 <prvUnlockQueue+0x16>
 80069ae:	e000      	b.n	80069b2 <prvUnlockQueue+0x46>
 80069b0:	bf00      	nop
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ba:	f001 fcab 	bl	8008314 <vPortExitCritical>
 80069be:	f001 fc79 	bl	80082b4 <vPortEnterCritical>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c8:	73bb      	strb	r3, [r7, #14]
 80069ca:	e011      	b.n	80069f0 <prvUnlockQueue+0x84>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d012      	beq.n	80069fa <prvUnlockQueue+0x8e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3310      	adds	r3, #16
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fd4f 	bl	800747c <xTaskRemoveFromEventList>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <prvUnlockQueue+0x7c>
 80069e4:	f000 fe26 	bl	8007634 <vTaskMissedYield>
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	73bb      	strb	r3, [r7, #14]
 80069f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dce9      	bgt.n	80069cc <prvUnlockQueue+0x60>
 80069f8:	e000      	b.n	80069fc <prvUnlockQueue+0x90>
 80069fa:	bf00      	nop
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	22ff      	movs	r2, #255	; 0xff
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	f001 fc86 	bl	8008314 <vPortExitCritical>
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvIsQueueEmpty>:
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	f001 fc4c 	bl	80082b4 <vPortEnterCritical>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <prvIsQueueEmpty+0x1a>
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <prvIsQueueEmpty+0x1e>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	f001 fc71 	bl	8008314 <vPortExitCritical>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvIsQueueFull>:
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	f001 fc36 	bl	80082b4 <vPortEnterCritical>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d102      	bne.n	8006a5a <prvIsQueueFull+0x1e>
 8006a54:	2301      	movs	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e001      	b.n	8006a5e <prvIsQueueFull+0x22>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	f001 fc59 	bl	8008314 <vPortExitCritical>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <vQueueAddToRegistry>:
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e014      	b.n	8006aa6 <vQueueAddToRegistry+0x3a>
 8006a7c:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <vQueueAddToRegistry+0x50>)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <vQueueAddToRegistry+0x34>
 8006a88:	490c      	ldr	r1, [pc, #48]	; (8006abc <vQueueAddToRegistry+0x50>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006a92:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <vQueueAddToRegistry+0x50>)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4413      	add	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	605a      	str	r2, [r3, #4]
 8006a9e:	e006      	b.n	8006aae <vQueueAddToRegistry+0x42>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b07      	cmp	r3, #7
 8006aaa:	d9e7      	bls.n	8006a7c <vQueueAddToRegistry+0x10>
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000a34 	.word	0x20000a34

08006ac0 <vQueueWaitForMessageRestricted>:
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	f001 fbf0 	bl	80082b4 <vPortEnterCritical>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ada:	b25b      	sxtb	r3, r3
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d103      	bne.n	8006aea <vQueueWaitForMessageRestricted+0x2a>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006af0:	b25b      	sxtb	r3, r3
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d103      	bne.n	8006b00 <vQueueWaitForMessageRestricted+0x40>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b00:	f001 fc08 	bl	8008314 <vPortExitCritical>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <vQueueWaitForMessageRestricted+0x5a>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	3324      	adds	r3, #36	; 0x24
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fc85 	bl	8007424 <vTaskPlaceOnEventListRestricted>
 8006b1a:	6978      	ldr	r0, [r7, #20]
 8006b1c:	f7ff ff26 	bl	800696c <prvUnlockQueue>
 8006b20:	bf00      	nop
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <xTaskCreateStatic>:
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xTaskCreateStatic+0x2a>
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskCreateStatic+0x28>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xTaskCreateStatic+0x46>
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xTaskCreateStatic+0x44>
 8006b6e:	23b0      	movs	r3, #176	; 0xb0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2bb0      	cmp	r3, #176	; 0xb0
 8006b76:	d00a      	beq.n	8006b8e <xTaskCreateStatic+0x66>
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xTaskCreateStatic+0x64>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01e      	beq.n	8006bd4 <xTaskCreateStatic+0xac>
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01b      	beq.n	8006bd4 <xTaskCreateStatic+0xac>
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	9302      	str	r3, [sp, #8]
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f850 	bl	8006c6c <prvInitialiseNewTask>
 8006bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bce:	f000 f8f9 	bl	8006dc4 <prvAddNewTaskToReadyList>
 8006bd2:	e001      	b.n	8006bd8 <xTaskCreateStatic+0xb0>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <xTaskCreate>:
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b08c      	sub	sp, #48	; 0x30
 8006be6:	af04      	add	r7, sp, #16
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 fc7e 	bl	80084f8 <pvPortMalloc>
 8006bfc:	6178      	str	r0, [r7, #20]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <xTaskCreate+0x40>
 8006c04:	20b0      	movs	r0, #176	; 0xb0
 8006c06:	f001 fc77 	bl	80084f8 <pvPortMalloc>
 8006c0a:	61f8      	str	r0, [r7, #28]
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <xTaskCreate+0x38>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
 8006c18:	e005      	b.n	8006c26 <xTaskCreate+0x44>
 8006c1a:	6978      	ldr	r0, [r7, #20]
 8006c1c:	f001 fd38 	bl	8008690 <vPortFree>
 8006c20:	e001      	b.n	8006c26 <xTaskCreate+0x44>
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d017      	beq.n	8006c5c <xTaskCreate+0x7a>
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8006c34:	88fa      	ldrh	r2, [r7, #6]
 8006c36:	2300      	movs	r3, #0
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f80e 	bl	8006c6c <prvInitialiseNewTask>
 8006c50:	69f8      	ldr	r0, [r7, #28]
 8006c52:	f000 f8b7 	bl	8006dc4 <prvAddNewTaskToReadyList>
 8006c56:	2301      	movs	r3, #1
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e002      	b.n	8006c62 <xTaskCreate+0x80>
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <prvInitialiseNewTask>:
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	461a      	mov	r2, r3
 8006c84:	21a5      	movs	r1, #165	; 0xa5
 8006c86:	f001 fe21 	bl	80088cc <memset>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c94:	3b01      	subs	r3, #1
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f023 0307 	bic.w	r3, r3, #7
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <prvInitialiseNewTask+0x58>
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <prvInitialiseNewTask+0x56>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01f      	beq.n	8006d10 <prvInitialiseNewTask+0xa4>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e012      	b.n	8006cfc <prvInitialiseNewTask+0x90>
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	7819      	ldrb	r1, [r3, #0]
 8006cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3334      	adds	r3, #52	; 0x34
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <prvInitialiseNewTask+0x98>
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d9e9      	bls.n	8006cd6 <prvInitialiseNewTask+0x6a>
 8006d02:	e000      	b.n	8006d06 <prvInitialiseNewTask+0x9a>
 8006d04:	bf00      	nop
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d0e:	e003      	b.n	8006d18 <prvInitialiseNewTask+0xac>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	2b37      	cmp	r3, #55	; 0x37
 8006d1c:	d901      	bls.n	8006d22 <prvInitialiseNewTask+0xb6>
 8006d1e:	2337      	movs	r3, #55	; 0x37
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2c:	651a      	str	r2, [r3, #80]	; 0x50
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2200      	movs	r2, #0
 8006d32:	655a      	str	r2, [r3, #84]	; 0x54
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff f975 	bl	8006028 <vListInitialiseItem>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	3318      	adds	r3, #24
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff f970 	bl	8006028 <vListInitialiseItem>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4c:	611a      	str	r2, [r3, #16]
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	619a      	str	r2, [r3, #24]
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	2200      	movs	r2, #0
 8006d62:	659a      	str	r2, [r3, #88]	; 0x58
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	335c      	adds	r3, #92	; 0x5c
 8006d78:	224c      	movs	r2, #76	; 0x4c
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 fda5 	bl	80088cc <memset>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	4a0c      	ldr	r2, [pc, #48]	; (8006db8 <prvInitialiseNewTask+0x14c>)
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	4a0c      	ldr	r2, [pc, #48]	; (8006dbc <prvInitialiseNewTask+0x150>)
 8006d8c:	665a      	str	r2, [r3, #100]	; 0x64
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <prvInitialiseNewTask+0x154>)
 8006d92:	669a      	str	r2, [r3, #104]	; 0x68
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	69b8      	ldr	r0, [r7, #24]
 8006d9a:	f001 f95f 	bl	800805c <pxPortInitialiseStack>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <prvInitialiseNewTask+0x144>
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	bf00      	nop
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20004cd0 	.word	0x20004cd0
 8006dbc:	20004d38 	.word	0x20004d38
 8006dc0:	20004da0 	.word	0x20004da0

08006dc4 <prvAddNewTaskToReadyList>:
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	f001 fa72 	bl	80082b4 <vPortEnterCritical>
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <prvAddNewTaskToReadyList+0xc4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <prvAddNewTaskToReadyList+0xc4>)
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	4b2c      	ldr	r3, [pc, #176]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <prvAddNewTaskToReadyList+0x32>
 8006de2:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <prvAddNewTaskToReadyList+0xc4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d110      	bne.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
 8006df0:	f000 fc44 	bl	800767c <prvInitialiseTaskLists>
 8006df4:	e00d      	b.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
 8006df6:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <prvAddNewTaskToReadyList+0xcc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
 8006dfe:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d802      	bhi.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
 8006e0c:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <prvAddNewTaskToReadyList+0xd0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <prvAddNewTaskToReadyList+0xd0>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <prvAddNewTaskToReadyList+0xd0>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	649a      	str	r2, [r3, #72]	; 0x48
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <prvAddNewTaskToReadyList+0xd4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d903      	bls.n	8006e38 <prvAddNewTaskToReadyList+0x74>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <prvAddNewTaskToReadyList+0xd4>)
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <prvAddNewTaskToReadyList+0xd8>)
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f7ff f8f7 	bl	8006042 <vListInsertEnd>
 8006e54:	f001 fa5e 	bl	8008314 <vPortExitCritical>
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <prvAddNewTaskToReadyList+0xcc>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00e      	beq.n	8006e7e <prvAddNewTaskToReadyList+0xba>
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d207      	bcs.n	8006e7e <prvAddNewTaskToReadyList+0xba>
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <prvAddNewTaskToReadyList+0xdc>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000f48 	.word	0x20000f48
 8006e8c:	20000a74 	.word	0x20000a74
 8006e90:	20000f54 	.word	0x20000f54
 8006e94:	20000f64 	.word	0x20000f64
 8006e98:	20000f50 	.word	0x20000f50
 8006e9c:	20000a78 	.word	0x20000a78
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <vTaskDelay>:
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d017      	beq.n	8006ee6 <vTaskDelay+0x42>
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <vTaskDelay+0x60>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <vTaskDelay+0x30>
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vTaskDelay+0x2e>
 8006ed4:	f000 f88c 	bl	8006ff0 <vTaskSuspendAll>
 8006ed8:	2100      	movs	r1, #0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fd1c 	bl	8007918 <prvAddCurrentTaskToDelayedList>
 8006ee0:	f000 f894 	bl	800700c <xTaskResumeAll>
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d107      	bne.n	8006efc <vTaskDelay+0x58>
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <vTaskDelay+0x64>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000f70 	.word	0x20000f70
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vTaskStartScheduler>:
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
 8006f1a:	463a      	mov	r2, r7
 8006f1c:	1d39      	adds	r1, r7, #4
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff f82c 	bl	8005f80 <vApplicationGetIdleTaskMemory>
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	9202      	str	r2, [sp, #8]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	2300      	movs	r3, #0
 8006f38:	460a      	mov	r2, r1
 8006f3a:	4925      	ldr	r1, [pc, #148]	; (8006fd0 <vTaskStartScheduler+0xc4>)
 8006f3c:	4825      	ldr	r0, [pc, #148]	; (8006fd4 <vTaskStartScheduler+0xc8>)
 8006f3e:	f7ff fdf3 	bl	8006b28 <xTaskCreateStatic>
 8006f42:	4603      	mov	r3, r0
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <vTaskStartScheduler+0xcc>)
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <vTaskStartScheduler+0xcc>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <vTaskStartScheduler+0x4a>
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e001      	b.n	8006f5a <vTaskStartScheduler+0x4e>
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d102      	bne.n	8006f66 <vTaskStartScheduler+0x5a>
 8006f60:	f000 fd2e 	bl	80079c0 <xTimerCreateTimerTask>
 8006f64:	6178      	str	r0, [r7, #20]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d11d      	bne.n	8006fa8 <vTaskStartScheduler+0x9c>
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	bf00      	nop
 8006f80:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <vTaskStartScheduler+0xd0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	335c      	adds	r3, #92	; 0x5c
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <vTaskStartScheduler+0xd4>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b16      	ldr	r3, [pc, #88]	; (8006fe4 <vTaskStartScheduler+0xd8>)
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <vTaskStartScheduler+0xdc>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	4b14      	ldr	r3, [pc, #80]	; (8006fec <vTaskStartScheduler+0xe0>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	f7f9 ff71 	bl	8000e84 <configureTimerForRunTimeStats>
 8006fa2:	f001 f8e5 	bl	8008170 <xPortStartScheduler>
 8006fa6:	e00e      	b.n	8006fc6 <vTaskStartScheduler+0xba>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d10a      	bne.n	8006fc6 <vTaskStartScheduler+0xba>
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <vTaskStartScheduler+0xb8>
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	08009d00 	.word	0x08009d00
 8006fd4:	0800764d 	.word	0x0800764d
 8006fd8:	20000f6c 	.word	0x20000f6c
 8006fdc:	20000a74 	.word	0x20000a74
 8006fe0:	20000060 	.word	0x20000060
 8006fe4:	20000f68 	.word	0x20000f68
 8006fe8:	20000f54 	.word	0x20000f54
 8006fec:	20000f4c 	.word	0x20000f4c

08006ff0 <vTaskSuspendAll>:
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <vTaskSuspendAll+0x18>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	4a03      	ldr	r2, [pc, #12]	; (8007008 <vTaskSuspendAll+0x18>)
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	bf00      	nop
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	20000f70 	.word	0x20000f70

0800700c <xTaskResumeAll>:
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	4b42      	ldr	r3, [pc, #264]	; (8007124 <xTaskResumeAll+0x118>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <xTaskResumeAll+0x2c>
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <xTaskResumeAll+0x2a>
 8007038:	f001 f93c 	bl	80082b4 <vPortEnterCritical>
 800703c:	4b39      	ldr	r3, [pc, #228]	; (8007124 <xTaskResumeAll+0x118>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3b01      	subs	r3, #1
 8007042:	4a38      	ldr	r2, [pc, #224]	; (8007124 <xTaskResumeAll+0x118>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4b37      	ldr	r3, [pc, #220]	; (8007124 <xTaskResumeAll+0x118>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d162      	bne.n	8007114 <xTaskResumeAll+0x108>
 800704e:	4b36      	ldr	r3, [pc, #216]	; (8007128 <xTaskResumeAll+0x11c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d05e      	beq.n	8007114 <xTaskResumeAll+0x108>
 8007056:	e02f      	b.n	80070b8 <xTaskResumeAll+0xac>
 8007058:	4b34      	ldr	r3, [pc, #208]	; (800712c <xTaskResumeAll+0x120>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3318      	adds	r3, #24
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff f849 	bl	80060fc <uxListRemove>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3304      	adds	r3, #4
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff f844 	bl	80060fc <uxListRemove>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	4b2d      	ldr	r3, [pc, #180]	; (8007130 <xTaskResumeAll+0x124>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d903      	bls.n	8007088 <xTaskResumeAll+0x7c>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	4a2a      	ldr	r2, [pc, #168]	; (8007130 <xTaskResumeAll+0x124>)
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4a27      	ldr	r2, [pc, #156]	; (8007134 <xTaskResumeAll+0x128>)
 8007096:	441a      	add	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f7fe ffcf 	bl	8006042 <vListInsertEnd>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4b23      	ldr	r3, [pc, #140]	; (8007138 <xTaskResumeAll+0x12c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <xTaskResumeAll+0xac>
 80070b2:	4b22      	ldr	r3, [pc, #136]	; (800713c <xTaskResumeAll+0x130>)
 80070b4:	2201      	movs	r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	4b1c      	ldr	r3, [pc, #112]	; (800712c <xTaskResumeAll+0x120>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1cb      	bne.n	8007058 <xTaskResumeAll+0x4c>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <xTaskResumeAll+0xbe>
 80070c6:	f000 fb7b 	bl	80077c0 <prvResetNextTaskUnblockTime>
 80070ca:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <xTaskResumeAll+0x134>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d010      	beq.n	80070f8 <xTaskResumeAll+0xec>
 80070d6:	f000 f847 	bl	8007168 <xTaskIncrementTick>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <xTaskResumeAll+0xda>
 80070e0:	4b16      	ldr	r3, [pc, #88]	; (800713c <xTaskResumeAll+0x130>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f1      	bne.n	80070d6 <xTaskResumeAll+0xca>
 80070f2:	4b13      	ldr	r3, [pc, #76]	; (8007140 <xTaskResumeAll+0x134>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <xTaskResumeAll+0x130>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <xTaskResumeAll+0x108>
 8007100:	2301      	movs	r3, #1
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <xTaskResumeAll+0x138>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f001 f8fe 	bl	8008314 <vPortExitCritical>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000f70 	.word	0x20000f70
 8007128:	20000f48 	.word	0x20000f48
 800712c:	20000f08 	.word	0x20000f08
 8007130:	20000f50 	.word	0x20000f50
 8007134:	20000a78 	.word	0x20000a78
 8007138:	20000a74 	.word	0x20000a74
 800713c:	20000f5c 	.word	0x20000f5c
 8007140:	20000f58 	.word	0x20000f58
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <xTaskGetTickCount>:
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <xTaskGetTickCount+0x1c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000f4c 	.word	0x20000f4c

08007168 <xTaskIncrementTick>:
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	4b4f      	ldr	r3, [pc, #316]	; (80072b0 <xTaskIncrementTick+0x148>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f040 808f 	bne.w	800729a <xTaskIncrementTick+0x132>
 800717c:	4b4d      	ldr	r3, [pc, #308]	; (80072b4 <xTaskIncrementTick+0x14c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3301      	adds	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	4a4b      	ldr	r2, [pc, #300]	; (80072b4 <xTaskIncrementTick+0x14c>)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d120      	bne.n	80071d2 <xTaskIncrementTick+0x6a>
 8007190:	4b49      	ldr	r3, [pc, #292]	; (80072b8 <xTaskIncrementTick+0x150>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <xTaskIncrementTick+0x48>
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <xTaskIncrementTick+0x46>
 80071b0:	4b41      	ldr	r3, [pc, #260]	; (80072b8 <xTaskIncrementTick+0x150>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	4b41      	ldr	r3, [pc, #260]	; (80072bc <xTaskIncrementTick+0x154>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a3f      	ldr	r2, [pc, #252]	; (80072b8 <xTaskIncrementTick+0x150>)
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4a3f      	ldr	r2, [pc, #252]	; (80072bc <xTaskIncrementTick+0x154>)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	4b3e      	ldr	r3, [pc, #248]	; (80072c0 <xTaskIncrementTick+0x158>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	4a3d      	ldr	r2, [pc, #244]	; (80072c0 <xTaskIncrementTick+0x158>)
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	f000 faf7 	bl	80077c0 <prvResetNextTaskUnblockTime>
 80071d2:	4b3c      	ldr	r3, [pc, #240]	; (80072c4 <xTaskIncrementTick+0x15c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d349      	bcc.n	8007270 <xTaskIncrementTick+0x108>
 80071dc:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <xTaskIncrementTick+0x150>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <xTaskIncrementTick+0x88>
 80071e6:	4b37      	ldr	r3, [pc, #220]	; (80072c4 <xTaskIncrementTick+0x15c>)
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e03f      	b.n	8007270 <xTaskIncrementTick+0x108>
 80071f0:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <xTaskIncrementTick+0x150>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	607b      	str	r3, [r7, #4]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d203      	bcs.n	8007210 <xTaskIncrementTick+0xa8>
 8007208:	4a2e      	ldr	r2, [pc, #184]	; (80072c4 <xTaskIncrementTick+0x15c>)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e02f      	b.n	8007270 <xTaskIncrementTick+0x108>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3304      	adds	r3, #4
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe ff71 	bl	80060fc <uxListRemove>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <xTaskIncrementTick+0xc4>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3318      	adds	r3, #24
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe ff68 	bl	80060fc <uxListRemove>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4b25      	ldr	r3, [pc, #148]	; (80072c8 <xTaskIncrementTick+0x160>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d903      	bls.n	8007240 <xTaskIncrementTick+0xd8>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a22      	ldr	r2, [pc, #136]	; (80072c8 <xTaskIncrementTick+0x160>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <xTaskIncrementTick+0x164>)
 800724e:	441a      	add	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7fe fef3 	bl	8006042 <vListInsertEnd>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <xTaskIncrementTick+0x168>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	429a      	cmp	r2, r3
 8007268:	d3b8      	bcc.n	80071dc <xTaskIncrementTick+0x74>
 800726a:	2301      	movs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e7b5      	b.n	80071dc <xTaskIncrementTick+0x74>
 8007270:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <xTaskIncrementTick+0x168>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	4915      	ldr	r1, [pc, #84]	; (80072cc <xTaskIncrementTick+0x164>)
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d901      	bls.n	800728c <xTaskIncrementTick+0x124>
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <xTaskIncrementTick+0x16c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <xTaskIncrementTick+0x13c>
 8007294:	2301      	movs	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e004      	b.n	80072a4 <xTaskIncrementTick+0x13c>
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <xTaskIncrementTick+0x170>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <xTaskIncrementTick+0x170>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000f70 	.word	0x20000f70
 80072b4:	20000f4c 	.word	0x20000f4c
 80072b8:	20000f00 	.word	0x20000f00
 80072bc:	20000f04 	.word	0x20000f04
 80072c0:	20000f60 	.word	0x20000f60
 80072c4:	20000f68 	.word	0x20000f68
 80072c8:	20000f50 	.word	0x20000f50
 80072cc:	20000a78 	.word	0x20000a78
 80072d0:	20000a74 	.word	0x20000a74
 80072d4:	20000f5c 	.word	0x20000f5c
 80072d8:	20000f58 	.word	0x20000f58

080072dc <vTaskSwitchContext>:
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4b36      	ldr	r3, [pc, #216]	; (80073bc <vTaskSwitchContext+0xe0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <vTaskSwitchContext+0x16>
 80072ea:	4b35      	ldr	r3, [pc, #212]	; (80073c0 <vTaskSwitchContext+0xe4>)
 80072ec:	2201      	movs	r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e05f      	b.n	80073b2 <vTaskSwitchContext+0xd6>
 80072f2:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <vTaskSwitchContext+0xe4>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	f7f9 fdde 	bl	8000eb8 <getRunTimeCounterValue>
 80072fc:	4603      	mov	r3, r0
 80072fe:	4a31      	ldr	r2, [pc, #196]	; (80073c4 <vTaskSwitchContext+0xe8>)
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	4b30      	ldr	r3, [pc, #192]	; (80073c4 <vTaskSwitchContext+0xe8>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <vTaskSwitchContext+0xec>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d909      	bls.n	8007322 <vTaskSwitchContext+0x46>
 800730e:	4b2f      	ldr	r3, [pc, #188]	; (80073cc <vTaskSwitchContext+0xf0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007314:	4a2b      	ldr	r2, [pc, #172]	; (80073c4 <vTaskSwitchContext+0xe8>)
 8007316:	6810      	ldr	r0, [r2, #0]
 8007318:	4a2b      	ldr	r2, [pc, #172]	; (80073c8 <vTaskSwitchContext+0xec>)
 800731a:	6812      	ldr	r2, [r2, #0]
 800731c:	1a82      	subs	r2, r0, r2
 800731e:	440a      	add	r2, r1
 8007320:	659a      	str	r2, [r3, #88]	; 0x58
 8007322:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <vTaskSwitchContext+0xe8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a28      	ldr	r2, [pc, #160]	; (80073c8 <vTaskSwitchContext+0xec>)
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <vTaskSwitchContext+0xf4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e010      	b.n	8007354 <vTaskSwitchContext+0x78>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <vTaskSwitchContext+0x72>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <vTaskSwitchContext+0x70>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b01      	subs	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	491f      	ldr	r1, [pc, #124]	; (80073d4 <vTaskSwitchContext+0xf8>)
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0e4      	beq.n	8007332 <vTaskSwitchContext+0x56>
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <vTaskSwitchContext+0xf8>)
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3308      	adds	r3, #8
 800738a:	429a      	cmp	r2, r3
 800738c:	d104      	bne.n	8007398 <vTaskSwitchContext+0xbc>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	605a      	str	r2, [r3, #4]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	4a0b      	ldr	r2, [pc, #44]	; (80073cc <vTaskSwitchContext+0xf0>)
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	4a0b      	ldr	r2, [pc, #44]	; (80073d0 <vTaskSwitchContext+0xf4>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b08      	ldr	r3, [pc, #32]	; (80073cc <vTaskSwitchContext+0xf0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	335c      	adds	r3, #92	; 0x5c
 80073ae:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <vTaskSwitchContext+0xfc>)
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000f70 	.word	0x20000f70
 80073c0:	20000f5c 	.word	0x20000f5c
 80073c4:	20000f78 	.word	0x20000f78
 80073c8:	20000f74 	.word	0x20000f74
 80073cc:	20000a74 	.word	0x20000a74
 80073d0:	20000f50 	.word	0x20000f50
 80073d4:	20000a78 	.word	0x20000a78
 80073d8:	20000060 	.word	0x20000060

080073dc <vTaskPlaceOnEventList>:
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <vTaskPlaceOnEventList+0x26>
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <vTaskPlaceOnEventList+0x24>
 8007402:	4b07      	ldr	r3, [pc, #28]	; (8007420 <vTaskPlaceOnEventList+0x44>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3318      	adds	r3, #24
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fe fe3d 	bl	800608a <vListInsert>
 8007410:	2101      	movs	r1, #1
 8007412:	6838      	ldr	r0, [r7, #0]
 8007414:	f000 fa80 	bl	8007918 <prvAddCurrentTaskToDelayedList>
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000a74 	.word	0x20000a74

08007424 <vTaskPlaceOnEventListRestricted>:
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <vTaskPlaceOnEventListRestricted+0x28>
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <vTaskPlaceOnEventListRestricted+0x26>
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <vTaskPlaceOnEventListRestricted+0x54>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3318      	adds	r3, #24
 8007452:	4619      	mov	r1, r3
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7fe fdf4 	bl	8006042 <vListInsertEnd>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <vTaskPlaceOnEventListRestricted+0x42>
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	68b8      	ldr	r0, [r7, #8]
 800746a:	f000 fa55 	bl	8007918 <prvAddCurrentTaskToDelayedList>
 800746e:	bf00      	nop
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000a74 	.word	0x20000a74

0800747c <xTaskRemoveFromEventList>:
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xTaskRemoveFromEventList+0x2c>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xTaskRemoveFromEventList+0x2a>
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	3318      	adds	r3, #24
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fe25 	bl	80060fc <uxListRemove>
 80074b2:	4b1e      	ldr	r3, [pc, #120]	; (800752c <xTaskRemoveFromEventList+0xb0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11d      	bne.n	80074f6 <xTaskRemoveFromEventList+0x7a>
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fe1c 	bl	80060fc <uxListRemove>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	4b19      	ldr	r3, [pc, #100]	; (8007530 <xTaskRemoveFromEventList+0xb4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d903      	bls.n	80074d8 <xTaskRemoveFromEventList+0x5c>
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <xTaskRemoveFromEventList+0xb4>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <xTaskRemoveFromEventList+0xb8>)
 80074e6:	441a      	add	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fda7 	bl	8006042 <vListInsertEnd>
 80074f4:	e005      	b.n	8007502 <xTaskRemoveFromEventList+0x86>
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3318      	adds	r3, #24
 80074fa:	4619      	mov	r1, r3
 80074fc:	480e      	ldr	r0, [pc, #56]	; (8007538 <xTaskRemoveFromEventList+0xbc>)
 80074fe:	f7fe fda0 	bl	8006042 <vListInsertEnd>
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <xTaskRemoveFromEventList+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	429a      	cmp	r2, r3
 800750e:	d905      	bls.n	800751c <xTaskRemoveFromEventList+0xa0>
 8007510:	2301      	movs	r3, #1
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <xTaskRemoveFromEventList+0xc4>)
 8007516:	2201      	movs	r2, #1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e001      	b.n	8007520 <xTaskRemoveFromEventList+0xa4>
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000f70 	.word	0x20000f70
 8007530:	20000f50 	.word	0x20000f50
 8007534:	20000a78 	.word	0x20000a78
 8007538:	20000f08 	.word	0x20000f08
 800753c:	20000a74 	.word	0x20000a74
 8007540:	20000f5c 	.word	0x20000f5c

08007544 <vTaskInternalSetTimeOutState>:
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	4b06      	ldr	r3, [pc, #24]	; (8007568 <vTaskInternalSetTimeOutState+0x24>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <vTaskInternalSetTimeOutState+0x28>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	605a      	str	r2, [r3, #4]
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	20000f60 	.word	0x20000f60
 800756c:	20000f4c 	.word	0x20000f4c

08007570 <xTaskCheckForTimeOut>:
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xTaskCheckForTimeOut+0x26>
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xTaskCheckForTimeOut+0x24>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <xTaskCheckForTimeOut+0x42>
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xTaskCheckForTimeOut+0x40>
 80075b2:	f000 fe7f 	bl	80082b4 <vPortEnterCritical>
 80075b6:	4b1d      	ldr	r3, [pc, #116]	; (800762c <xTaskCheckForTimeOut+0xbc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d102      	bne.n	80075d6 <xTaskCheckForTimeOut+0x66>
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	e023      	b.n	800761e <xTaskCheckForTimeOut+0xae>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4b15      	ldr	r3, [pc, #84]	; (8007630 <xTaskCheckForTimeOut+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d007      	beq.n	80075f2 <xTaskCheckForTimeOut+0x82>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <xTaskCheckForTimeOut+0x82>
 80075ec:	2301      	movs	r3, #1
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e015      	b.n	800761e <xTaskCheckForTimeOut+0xae>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d20b      	bcs.n	8007614 <xTaskCheckForTimeOut+0xa4>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff9b 	bl	8007544 <vTaskInternalSetTimeOutState>
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	e004      	b.n	800761e <xTaskCheckForTimeOut+0xae>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	2301      	movs	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	f000 fe79 	bl	8008314 <vPortExitCritical>
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000f4c 	.word	0x20000f4c
 8007630:	20000f60 	.word	0x20000f60

08007634 <vTaskMissedYield>:
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
 8007638:	4b03      	ldr	r3, [pc, #12]	; (8007648 <vTaskMissedYield+0x14>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	bf00      	nop
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000f5c 	.word	0x20000f5c

0800764c <prvIdleTask>:
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	f000 f852 	bl	80076fc <prvCheckTasksWaitingTermination>
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvIdleTask+0x28>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d9f9      	bls.n	8007654 <prvIdleTask+0x8>
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <prvIdleTask+0x2c>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	e7f0      	b.n	8007654 <prvIdleTask+0x8>
 8007672:	bf00      	nop
 8007674:	20000a78 	.word	0x20000a78
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <prvInitialiseTaskLists>:
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	e00c      	b.n	80076a2 <prvInitialiseTaskLists+0x26>
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a12      	ldr	r2, [pc, #72]	; (80076dc <prvInitialiseTaskLists+0x60>)
 8007694:	4413      	add	r3, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fca6 	bl	8005fe8 <vListInitialise>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3301      	adds	r3, #1
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b37      	cmp	r3, #55	; 0x37
 80076a6:	d9ef      	bls.n	8007688 <prvInitialiseTaskLists+0xc>
 80076a8:	480d      	ldr	r0, [pc, #52]	; (80076e0 <prvInitialiseTaskLists+0x64>)
 80076aa:	f7fe fc9d 	bl	8005fe8 <vListInitialise>
 80076ae:	480d      	ldr	r0, [pc, #52]	; (80076e4 <prvInitialiseTaskLists+0x68>)
 80076b0:	f7fe fc9a 	bl	8005fe8 <vListInitialise>
 80076b4:	480c      	ldr	r0, [pc, #48]	; (80076e8 <prvInitialiseTaskLists+0x6c>)
 80076b6:	f7fe fc97 	bl	8005fe8 <vListInitialise>
 80076ba:	480c      	ldr	r0, [pc, #48]	; (80076ec <prvInitialiseTaskLists+0x70>)
 80076bc:	f7fe fc94 	bl	8005fe8 <vListInitialise>
 80076c0:	480b      	ldr	r0, [pc, #44]	; (80076f0 <prvInitialiseTaskLists+0x74>)
 80076c2:	f7fe fc91 	bl	8005fe8 <vListInitialise>
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvInitialiseTaskLists+0x78>)
 80076c8:	4a05      	ldr	r2, [pc, #20]	; (80076e0 <prvInitialiseTaskLists+0x64>)
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <prvInitialiseTaskLists+0x7c>)
 80076ce:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <prvInitialiseTaskLists+0x68>)
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000a78 	.word	0x20000a78
 80076e0:	20000ed8 	.word	0x20000ed8
 80076e4:	20000eec 	.word	0x20000eec
 80076e8:	20000f08 	.word	0x20000f08
 80076ec:	20000f1c 	.word	0x20000f1c
 80076f0:	20000f34 	.word	0x20000f34
 80076f4:	20000f00 	.word	0x20000f00
 80076f8:	20000f04 	.word	0x20000f04

080076fc <prvCheckTasksWaitingTermination>:
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	e019      	b.n	8007738 <prvCheckTasksWaitingTermination+0x3c>
 8007704:	f000 fdd6 	bl	80082b4 <vPortEnterCritical>
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <prvCheckTasksWaitingTermination+0x50>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3304      	adds	r3, #4
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fcf1 	bl	80060fc <uxListRemove>
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <prvCheckTasksWaitingTermination+0x54>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3b01      	subs	r3, #1
 8007720:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <prvCheckTasksWaitingTermination+0x54>)
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <prvCheckTasksWaitingTermination+0x58>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	4a0a      	ldr	r2, [pc, #40]	; (8007754 <prvCheckTasksWaitingTermination+0x58>)
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	f000 fdf1 	bl	8008314 <vPortExitCritical>
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f810 	bl	8007758 <prvDeleteTCB>
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <prvCheckTasksWaitingTermination+0x58>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e1      	bne.n	8007704 <prvCheckTasksWaitingTermination+0x8>
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000f1c 	.word	0x20000f1c
 8007750:	20000f48 	.word	0x20000f48
 8007754:	20000f30 	.word	0x20000f30

08007758 <prvDeleteTCB>:
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	335c      	adds	r3, #92	; 0x5c
 8007764:	4618      	mov	r0, r3
 8007766:	f001 f8b9 	bl	80088dc <_reclaim_reent>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <prvDeleteTCB+0x2e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	4618      	mov	r0, r3
 800777a:	f000 ff89 	bl	8008690 <vPortFree>
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 ff86 	bl	8008690 <vPortFree>
 8007784:	e018      	b.n	80077b8 <prvDeleteTCB+0x60>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800778c:	2b01      	cmp	r3, #1
 800778e:	d103      	bne.n	8007798 <prvDeleteTCB+0x40>
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 ff7d 	bl	8008690 <vPortFree>
 8007796:	e00f      	b.n	80077b8 <prvDeleteTCB+0x60>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d00a      	beq.n	80077b8 <prvDeleteTCB+0x60>
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <prvDeleteTCB+0x5e>
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <prvResetNextTaskUnblockTime>:
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <prvResetNextTaskUnblockTime+0x38>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <prvResetNextTaskUnblockTime+0x1a>
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvResetNextTaskUnblockTime+0x3c>)
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e008      	b.n	80077ec <prvResetNextTaskUnblockTime+0x2c>
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <prvResetNextTaskUnblockTime+0x38>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <prvResetNextTaskUnblockTime+0x3c>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	20000f00 	.word	0x20000f00
 80077fc:	20000f68 	.word	0x20000f68

08007800 <xTaskGetSchedulerState>:
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <xTaskGetSchedulerState+0x34>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <xTaskGetSchedulerState+0x14>
 800780e:	2301      	movs	r3, #1
 8007810:	607b      	str	r3, [r7, #4]
 8007812:	e008      	b.n	8007826 <xTaskGetSchedulerState+0x26>
 8007814:	4b08      	ldr	r3, [pc, #32]	; (8007838 <xTaskGetSchedulerState+0x38>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <xTaskGetSchedulerState+0x22>
 800781c:	2302      	movs	r3, #2
 800781e:	607b      	str	r3, [r7, #4]
 8007820:	e001      	b.n	8007826 <xTaskGetSchedulerState+0x26>
 8007822:	2300      	movs	r3, #0
 8007824:	607b      	str	r3, [r7, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	20000f54 	.word	0x20000f54
 8007838:	20000f70 	.word	0x20000f70

0800783c <xTaskPriorityDisinherit>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d056      	beq.n	8007900 <xTaskPriorityDisinherit+0xc4>
 8007852:	4b2e      	ldr	r3, [pc, #184]	; (800790c <xTaskPriorityDisinherit+0xd0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	429a      	cmp	r2, r3
 800785a:	d00a      	beq.n	8007872 <xTaskPriorityDisinherit+0x36>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xTaskPriorityDisinherit+0x34>
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <xTaskPriorityDisinherit+0x54>
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <xTaskPriorityDisinherit+0x52>
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007894:	1e5a      	subs	r2, r3, #1
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d02c      	beq.n	8007900 <xTaskPriorityDisinherit+0xc4>
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d128      	bne.n	8007900 <xTaskPriorityDisinherit+0xc4>
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fc22 	bl	80060fc <uxListRemove>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	619a      	str	r2, [r3, #24]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <xTaskPriorityDisinherit+0xd4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d903      	bls.n	80078e0 <xTaskPriorityDisinherit+0xa4>
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	4a0c      	ldr	r2, [pc, #48]	; (8007910 <xTaskPriorityDisinherit+0xd4>)
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4a09      	ldr	r2, [pc, #36]	; (8007914 <xTaskPriorityDisinherit+0xd8>)
 80078ee:	441a      	add	r2, r3
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe fba3 	bl	8006042 <vListInsertEnd>
 80078fc:	2301      	movs	r3, #1
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000a74 	.word	0x20000a74
 8007910:	20000f50 	.word	0x20000f50
 8007914:	20000a78 	.word	0x20000a78

08007918 <prvAddCurrentTaskToDelayedList>:
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	4b21      	ldr	r3, [pc, #132]	; (80079a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	4b20      	ldr	r3, [pc, #128]	; (80079ac <prvAddCurrentTaskToDelayedList+0x94>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3304      	adds	r3, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fbe4 	bl	80060fc <uxListRemove>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d10a      	bne.n	8007952 <prvAddCurrentTaskToDelayedList+0x3a>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <prvAddCurrentTaskToDelayedList+0x3a>
 8007942:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4819      	ldr	r0, [pc, #100]	; (80079b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800794c:	f7fe fb79 	bl	8006042 <vListInsertEnd>
 8007950:	e026      	b.n	80079a0 <prvAddCurrentTaskToDelayedList+0x88>
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4413      	add	r3, r2
 8007958:	60bb      	str	r3, [r7, #8]
 800795a:	4b14      	ldr	r3, [pc, #80]	; (80079ac <prvAddCurrentTaskToDelayedList+0x94>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d209      	bcs.n	800797e <prvAddCurrentTaskToDelayedList+0x66>
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f7fe fb87 	bl	800608a <vListInsert>
 800797c:	e010      	b.n	80079a0 <prvAddCurrentTaskToDelayedList+0x88>
 800797e:	4b0e      	ldr	r3, [pc, #56]	; (80079b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f7fe fb7d 	bl	800608a <vListInsert>
 8007990:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d202      	bcs.n	80079a0 <prvAddCurrentTaskToDelayedList+0x88>
 800799a:	4a08      	ldr	r2, [pc, #32]	; (80079bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000f4c 	.word	0x20000f4c
 80079ac:	20000a74 	.word	0x20000a74
 80079b0:	20000f34 	.word	0x20000f34
 80079b4:	20000f04 	.word	0x20000f04
 80079b8:	20000f00 	.word	0x20000f00
 80079bc:	20000f68 	.word	0x20000f68

080079c0 <xTimerCreateTimerTask>:
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af04      	add	r7, sp, #16
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	f000 fb07 	bl	8007fdc <prvCheckForValidListAndQueue>
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <xTimerCreateTimerTask+0x80>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d021      	beq.n	8007a1a <xTimerCreateTimerTask+0x5a>
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	1d3a      	adds	r2, r7, #4
 80079e0:	f107 0108 	add.w	r1, r7, #8
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fae3 	bl	8005fb4 <vApplicationGetTimerTaskMemory>
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	9202      	str	r2, [sp, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	2302      	movs	r3, #2
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	2300      	movs	r3, #0
 80079fe:	460a      	mov	r2, r1
 8007a00:	4910      	ldr	r1, [pc, #64]	; (8007a44 <xTimerCreateTimerTask+0x84>)
 8007a02:	4811      	ldr	r0, [pc, #68]	; (8007a48 <xTimerCreateTimerTask+0x88>)
 8007a04:	f7ff f890 	bl	8006b28 <xTaskCreateStatic>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4a10      	ldr	r2, [pc, #64]	; (8007a4c <xTimerCreateTimerTask+0x8c>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <xTimerCreateTimerTask+0x8c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <xTimerCreateTimerTask+0x5a>
 8007a16:	2301      	movs	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xTimerCreateTimerTask+0x76>
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xTimerCreateTimerTask+0x74>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000fac 	.word	0x20000fac
 8007a44:	08009d30 	.word	0x08009d30
 8007a48:	08007b85 	.word	0x08007b85
 8007a4c:	20000fb0 	.word	0x20000fb0

08007a50 <xTimerGenericCommand>:
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	; 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <xTimerGenericCommand+0x2e>
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	623b      	str	r3, [r7, #32]
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xTimerGenericCommand+0x2c>
 8007a7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <xTimerGenericCommand+0x98>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d02a      	beq.n	8007adc <xTimerGenericCommand+0x8c>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	dc18      	bgt.n	8007aca <xTimerGenericCommand+0x7a>
 8007a98:	f7ff feb2 	bl	8007800 <xTaskGetSchedulerState>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d109      	bne.n	8007ab6 <xTimerGenericCommand+0x66>
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <xTimerGenericCommand+0x98>)
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	f107 0110 	add.w	r1, r7, #16
 8007aaa:	2300      	movs	r3, #0
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	f7fe fc53 	bl	8006358 <xQueueGenericSend>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ab4:	e012      	b.n	8007adc <xTimerGenericCommand+0x8c>
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <xTimerGenericCommand+0x98>)
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f107 0110 	add.w	r1, r7, #16
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f7fe fc49 	bl	8006358 <xQueueGenericSend>
 8007ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8007ac8:	e008      	b.n	8007adc <xTimerGenericCommand+0x8c>
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <xTimerGenericCommand+0x98>)
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	f107 0110 	add.w	r1, r7, #16
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	f7fe fd3d 	bl	8006554 <xQueueGenericSendFromISR>
 8007ada:	6278      	str	r0, [r7, #36]	; 0x24
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3728      	adds	r7, #40	; 0x28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000fac 	.word	0x20000fac

08007aec <prvProcessExpiredTimer>:
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	4b22      	ldr	r3, [pc, #136]	; (8007b80 <prvProcessExpiredTimer+0x94>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe faf9 	bl	80060fc <uxListRemove>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d022      	beq.n	8007b5e <prvProcessExpiredTimer+0x72>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	18d1      	adds	r1, r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	6978      	ldr	r0, [r7, #20]
 8007b26:	f000 f8d1 	bl	8007ccc <prvInsertTimerInActiveList>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01f      	beq.n	8007b70 <prvProcessExpiredTimer+0x84>
 8007b30:	2300      	movs	r3, #0
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6978      	ldr	r0, [r7, #20]
 8007b3c:	f7ff ff88 	bl	8007a50 <xTimerGenericCommand>
 8007b40:	6138      	str	r0, [r7, #16]
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d113      	bne.n	8007b70 <prvProcessExpiredTimer+0x84>
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <prvProcessExpiredTimer+0x70>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	6978      	ldr	r0, [r7, #20]
 8007b76:	4798      	blx	r3
 8007b78:	bf00      	nop
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000fa4 	.word	0x20000fa4

08007b84 <prvTimerTask>:
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	f107 0308 	add.w	r3, r7, #8
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 f857 	bl	8007c44 <prvGetNextExpireTime>
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f803 	bl	8007ba8 <prvProcessTimerOrBlockTask>
 8007ba2:	f000 f8d5 	bl	8007d50 <prvProcessReceivedCommands>
 8007ba6:	e7f1      	b.n	8007b8c <prvTimerTask+0x8>

08007ba8 <prvProcessTimerOrBlockTask>:
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	f7ff fa1d 	bl	8006ff0 <vTaskSuspendAll>
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f866 	bl	8007c8c <prvSampleTimeNow>
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d130      	bne.n	8007c2a <prvProcessTimerOrBlockTask+0x82>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <prvProcessTimerOrBlockTask+0x3c>
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d806      	bhi.n	8007be4 <prvProcessTimerOrBlockTask+0x3c>
 8007bd6:	f7ff fa19 	bl	800700c <xTaskResumeAll>
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff85 	bl	8007aec <prvProcessExpiredTimer>
 8007be2:	e024      	b.n	8007c2e <prvProcessTimerOrBlockTask+0x86>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d008      	beq.n	8007bfc <prvProcessTimerOrBlockTask+0x54>
 8007bea:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <prvProcessTimerOrBlockTask+0x90>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <prvProcessTimerOrBlockTask+0x50>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <prvProcessTimerOrBlockTask+0x52>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <prvProcessTimerOrBlockTask+0x94>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7fe ff59 	bl	8006ac0 <vQueueWaitForMessageRestricted>
 8007c0e:	f7ff f9fd 	bl	800700c <xTaskResumeAll>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <prvProcessTimerOrBlockTask+0x86>
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <prvProcessTimerOrBlockTask+0x98>)
 8007c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	e001      	b.n	8007c2e <prvProcessTimerOrBlockTask+0x86>
 8007c2a:	f7ff f9ef 	bl	800700c <xTaskResumeAll>
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20000fa8 	.word	0x20000fa8
 8007c3c:	20000fac 	.word	0x20000fac
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <prvGetNextExpireTime>:
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <prvGetNextExpireTime+0x44>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <prvGetNextExpireTime+0x16>
 8007c56:	2201      	movs	r2, #1
 8007c58:	e000      	b.n	8007c5c <prvGetNextExpireTime+0x18>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d105      	bne.n	8007c74 <prvGetNextExpireTime+0x30>
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <prvGetNextExpireTime+0x44>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e001      	b.n	8007c78 <prvGetNextExpireTime+0x34>
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000fa4 	.word	0x20000fa4

08007c8c <prvSampleTimeNow>:
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	f7ff fa58 	bl	8007148 <xTaskGetTickCount>
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <prvSampleTimeNow+0x3c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d205      	bcs.n	8007cb0 <prvSampleTimeNow+0x24>
 8007ca4:	f000 f936 	bl	8007f14 <prvSwitchTimerLists>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e002      	b.n	8007cb6 <prvSampleTimeNow+0x2a>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	4a04      	ldr	r2, [pc, #16]	; (8007cc8 <prvSampleTimeNow+0x3c>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000fb4 	.word	0x20000fb4

08007ccc <prvInsertTimerInActiveList>:
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	611a      	str	r2, [r3, #16]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d812      	bhi.n	8007d18 <prvInsertTimerInActiveList+0x4c>
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <prvInsertTimerInActiveList+0x3a>
 8007d00:	2301      	movs	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	e01b      	b.n	8007d3e <prvInsertTimerInActiveList+0x72>
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <prvInsertTimerInActiveList+0x7c>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe f9ba 	bl	800608a <vListInsert>
 8007d16:	e012      	b.n	8007d3e <prvInsertTimerInActiveList+0x72>
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d206      	bcs.n	8007d2e <prvInsertTimerInActiveList+0x62>
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d302      	bcc.n	8007d2e <prvInsertTimerInActiveList+0x62>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	e007      	b.n	8007d3e <prvInsertTimerInActiveList+0x72>
 8007d2e:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <prvInsertTimerInActiveList+0x80>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3304      	adds	r3, #4
 8007d36:	4619      	mov	r1, r3
 8007d38:	4610      	mov	r0, r2
 8007d3a:	f7fe f9a6 	bl	800608a <vListInsert>
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000fa8 	.word	0x20000fa8
 8007d4c:	20000fa4 	.word	0x20000fa4

08007d50 <prvProcessReceivedCommands>:
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08e      	sub	sp, #56	; 0x38
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	e0ca      	b.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da18      	bge.n	8007d90 <prvProcessReceivedCommands+0x40>
 8007d5e:	1d3b      	adds	r3, r7, #4
 8007d60:	3304      	adds	r3, #4
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <prvProcessReceivedCommands+0x30>
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <prvProcessReceivedCommands+0x2e>
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d86:	6850      	ldr	r0, [r2, #4]
 8007d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d8a:	6892      	ldr	r2, [r2, #8]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4798      	blx	r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f2c0 80ab 	blt.w	8007eee <prvProcessReceivedCommands+0x19e>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <prvProcessReceivedCommands+0x5e>
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe f9a7 	bl	80060fc <uxListRemove>
 8007dae:	463b      	mov	r3, r7
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff ff6b 	bl	8007c8c <prvSampleTimeNow>
 8007db6:	6278      	str	r0, [r7, #36]	; 0x24
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	f200 8096 	bhi.w	8007eec <prvProcessReceivedCommands+0x19c>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <prvProcessReceivedCommands+0x78>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007df1 	.word	0x08007df1
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df1 	.word	0x08007df1
 8007dd4:	08007e65 	.word	0x08007e65
 8007dd8:	08007e79 	.word	0x08007e79
 8007ddc:	08007ec3 	.word	0x08007ec3
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007df1 	.word	0x08007df1
 8007de8:	08007e65 	.word	0x08007e65
 8007dec:	08007e79 	.word	0x08007e79
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	18d1      	adds	r1, r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e10:	f7ff ff5c 	bl	8007ccc <prvInsertTimerInActiveList>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d069      	beq.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e20:	4798      	blx	r3
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d05e      	beq.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	441a      	add	r2, r3
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2100      	movs	r1, #0
 8007e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e42:	f7ff fe05 	bl	8007a50 <xTimerGenericCommand>
 8007e46:	6238      	str	r0, [r7, #32]
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d14f      	bne.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <prvProcessReceivedCommands+0x112>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e6a:	f023 0301 	bic.w	r3, r3, #1
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007e76:	e03a      	b.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	619a      	str	r2, [r3, #24]
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <prvProcessReceivedCommands+0x15e>
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <prvProcessReceivedCommands+0x15c>
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	18d1      	adds	r1, r2, r3
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ebc:	f7ff ff06 	bl	8007ccc <prvInsertTimerInActiveList>
 8007ec0:	e015      	b.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <prvProcessReceivedCommands+0x188>
 8007ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed2:	f000 fbdd 	bl	8008690 <vPortFree>
 8007ed6:	e00a      	b.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007eea:	e000      	b.n	8007eee <prvProcessReceivedCommands+0x19e>
 8007eec:	bf00      	nop
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <prvProcessReceivedCommands+0x1c0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	1d39      	adds	r1, r7, #4
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fbc8 	bl	800668c <xQueueReceive>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f47f af2a 	bne.w	8007d58 <prvProcessReceivedCommands+0x8>
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	3730      	adds	r7, #48	; 0x30
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000fac 	.word	0x20000fac

08007f14 <prvSwitchTimerLists>:
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	e048      	b.n	8007fae <prvSwitchTimerLists+0x9a>
 8007f1c:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fe f8e1 	bl	80060fc <uxListRemove>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	4798      	blx	r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d02e      	beq.n	8007fae <prvSwitchTimerLists+0x9a>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4413      	add	r3, r2
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d90e      	bls.n	8007f80 <prvSwitchTimerLists+0x6c>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	605a      	str	r2, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	611a      	str	r2, [r3, #16]
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3304      	adds	r3, #4
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f7fe f886 	bl	800608a <vListInsert>
 8007f7e:	e016      	b.n	8007fae <prvSwitchTimerLists+0x9a>
 8007f80:	2300      	movs	r3, #0
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff fd60 	bl	8007a50 <xTimerGenericCommand>
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <prvSwitchTimerLists+0x9a>
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <prvSwitchTimerLists+0x98>
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1b1      	bne.n	8007f1c <prvSwitchTimerLists+0x8>
 8007fb8:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvSwitchTimerLists+0xc4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a04      	ldr	r2, [pc, #16]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4a04      	ldr	r2, [pc, #16]	; (8007fd8 <prvSwitchTimerLists+0xc4>)
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20000fa4 	.word	0x20000fa4
 8007fd8:	20000fa8 	.word	0x20000fa8

08007fdc <prvCheckForValidListAndQueue>:
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	f000 f967 	bl	80082b4 <vPortEnterCritical>
 8007fe6:	4b15      	ldr	r3, [pc, #84]	; (800803c <prvCheckForValidListAndQueue+0x60>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d120      	bne.n	8008030 <prvCheckForValidListAndQueue+0x54>
 8007fee:	4814      	ldr	r0, [pc, #80]	; (8008040 <prvCheckForValidListAndQueue+0x64>)
 8007ff0:	f7fd fffa 	bl	8005fe8 <vListInitialise>
 8007ff4:	4813      	ldr	r0, [pc, #76]	; (8008044 <prvCheckForValidListAndQueue+0x68>)
 8007ff6:	f7fd fff7 	bl	8005fe8 <vListInitialise>
 8007ffa:	4b13      	ldr	r3, [pc, #76]	; (8008048 <prvCheckForValidListAndQueue+0x6c>)
 8007ffc:	4a10      	ldr	r2, [pc, #64]	; (8008040 <prvCheckForValidListAndQueue+0x64>)
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	4b12      	ldr	r3, [pc, #72]	; (800804c <prvCheckForValidListAndQueue+0x70>)
 8008002:	4a10      	ldr	r2, [pc, #64]	; (8008044 <prvCheckForValidListAndQueue+0x68>)
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	2300      	movs	r3, #0
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	4b11      	ldr	r3, [pc, #68]	; (8008050 <prvCheckForValidListAndQueue+0x74>)
 800800c:	4a11      	ldr	r2, [pc, #68]	; (8008054 <prvCheckForValidListAndQueue+0x78>)
 800800e:	2110      	movs	r1, #16
 8008010:	200a      	movs	r0, #10
 8008012:	f7fe f905 	bl	8006220 <xQueueGenericCreateStatic>
 8008016:	4603      	mov	r3, r0
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <prvCheckForValidListAndQueue+0x60>)
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	4b07      	ldr	r3, [pc, #28]	; (800803c <prvCheckForValidListAndQueue+0x60>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <prvCheckForValidListAndQueue+0x54>
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <prvCheckForValidListAndQueue+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	490b      	ldr	r1, [pc, #44]	; (8008058 <prvCheckForValidListAndQueue+0x7c>)
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fd1e 	bl	8006a6c <vQueueAddToRegistry>
 8008030:	f000 f970 	bl	8008314 <vPortExitCritical>
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000fac 	.word	0x20000fac
 8008040:	20000f7c 	.word	0x20000f7c
 8008044:	20000f90 	.word	0x20000f90
 8008048:	20000fa4 	.word	0x20000fa4
 800804c:	20000fa8 	.word	0x20000fa8
 8008050:	20001058 	.word	0x20001058
 8008054:	20000fb8 	.word	0x20000fb8
 8008058:	08009d38 	.word	0x08009d38

0800805c <pxPortInitialiseStack>:
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3b04      	subs	r3, #4
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b04      	subs	r3, #4
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f023 0201 	bic.w	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3b04      	subs	r3, #4
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	4a0c      	ldr	r2, [pc, #48]	; (80080c0 <pxPortInitialiseStack+0x64>)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3b14      	subs	r3, #20
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f06f 0202 	mvn.w	r2, #2
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3b20      	subs	r3, #32
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	080080c5 	.word	0x080080c5

080080c4 <prvTaskExitError>:
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	607b      	str	r3, [r7, #4]
 80080ce:	4b12      	ldr	r3, [pc, #72]	; (8008118 <prvTaskExitError+0x54>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d6:	d00a      	beq.n	80080ee <prvTaskExitError+0x2a>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <prvTaskExitError+0x28>
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60bb      	str	r3, [r7, #8]
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0fc      	beq.n	8008104 <prvTaskExitError+0x40>
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20000010 	.word	0x20000010
 800811c:	00000000 	.word	0x00000000

08008120 <SVC_Handler>:
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <pxCurrentTCBConst2>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	f380 8809 	msr	PSP, r0
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	4770      	bx	lr
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst2>:
 8008140:	20000a74 	.word	0x20000a74
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <prvPortStartFirstTask>:
 8008148:	4808      	ldr	r0, [pc, #32]	; (800816c <prvPortStartFirstTask+0x24>)
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f380 8808 	msr	MSP, r0
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8814 	msr	CONTROL, r0
 800815a:	b662      	cpsie	i
 800815c:	b661      	cpsie	f
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	df00      	svc	0
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e000ed08 	.word	0xe000ed08

08008170 <xPortStartScheduler>:
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	4b46      	ldr	r3, [pc, #280]	; (8008290 <xPortStartScheduler+0x120>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a46      	ldr	r2, [pc, #280]	; (8008294 <xPortStartScheduler+0x124>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10a      	bne.n	8008196 <xPortStartScheduler+0x26>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xPortStartScheduler+0x24>
 8008196:	4b3e      	ldr	r3, [pc, #248]	; (8008290 <xPortStartScheduler+0x120>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a3f      	ldr	r2, [pc, #252]	; (8008298 <xPortStartScheduler+0x128>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10a      	bne.n	80081b6 <xPortStartScheduler+0x46>
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xPortStartScheduler+0x44>
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <xPortStartScheduler+0x12c>)
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	607b      	str	r3, [r7, #4]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	22ff      	movs	r2, #255	; 0xff
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	70fb      	strb	r3, [r7, #3]
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	4b31      	ldr	r3, [pc, #196]	; (80082a0 <xPortStartScheduler+0x130>)
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	4b31      	ldr	r3, [pc, #196]	; (80082a4 <xPortStartScheduler+0x134>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	e009      	b.n	80081fa <xPortStartScheduler+0x8a>
 80081e6:	4b2f      	ldr	r3, [pc, #188]	; (80082a4 <xPortStartScheduler+0x134>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	4a2d      	ldr	r2, [pc, #180]	; (80082a4 <xPortStartScheduler+0x134>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	70fb      	strb	r3, [r7, #3]
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008202:	2b80      	cmp	r3, #128	; 0x80
 8008204:	d0ef      	beq.n	80081e6 <xPortStartScheduler+0x76>
 8008206:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <xPortStartScheduler+0x134>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1c3 0307 	rsb	r3, r3, #7
 800820e:	2b04      	cmp	r3, #4
 8008210:	d00a      	beq.n	8008228 <xPortStartScheduler+0xb8>
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xPortStartScheduler+0xb6>
 8008228:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <xPortStartScheduler+0x134>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <xPortStartScheduler+0x134>)
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <xPortStartScheduler+0x134>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800823a:	4a1a      	ldr	r2, [pc, #104]	; (80082a4 <xPortStartScheduler+0x134>)
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	4b18      	ldr	r3, [pc, #96]	; (80082a8 <xPortStartScheduler+0x138>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <xPortStartScheduler+0x138>)
 800824c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <xPortStartScheduler+0x138>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a14      	ldr	r2, [pc, #80]	; (80082a8 <xPortStartScheduler+0x138>)
 8008258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	f000 f8dd 	bl	800841c <vPortSetupTimerInterrupt>
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <xPortStartScheduler+0x13c>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f000 f8fc 	bl	8008464 <vPortEnableVFP>
 800826c:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <xPortStartScheduler+0x140>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0f      	ldr	r2, [pc, #60]	; (80082b0 <xPortStartScheduler+0x140>)
 8008272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	f7ff ff66 	bl	8008148 <prvPortStartFirstTask>
 800827c:	f7ff f82e 	bl	80072dc <vTaskSwitchContext>
 8008280:	f7ff ff20 	bl	80080c4 <prvTaskExitError>
 8008284:	2300      	movs	r3, #0
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	e000ed00 	.word	0xe000ed00
 8008294:	410fc271 	.word	0x410fc271
 8008298:	410fc270 	.word	0x410fc270
 800829c:	e000e400 	.word	0xe000e400
 80082a0:	200010a8 	.word	0x200010a8
 80082a4:	200010ac 	.word	0x200010ac
 80082a8:	e000ed20 	.word	0xe000ed20
 80082ac:	20000010 	.word	0x20000010
 80082b0:	e000ef34 	.word	0xe000ef34

080082b4 <vPortEnterCritical>:
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	bf00      	nop
 80082ce:	4b0f      	ldr	r3, [pc, #60]	; (800830c <vPortEnterCritical+0x58>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	4a0d      	ldr	r2, [pc, #52]	; (800830c <vPortEnterCritical+0x58>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <vPortEnterCritical+0x58>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10f      	bne.n	8008300 <vPortEnterCritical+0x4c>
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <vPortEnterCritical+0x5c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <vPortEnterCritical+0x4c>
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <vPortEnterCritical+0x4a>
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	20000010 	.word	0x20000010
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <vPortExitCritical>:
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <vPortExitCritical+0x50>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <vPortExitCritical+0x24>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	607b      	str	r3, [r7, #4]
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <vPortExitCritical+0x22>
 8008338:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <vPortExitCritical+0x50>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3b01      	subs	r3, #1
 800833e:	4a09      	ldr	r2, [pc, #36]	; (8008364 <vPortExitCritical+0x50>)
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <vPortExitCritical+0x50>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <vPortExitCritical+0x42>
 800834a:	2300      	movs	r3, #0
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000010 	.word	0x20000010
	...

08008370 <PendSV_Handler>:
 8008370:	f3ef 8009 	mrs	r0, PSP
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <pxCurrentTCBConst>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f01e 0f10 	tst.w	lr, #16
 8008380:	bf08      	it	eq
 8008382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	6010      	str	r0, [r2, #0]
 800838c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008394:	f380 8811 	msr	BASEPRI, r0
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f7fe ff9c 	bl	80072dc <vTaskSwitchContext>
 80083a4:	f04f 0000 	mov.w	r0, #0
 80083a8:	f380 8811 	msr	BASEPRI, r0
 80083ac:	bc09      	pop	{r0, r3}
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	6808      	ldr	r0, [r1, #0]
 80083b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b6:	f01e 0f10 	tst.w	lr, #16
 80083ba:	bf08      	it	eq
 80083bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083c0:	f380 8809 	msr	PSP, r0
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst>:
 80083d0:	20000a74 	.word	0x20000a74
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <xPortSysTickHandler>:
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	bf00      	nop
 80083f2:	f7fe feb9 	bl	8007168 <xTaskIncrementTick>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <xPortSysTickHandler+0x2c>
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <xPortSysTickHandler+0x40>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	bf00      	nop
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortSetupTimerInterrupt>:
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <vPortSetupTimerInterrupt+0x38>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <vPortSetupTimerInterrupt+0x3c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0a      	ldr	r2, [pc, #40]	; (800845c <vPortSetupTimerInterrupt+0x40>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	099b      	lsrs	r3, r3, #6
 8008438:	4a09      	ldr	r2, [pc, #36]	; (8008460 <vPortSetupTimerInterrupt+0x44>)
 800843a:	3b01      	subs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	4b04      	ldr	r3, [pc, #16]	; (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	bf00      	nop
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	e000e010 	.word	0xe000e010
 8008454:	e000e018 	.word	0xe000e018
 8008458:	20000004 	.word	0x20000004
 800845c:	10624dd3 	.word	0x10624dd3
 8008460:	e000e014 	.word	0xe000e014

08008464 <vPortEnableVFP>:
 8008464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008474 <vPortEnableVFP+0x10>
 8008468:	6801      	ldr	r1, [r0, #0]
 800846a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800846e:	6001      	str	r1, [r0, #0]
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	e000ed88 	.word	0xe000ed88

08008478 <vPortValidateInterruptPriority>:
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	f3ef 8305 	mrs	r3, IPSR
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b0f      	cmp	r3, #15
 8008488:	d914      	bls.n	80084b4 <vPortValidateInterruptPriority+0x3c>
 800848a:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <vPortValidateInterruptPriority+0x70>)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	72fb      	strb	r3, [r7, #11]
 8008494:	4b15      	ldr	r3, [pc, #84]	; (80084ec <vPortValidateInterruptPriority+0x74>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	7afa      	ldrb	r2, [r7, #11]
 800849a:	429a      	cmp	r2, r3
 800849c:	d20a      	bcs.n	80084b4 <vPortValidateInterruptPriority+0x3c>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	607b      	str	r3, [r7, #4]
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <vPortValidateInterruptPriority+0x3a>
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <vPortValidateInterruptPriority+0x78>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084bc:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <vPortValidateInterruptPriority+0x7c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d90a      	bls.n	80084da <vPortValidateInterruptPriority+0x62>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <vPortValidateInterruptPriority+0x60>
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	e000e3f0 	.word	0xe000e3f0
 80084ec:	200010a8 	.word	0x200010a8
 80084f0:	e000ed0c 	.word	0xe000ed0c
 80084f4:	200010ac 	.word	0x200010ac

080084f8 <pvPortMalloc>:
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]
 8008504:	f7fe fd74 	bl	8006ff0 <vTaskSuspendAll>
 8008508:	4b5b      	ldr	r3, [pc, #364]	; (8008678 <pvPortMalloc+0x180>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <pvPortMalloc+0x1c>
 8008510:	f000 f920 	bl	8008754 <prvHeapInit>
 8008514:	4b59      	ldr	r3, [pc, #356]	; (800867c <pvPortMalloc+0x184>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 8093 	bne.w	8008648 <pvPortMalloc+0x150>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01d      	beq.n	8008564 <pvPortMalloc+0x6c>
 8008528:	2208      	movs	r2, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	2b00      	cmp	r3, #0
 8008538:	d014      	beq.n	8008564 <pvPortMalloc+0x6c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f023 0307 	bic.w	r3, r3, #7
 8008540:	3308      	adds	r3, #8
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <pvPortMalloc+0x6c>
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <pvPortMalloc+0x6a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d06e      	beq.n	8008648 <pvPortMalloc+0x150>
 800856a:	4b45      	ldr	r3, [pc, #276]	; (8008680 <pvPortMalloc+0x188>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d869      	bhi.n	8008648 <pvPortMalloc+0x150>
 8008574:	4b43      	ldr	r3, [pc, #268]	; (8008684 <pvPortMalloc+0x18c>)
 8008576:	623b      	str	r3, [r7, #32]
 8008578:	4b42      	ldr	r3, [pc, #264]	; (8008684 <pvPortMalloc+0x18c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
 800857e:	e004      	b.n	800858a <pvPortMalloc+0x92>
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	623b      	str	r3, [r7, #32]
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <pvPortMalloc+0xa4>
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f1      	bne.n	8008580 <pvPortMalloc+0x88>
 800859c:	4b36      	ldr	r3, [pc, #216]	; (8008678 <pvPortMalloc+0x180>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d050      	beq.n	8008648 <pvPortMalloc+0x150>
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2208      	movs	r2, #8
 80085ac:	4413      	add	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	2308      	movs	r3, #8
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d91f      	bls.n	8008608 <pvPortMalloc+0x110>
 80085c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <pvPortMalloc+0xf8>
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <pvPortMalloc+0xf6>
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	605a      	str	r2, [r3, #4]
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]
 8008602:	69b8      	ldr	r0, [r7, #24]
 8008604:	f000 f908 	bl	8008818 <prvInsertBlockIntoFreeList>
 8008608:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <pvPortMalloc+0x188>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <pvPortMalloc+0x188>)
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <pvPortMalloc+0x188>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <pvPortMalloc+0x190>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d203      	bcs.n	800862a <pvPortMalloc+0x132>
 8008622:	4b17      	ldr	r3, [pc, #92]	; (8008680 <pvPortMalloc+0x188>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <pvPortMalloc+0x190>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	4b13      	ldr	r3, [pc, #76]	; (800867c <pvPortMalloc+0x184>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	431a      	orrs	r2, r3
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	605a      	str	r2, [r3, #4]
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <pvPortMalloc+0x194>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	4a11      	ldr	r2, [pc, #68]	; (800868c <pvPortMalloc+0x194>)
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	f7fe fce0 	bl	800700c <xTaskResumeAll>
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <pvPortMalloc+0x174>
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <pvPortMalloc+0x172>
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	4618      	mov	r0, r3
 8008670:	3728      	adds	r7, #40	; 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20004cb8 	.word	0x20004cb8
 800867c:	20004ccc 	.word	0x20004ccc
 8008680:	20004cbc 	.word	0x20004cbc
 8008684:	20004cb0 	.word	0x20004cb0
 8008688:	20004cc0 	.word	0x20004cc0
 800868c:	20004cc4 	.word	0x20004cc4

08008690 <vPortFree>:
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d04d      	beq.n	800873e <vPortFree+0xae>
 80086a2:	2308      	movs	r3, #8
 80086a4:	425b      	negs	r3, r3
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	613b      	str	r3, [r7, #16]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	4b24      	ldr	r3, [pc, #144]	; (8008748 <vPortFree+0xb8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <vPortFree+0x44>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <vPortFree+0x42>
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <vPortFree+0x62>
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vPortFree+0x60>
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <vPortFree+0xb8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01e      	beq.n	800873e <vPortFree+0xae>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11a      	bne.n	800873e <vPortFree+0xae>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <vPortFree+0xb8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	43db      	mvns	r3, r3
 8008712:	401a      	ands	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	f7fe fc6a 	bl	8006ff0 <vTaskSuspendAll>
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <vPortFree+0xbc>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4413      	add	r3, r2
 8008726:	4a09      	ldr	r2, [pc, #36]	; (800874c <vPortFree+0xbc>)
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f000 f874 	bl	8008818 <prvInsertBlockIntoFreeList>
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <vPortFree+0xc0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a06      	ldr	r2, [pc, #24]	; (8008750 <vPortFree+0xc0>)
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	f7fe fc67 	bl	800700c <xTaskResumeAll>
 800873e:	bf00      	nop
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20004ccc 	.word	0x20004ccc
 800874c:	20004cbc 	.word	0x20004cbc
 8008750:	20004cc8 	.word	0x20004cc8

08008754 <prvHeapInit>:
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800875e:	60bb      	str	r3, [r7, #8]
 8008760:	4b27      	ldr	r3, [pc, #156]	; (8008800 <prvHeapInit+0xac>)
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00c      	beq.n	8008788 <prvHeapInit+0x34>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3307      	adds	r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <prvHeapInit+0xac>)
 8008784:	4413      	add	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	607b      	str	r3, [r7, #4]
 800878c:	4a1d      	ldr	r2, [pc, #116]	; (8008804 <prvHeapInit+0xb0>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <prvHeapInit+0xb0>)
 8008794:	2200      	movs	r2, #0
 8008796:	605a      	str	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	2208      	movs	r2, #8
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a15      	ldr	r2, [pc, #84]	; (8008808 <prvHeapInit+0xb4>)
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	4b14      	ldr	r3, [pc, #80]	; (8008808 <prvHeapInit+0xb4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <prvHeapInit+0xb4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <prvHeapInit+0xb4>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <prvHeapInit+0xb8>)
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <prvHeapInit+0xbc>)
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <prvHeapInit+0xc0>)
 80087ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	200010b0 	.word	0x200010b0
 8008804:	20004cb0 	.word	0x20004cb0
 8008808:	20004cb8 	.word	0x20004cb8
 800880c:	20004cc0 	.word	0x20004cc0
 8008810:	20004cbc 	.word	0x20004cbc
 8008814:	20004ccc 	.word	0x20004ccc

08008818 <prvInsertBlockIntoFreeList>:
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <prvInsertBlockIntoFreeList+0xac>)
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e002      	b.n	800882c <prvInsertBlockIntoFreeList+0x14>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d8f7      	bhi.n	8008826 <prvInsertBlockIntoFreeList+0xe>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d108      	bne.n	800885a <prvInsertBlockIntoFreeList+0x42>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	441a      	add	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d118      	bne.n	80088a0 <prvInsertBlockIntoFreeList+0x88>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d00d      	beq.n	8008896 <prvInsertBlockIntoFreeList+0x7e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e008      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e003      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <prvInsertBlockIntoFreeList+0x9e>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20004cb0 	.word	0x20004cb0
 80088c8:	20004cb8 	.word	0x20004cb8

080088cc <memset>:
 80088cc:	4402      	add	r2, r0
 80088ce:	4603      	mov	r3, r0
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d100      	bne.n	80088d6 <memset+0xa>
 80088d4:	4770      	bx	lr
 80088d6:	f803 1b01 	strb.w	r1, [r3], #1
 80088da:	e7f9      	b.n	80088d0 <memset+0x4>

080088dc <_reclaim_reent>:
 80088dc:	4b29      	ldr	r3, [pc, #164]	; (8008984 <_reclaim_reent+0xa8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4283      	cmp	r3, r0
 80088e2:	b570      	push	{r4, r5, r6, lr}
 80088e4:	4604      	mov	r4, r0
 80088e6:	d04b      	beq.n	8008980 <_reclaim_reent+0xa4>
 80088e8:	69c3      	ldr	r3, [r0, #28]
 80088ea:	b143      	cbz	r3, 80088fe <_reclaim_reent+0x22>
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d144      	bne.n	800897c <_reclaim_reent+0xa0>
 80088f2:	69e3      	ldr	r3, [r4, #28]
 80088f4:	6819      	ldr	r1, [r3, #0]
 80088f6:	b111      	cbz	r1, 80088fe <_reclaim_reent+0x22>
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 f87f 	bl	80089fc <_free_r>
 80088fe:	6961      	ldr	r1, [r4, #20]
 8008900:	b111      	cbz	r1, 8008908 <_reclaim_reent+0x2c>
 8008902:	4620      	mov	r0, r4
 8008904:	f000 f87a 	bl	80089fc <_free_r>
 8008908:	69e1      	ldr	r1, [r4, #28]
 800890a:	b111      	cbz	r1, 8008912 <_reclaim_reent+0x36>
 800890c:	4620      	mov	r0, r4
 800890e:	f000 f875 	bl	80089fc <_free_r>
 8008912:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008914:	b111      	cbz	r1, 800891c <_reclaim_reent+0x40>
 8008916:	4620      	mov	r0, r4
 8008918:	f000 f870 	bl	80089fc <_free_r>
 800891c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800891e:	b111      	cbz	r1, 8008926 <_reclaim_reent+0x4a>
 8008920:	4620      	mov	r0, r4
 8008922:	f000 f86b 	bl	80089fc <_free_r>
 8008926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008928:	b111      	cbz	r1, 8008930 <_reclaim_reent+0x54>
 800892a:	4620      	mov	r0, r4
 800892c:	f000 f866 	bl	80089fc <_free_r>
 8008930:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008932:	b111      	cbz	r1, 800893a <_reclaim_reent+0x5e>
 8008934:	4620      	mov	r0, r4
 8008936:	f000 f861 	bl	80089fc <_free_r>
 800893a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800893c:	b111      	cbz	r1, 8008944 <_reclaim_reent+0x68>
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f85c 	bl	80089fc <_free_r>
 8008944:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008946:	b111      	cbz	r1, 800894e <_reclaim_reent+0x72>
 8008948:	4620      	mov	r0, r4
 800894a:	f000 f857 	bl	80089fc <_free_r>
 800894e:	6a23      	ldr	r3, [r4, #32]
 8008950:	b1b3      	cbz	r3, 8008980 <_reclaim_reent+0xa4>
 8008952:	4620      	mov	r0, r4
 8008954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008958:	4718      	bx	r3
 800895a:	5949      	ldr	r1, [r1, r5]
 800895c:	b941      	cbnz	r1, 8008970 <_reclaim_reent+0x94>
 800895e:	3504      	adds	r5, #4
 8008960:	69e3      	ldr	r3, [r4, #28]
 8008962:	2d80      	cmp	r5, #128	; 0x80
 8008964:	68d9      	ldr	r1, [r3, #12]
 8008966:	d1f8      	bne.n	800895a <_reclaim_reent+0x7e>
 8008968:	4620      	mov	r0, r4
 800896a:	f000 f847 	bl	80089fc <_free_r>
 800896e:	e7c0      	b.n	80088f2 <_reclaim_reent+0x16>
 8008970:	680e      	ldr	r6, [r1, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	f000 f842 	bl	80089fc <_free_r>
 8008978:	4631      	mov	r1, r6
 800897a:	e7ef      	b.n	800895c <_reclaim_reent+0x80>
 800897c:	2500      	movs	r5, #0
 800897e:	e7ef      	b.n	8008960 <_reclaim_reent+0x84>
 8008980:	bd70      	pop	{r4, r5, r6, pc}
 8008982:	bf00      	nop
 8008984:	20000060 	.word	0x20000060

08008988 <__errno>:
 8008988:	4b01      	ldr	r3, [pc, #4]	; (8008990 <__errno+0x8>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	20000060 	.word	0x20000060

08008994 <__libc_init_array>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	4d0d      	ldr	r5, [pc, #52]	; (80089cc <__libc_init_array+0x38>)
 8008998:	4c0d      	ldr	r4, [pc, #52]	; (80089d0 <__libc_init_array+0x3c>)
 800899a:	1b64      	subs	r4, r4, r5
 800899c:	10a4      	asrs	r4, r4, #2
 800899e:	2600      	movs	r6, #0
 80089a0:	42a6      	cmp	r6, r4
 80089a2:	d109      	bne.n	80089b8 <__libc_init_array+0x24>
 80089a4:	4d0b      	ldr	r5, [pc, #44]	; (80089d4 <__libc_init_array+0x40>)
 80089a6:	4c0c      	ldr	r4, [pc, #48]	; (80089d8 <__libc_init_array+0x44>)
 80089a8:	f001 f988 	bl	8009cbc <_init>
 80089ac:	1b64      	subs	r4, r4, r5
 80089ae:	10a4      	asrs	r4, r4, #2
 80089b0:	2600      	movs	r6, #0
 80089b2:	42a6      	cmp	r6, r4
 80089b4:	d105      	bne.n	80089c2 <__libc_init_array+0x2e>
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089bc:	4798      	blx	r3
 80089be:	3601      	adds	r6, #1
 80089c0:	e7ee      	b.n	80089a0 <__libc_init_array+0xc>
 80089c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c6:	4798      	blx	r3
 80089c8:	3601      	adds	r6, #1
 80089ca:	e7f2      	b.n	80089b2 <__libc_init_array+0x1e>
 80089cc:	08009e40 	.word	0x08009e40
 80089d0:	08009e40 	.word	0x08009e40
 80089d4:	08009e40 	.word	0x08009e40
 80089d8:	08009e44 	.word	0x08009e44

080089dc <__retarget_lock_acquire_recursive>:
 80089dc:	4770      	bx	lr

080089de <__retarget_lock_release_recursive>:
 80089de:	4770      	bx	lr

080089e0 <memcpy>:
 80089e0:	440a      	add	r2, r1
 80089e2:	4291      	cmp	r1, r2
 80089e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089e8:	d100      	bne.n	80089ec <memcpy+0xc>
 80089ea:	4770      	bx	lr
 80089ec:	b510      	push	{r4, lr}
 80089ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089f6:	4291      	cmp	r1, r2
 80089f8:	d1f9      	bne.n	80089ee <memcpy+0xe>
 80089fa:	bd10      	pop	{r4, pc}

080089fc <_free_r>:
 80089fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089fe:	2900      	cmp	r1, #0
 8008a00:	d044      	beq.n	8008a8c <_free_r+0x90>
 8008a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a06:	9001      	str	r0, [sp, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a0e:	bfb8      	it	lt
 8008a10:	18e4      	addlt	r4, r4, r3
 8008a12:	f000 f83f 	bl	8008a94 <__malloc_lock>
 8008a16:	4a1e      	ldr	r2, [pc, #120]	; (8008a90 <_free_r+0x94>)
 8008a18:	9801      	ldr	r0, [sp, #4]
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	b933      	cbnz	r3, 8008a2c <_free_r+0x30>
 8008a1e:	6063      	str	r3, [r4, #4]
 8008a20:	6014      	str	r4, [r2, #0]
 8008a22:	b003      	add	sp, #12
 8008a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a28:	f000 b83a 	b.w	8008aa0 <__malloc_unlock>
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d908      	bls.n	8008a42 <_free_r+0x46>
 8008a30:	6825      	ldr	r5, [r4, #0]
 8008a32:	1961      	adds	r1, r4, r5
 8008a34:	428b      	cmp	r3, r1
 8008a36:	bf01      	itttt	eq
 8008a38:	6819      	ldreq	r1, [r3, #0]
 8008a3a:	685b      	ldreq	r3, [r3, #4]
 8008a3c:	1949      	addeq	r1, r1, r5
 8008a3e:	6021      	streq	r1, [r4, #0]
 8008a40:	e7ed      	b.n	8008a1e <_free_r+0x22>
 8008a42:	461a      	mov	r2, r3
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	b10b      	cbz	r3, 8008a4c <_free_r+0x50>
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d9fa      	bls.n	8008a42 <_free_r+0x46>
 8008a4c:	6811      	ldr	r1, [r2, #0]
 8008a4e:	1855      	adds	r5, r2, r1
 8008a50:	42a5      	cmp	r5, r4
 8008a52:	d10b      	bne.n	8008a6c <_free_r+0x70>
 8008a54:	6824      	ldr	r4, [r4, #0]
 8008a56:	4421      	add	r1, r4
 8008a58:	1854      	adds	r4, r2, r1
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	6011      	str	r1, [r2, #0]
 8008a5e:	d1e0      	bne.n	8008a22 <_free_r+0x26>
 8008a60:	681c      	ldr	r4, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	6053      	str	r3, [r2, #4]
 8008a66:	440c      	add	r4, r1
 8008a68:	6014      	str	r4, [r2, #0]
 8008a6a:	e7da      	b.n	8008a22 <_free_r+0x26>
 8008a6c:	d902      	bls.n	8008a74 <_free_r+0x78>
 8008a6e:	230c      	movs	r3, #12
 8008a70:	6003      	str	r3, [r0, #0]
 8008a72:	e7d6      	b.n	8008a22 <_free_r+0x26>
 8008a74:	6825      	ldr	r5, [r4, #0]
 8008a76:	1961      	adds	r1, r4, r5
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	bf04      	itt	eq
 8008a7c:	6819      	ldreq	r1, [r3, #0]
 8008a7e:	685b      	ldreq	r3, [r3, #4]
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	bf04      	itt	eq
 8008a84:	1949      	addeq	r1, r1, r5
 8008a86:	6021      	streq	r1, [r4, #0]
 8008a88:	6054      	str	r4, [r2, #4]
 8008a8a:	e7ca      	b.n	8008a22 <_free_r+0x26>
 8008a8c:	b003      	add	sp, #12
 8008a8e:	bd30      	pop	{r4, r5, pc}
 8008a90:	20004e0c 	.word	0x20004e0c

08008a94 <__malloc_lock>:
 8008a94:	4801      	ldr	r0, [pc, #4]	; (8008a9c <__malloc_lock+0x8>)
 8008a96:	f7ff bfa1 	b.w	80089dc <__retarget_lock_acquire_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	20004e08 	.word	0x20004e08

08008aa0 <__malloc_unlock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__malloc_unlock+0x8>)
 8008aa2:	f7ff bf9c 	b.w	80089de <__retarget_lock_release_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	20004e08 	.word	0x20004e08

08008aac <pow>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	ed2d 8b02 	vpush	{d8}
 8008ab2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ab6:	eef0 8a60 	vmov.f32	s17, s1
 8008aba:	ec55 4b11 	vmov	r4, r5, d1
 8008abe:	f000 fb23 	bl	8009108 <__ieee754_pow>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	ec57 6b10 	vmov	r6, r7, d0
 8008ace:	f7f7 fff5 	bl	8000abc <__aeabi_dcmpun>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d13b      	bne.n	8008b4e <pow+0xa2>
 8008ad6:	ec51 0b18 	vmov	r0, r1, d8
 8008ada:	2200      	movs	r2, #0
 8008adc:	2300      	movs	r3, #0
 8008ade:	f7f7 ffbb 	bl	8000a58 <__aeabi_dcmpeq>
 8008ae2:	b1b8      	cbz	r0, 8008b14 <pow+0x68>
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 ffb4 	bl	8000a58 <__aeabi_dcmpeq>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d146      	bne.n	8008b82 <pow+0xd6>
 8008af4:	ec45 4b10 	vmov	d0, r4, r5
 8008af8:	f000 fa1f 	bl	8008f3a <finite>
 8008afc:	b338      	cbz	r0, 8008b4e <pow+0xa2>
 8008afe:	2200      	movs	r2, #0
 8008b00:	2300      	movs	r3, #0
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 ffb1 	bl	8000a6c <__aeabi_dcmplt>
 8008b0a:	b300      	cbz	r0, 8008b4e <pow+0xa2>
 8008b0c:	f7ff ff3c 	bl	8008988 <__errno>
 8008b10:	2322      	movs	r3, #34	; 0x22
 8008b12:	e01b      	b.n	8008b4c <pow+0xa0>
 8008b14:	ec47 6b10 	vmov	d0, r6, r7
 8008b18:	f000 fa0f 	bl	8008f3a <finite>
 8008b1c:	b9e0      	cbnz	r0, 8008b58 <pow+0xac>
 8008b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8008b22:	eef0 0a68 	vmov.f32	s1, s17
 8008b26:	f000 fa08 	bl	8008f3a <finite>
 8008b2a:	b1a8      	cbz	r0, 8008b58 <pow+0xac>
 8008b2c:	ec45 4b10 	vmov	d0, r4, r5
 8008b30:	f000 fa03 	bl	8008f3a <finite>
 8008b34:	b180      	cbz	r0, 8008b58 <pow+0xac>
 8008b36:	4632      	mov	r2, r6
 8008b38:	463b      	mov	r3, r7
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 ffbd 	bl	8000abc <__aeabi_dcmpun>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0e2      	beq.n	8008b0c <pow+0x60>
 8008b46:	f7ff ff1f 	bl	8008988 <__errno>
 8008b4a:	2321      	movs	r3, #33	; 0x21
 8008b4c:	6003      	str	r3, [r0, #0]
 8008b4e:	ecbd 8b02 	vpop	{d8}
 8008b52:	ec47 6b10 	vmov	d0, r6, r7
 8008b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 ff7a 	bl	8000a58 <__aeabi_dcmpeq>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d0f2      	beq.n	8008b4e <pow+0xa2>
 8008b68:	eeb0 0a48 	vmov.f32	s0, s16
 8008b6c:	eef0 0a68 	vmov.f32	s1, s17
 8008b70:	f000 f9e3 	bl	8008f3a <finite>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d0ea      	beq.n	8008b4e <pow+0xa2>
 8008b78:	ec45 4b10 	vmov	d0, r4, r5
 8008b7c:	f000 f9dd 	bl	8008f3a <finite>
 8008b80:	e7c3      	b.n	8008b0a <pow+0x5e>
 8008b82:	4f01      	ldr	r7, [pc, #4]	; (8008b88 <pow+0xdc>)
 8008b84:	2600      	movs	r6, #0
 8008b86:	e7e2      	b.n	8008b4e <pow+0xa2>
 8008b88:	3ff00000 	.word	0x3ff00000

08008b8c <sqrt>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	ed2d 8b02 	vpush	{d8}
 8008b92:	ec55 4b10 	vmov	r4, r5, d0
 8008b96:	f000 f9db 	bl	8008f50 <__ieee754_sqrt>
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ba6:	eef0 8a60 	vmov.f32	s17, s1
 8008baa:	f7f7 ff87 	bl	8000abc <__aeabi_dcmpun>
 8008bae:	b990      	cbnz	r0, 8008bd6 <sqrt+0x4a>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	f7f7 ff58 	bl	8000a6c <__aeabi_dcmplt>
 8008bbc:	b158      	cbz	r0, 8008bd6 <sqrt+0x4a>
 8008bbe:	f7ff fee3 	bl	8008988 <__errno>
 8008bc2:	2321      	movs	r3, #33	; 0x21
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4610      	mov	r0, r2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	f7f7 fe05 	bl	80007dc <__aeabi_ddiv>
 8008bd2:	ec41 0b18 	vmov	d8, r0, r1
 8008bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8008bda:	eef0 0a68 	vmov.f32	s1, s17
 8008bde:	ecbd 8b02 	vpop	{d8}
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	0000      	movs	r0, r0
	...

08008be8 <atan>:
 8008be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	ec55 4b10 	vmov	r4, r5, d0
 8008bf0:	4bc3      	ldr	r3, [pc, #780]	; (8008f00 <atan+0x318>)
 8008bf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	46ab      	mov	fp, r5
 8008bfa:	dd18      	ble.n	8008c2e <atan+0x46>
 8008bfc:	4bc1      	ldr	r3, [pc, #772]	; (8008f04 <atan+0x31c>)
 8008bfe:	429e      	cmp	r6, r3
 8008c00:	dc01      	bgt.n	8008c06 <atan+0x1e>
 8008c02:	d109      	bne.n	8008c18 <atan+0x30>
 8008c04:	b144      	cbz	r4, 8008c18 <atan+0x30>
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 fb05 	bl	800021c <__adddf3>
 8008c12:	4604      	mov	r4, r0
 8008c14:	460d      	mov	r5, r1
 8008c16:	e006      	b.n	8008c26 <atan+0x3e>
 8008c18:	f1bb 0f00 	cmp.w	fp, #0
 8008c1c:	f300 8131 	bgt.w	8008e82 <atan+0x29a>
 8008c20:	a59b      	add	r5, pc, #620	; (adr r5, 8008e90 <atan+0x2a8>)
 8008c22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008c26:	ec45 4b10 	vmov	d0, r4, r5
 8008c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	4bb6      	ldr	r3, [pc, #728]	; (8008f08 <atan+0x320>)
 8008c30:	429e      	cmp	r6, r3
 8008c32:	dc14      	bgt.n	8008c5e <atan+0x76>
 8008c34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008c38:	429e      	cmp	r6, r3
 8008c3a:	dc0d      	bgt.n	8008c58 <atan+0x70>
 8008c3c:	a396      	add	r3, pc, #600	; (adr r3, 8008e98 <atan+0x2b0>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	ee10 0a10 	vmov	r0, s0
 8008c46:	4629      	mov	r1, r5
 8008c48:	f7f7 fae8 	bl	800021c <__adddf3>
 8008c4c:	4baf      	ldr	r3, [pc, #700]	; (8008f0c <atan+0x324>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f7f7 ff2a 	bl	8000aa8 <__aeabi_dcmpgt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d1e6      	bne.n	8008c26 <atan+0x3e>
 8008c58:	f04f 3aff 	mov.w	sl, #4294967295
 8008c5c:	e02b      	b.n	8008cb6 <atan+0xce>
 8008c5e:	f000 f963 	bl	8008f28 <fabs>
 8008c62:	4bab      	ldr	r3, [pc, #684]	; (8008f10 <atan+0x328>)
 8008c64:	429e      	cmp	r6, r3
 8008c66:	ec55 4b10 	vmov	r4, r5, d0
 8008c6a:	f300 80bf 	bgt.w	8008dec <atan+0x204>
 8008c6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c72:	429e      	cmp	r6, r3
 8008c74:	f300 80a0 	bgt.w	8008db8 <atan+0x1d0>
 8008c78:	ee10 2a10 	vmov	r2, s0
 8008c7c:	ee10 0a10 	vmov	r0, s0
 8008c80:	462b      	mov	r3, r5
 8008c82:	4629      	mov	r1, r5
 8008c84:	f7f7 faca 	bl	800021c <__adddf3>
 8008c88:	4ba0      	ldr	r3, [pc, #640]	; (8008f0c <atan+0x324>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f7f7 fac4 	bl	8000218 <__aeabi_dsub>
 8008c90:	2200      	movs	r2, #0
 8008c92:	4606      	mov	r6, r0
 8008c94:	460f      	mov	r7, r1
 8008c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f7f7 fabd 	bl	800021c <__adddf3>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	4639      	mov	r1, r7
 8008caa:	f7f7 fd97 	bl	80007dc <__aeabi_ddiv>
 8008cae:	f04f 0a00 	mov.w	sl, #0
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	4622      	mov	r2, r4
 8008cb8:	462b      	mov	r3, r5
 8008cba:	4620      	mov	r0, r4
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7f7 fc63 	bl	8000588 <__aeabi_dmul>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4689      	mov	r9, r1
 8008cca:	f7f7 fc5d 	bl	8000588 <__aeabi_dmul>
 8008cce:	a374      	add	r3, pc, #464	; (adr r3, 8008ea0 <atan+0x2b8>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	f7f7 fc56 	bl	8000588 <__aeabi_dmul>
 8008cdc:	a372      	add	r3, pc, #456	; (adr r3, 8008ea8 <atan+0x2c0>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fa9b 	bl	800021c <__adddf3>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	f7f7 fc4d 	bl	8000588 <__aeabi_dmul>
 8008cee:	a370      	add	r3, pc, #448	; (adr r3, 8008eb0 <atan+0x2c8>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	f7f7 fa92 	bl	800021c <__adddf3>
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	f7f7 fc44 	bl	8000588 <__aeabi_dmul>
 8008d00:	a36d      	add	r3, pc, #436	; (adr r3, 8008eb8 <atan+0x2d0>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fa89 	bl	800021c <__adddf3>
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	f7f7 fc3b 	bl	8000588 <__aeabi_dmul>
 8008d12:	a36b      	add	r3, pc, #428	; (adr r3, 8008ec0 <atan+0x2d8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fa80 	bl	800021c <__adddf3>
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	f7f7 fc32 	bl	8000588 <__aeabi_dmul>
 8008d24:	a368      	add	r3, pc, #416	; (adr r3, 8008ec8 <atan+0x2e0>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fa77 	bl	800021c <__adddf3>
 8008d2e:	4642      	mov	r2, r8
 8008d30:	464b      	mov	r3, r9
 8008d32:	f7f7 fc29 	bl	8000588 <__aeabi_dmul>
 8008d36:	a366      	add	r3, pc, #408	; (adr r3, 8008ed0 <atan+0x2e8>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4689      	mov	r9, r1
 8008d40:	4630      	mov	r0, r6
 8008d42:	4639      	mov	r1, r7
 8008d44:	f7f7 fc20 	bl	8000588 <__aeabi_dmul>
 8008d48:	a363      	add	r3, pc, #396	; (adr r3, 8008ed8 <atan+0x2f0>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fa63 	bl	8000218 <__aeabi_dsub>
 8008d52:	4632      	mov	r2, r6
 8008d54:	463b      	mov	r3, r7
 8008d56:	f7f7 fc17 	bl	8000588 <__aeabi_dmul>
 8008d5a:	a361      	add	r3, pc, #388	; (adr r3, 8008ee0 <atan+0x2f8>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fa5a 	bl	8000218 <__aeabi_dsub>
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	f7f7 fc0e 	bl	8000588 <__aeabi_dmul>
 8008d6c:	a35e      	add	r3, pc, #376	; (adr r3, 8008ee8 <atan+0x300>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 fa51 	bl	8000218 <__aeabi_dsub>
 8008d76:	4632      	mov	r2, r6
 8008d78:	463b      	mov	r3, r7
 8008d7a:	f7f7 fc05 	bl	8000588 <__aeabi_dmul>
 8008d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8008ef0 <atan+0x308>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 fa48 	bl	8000218 <__aeabi_dsub>
 8008d88:	4632      	mov	r2, r6
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	f7f7 fbfc 	bl	8000588 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa40 	bl	800021c <__adddf3>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	462b      	mov	r3, r5
 8008da0:	f7f7 fbf2 	bl	8000588 <__aeabi_dmul>
 8008da4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	d14b      	bne.n	8008e46 <atan+0x25e>
 8008dae:	4620      	mov	r0, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7f7 fa31 	bl	8000218 <__aeabi_dsub>
 8008db6:	e72c      	b.n	8008c12 <atan+0x2a>
 8008db8:	ee10 0a10 	vmov	r0, s0
 8008dbc:	4b53      	ldr	r3, [pc, #332]	; (8008f0c <atan+0x324>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7f7 fa29 	bl	8000218 <__aeabi_dsub>
 8008dc6:	4b51      	ldr	r3, [pc, #324]	; (8008f0c <atan+0x324>)
 8008dc8:	4606      	mov	r6, r0
 8008dca:	460f      	mov	r7, r1
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fa23 	bl	800021c <__adddf3>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fcfd 	bl	80007dc <__aeabi_ddiv>
 8008de2:	f04f 0a01 	mov.w	sl, #1
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	e764      	b.n	8008cb6 <atan+0xce>
 8008dec:	4b49      	ldr	r3, [pc, #292]	; (8008f14 <atan+0x32c>)
 8008dee:	429e      	cmp	r6, r3
 8008df0:	da1d      	bge.n	8008e2e <atan+0x246>
 8008df2:	ee10 0a10 	vmov	r0, s0
 8008df6:	4b48      	ldr	r3, [pc, #288]	; (8008f18 <atan+0x330>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fa0c 	bl	8000218 <__aeabi_dsub>
 8008e00:	4b45      	ldr	r3, [pc, #276]	; (8008f18 <atan+0x330>)
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	2200      	movs	r2, #0
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f7f7 fbbc 	bl	8000588 <__aeabi_dmul>
 8008e10:	4b3e      	ldr	r3, [pc, #248]	; (8008f0c <atan+0x324>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	f7f7 fa02 	bl	800021c <__adddf3>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fcdc 	bl	80007dc <__aeabi_ddiv>
 8008e24:	f04f 0a02 	mov.w	sl, #2
 8008e28:	4604      	mov	r4, r0
 8008e2a:	460d      	mov	r5, r1
 8008e2c:	e743      	b.n	8008cb6 <atan+0xce>
 8008e2e:	462b      	mov	r3, r5
 8008e30:	ee10 2a10 	vmov	r2, s0
 8008e34:	4939      	ldr	r1, [pc, #228]	; (8008f1c <atan+0x334>)
 8008e36:	2000      	movs	r0, #0
 8008e38:	f7f7 fcd0 	bl	80007dc <__aeabi_ddiv>
 8008e3c:	f04f 0a03 	mov.w	sl, #3
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	e737      	b.n	8008cb6 <atan+0xce>
 8008e46:	4b36      	ldr	r3, [pc, #216]	; (8008f20 <atan+0x338>)
 8008e48:	4e36      	ldr	r6, [pc, #216]	; (8008f24 <atan+0x33c>)
 8008e4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 f9e1 	bl	8000218 <__aeabi_dsub>
 8008e56:	4622      	mov	r2, r4
 8008e58:	462b      	mov	r3, r5
 8008e5a:	f7f7 f9dd 	bl	8000218 <__aeabi_dsub>
 8008e5e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e6a:	f7f7 f9d5 	bl	8000218 <__aeabi_dsub>
 8008e6e:	f1bb 0f00 	cmp.w	fp, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	460d      	mov	r5, r1
 8008e76:	f6bf aed6 	bge.w	8008c26 <atan+0x3e>
 8008e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e7e:	461d      	mov	r5, r3
 8008e80:	e6d1      	b.n	8008c26 <atan+0x3e>
 8008e82:	a51d      	add	r5, pc, #116	; (adr r5, 8008ef8 <atan+0x310>)
 8008e84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e88:	e6cd      	b.n	8008c26 <atan+0x3e>
 8008e8a:	bf00      	nop
 8008e8c:	f3af 8000 	nop.w
 8008e90:	54442d18 	.word	0x54442d18
 8008e94:	bff921fb 	.word	0xbff921fb
 8008e98:	8800759c 	.word	0x8800759c
 8008e9c:	7e37e43c 	.word	0x7e37e43c
 8008ea0:	e322da11 	.word	0xe322da11
 8008ea4:	3f90ad3a 	.word	0x3f90ad3a
 8008ea8:	24760deb 	.word	0x24760deb
 8008eac:	3fa97b4b 	.word	0x3fa97b4b
 8008eb0:	a0d03d51 	.word	0xa0d03d51
 8008eb4:	3fb10d66 	.word	0x3fb10d66
 8008eb8:	c54c206e 	.word	0xc54c206e
 8008ebc:	3fb745cd 	.word	0x3fb745cd
 8008ec0:	920083ff 	.word	0x920083ff
 8008ec4:	3fc24924 	.word	0x3fc24924
 8008ec8:	5555550d 	.word	0x5555550d
 8008ecc:	3fd55555 	.word	0x3fd55555
 8008ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008ed4:	bfa2b444 	.word	0xbfa2b444
 8008ed8:	52defd9a 	.word	0x52defd9a
 8008edc:	3fadde2d 	.word	0x3fadde2d
 8008ee0:	af749a6d 	.word	0xaf749a6d
 8008ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8008ee8:	fe231671 	.word	0xfe231671
 8008eec:	3fbc71c6 	.word	0x3fbc71c6
 8008ef0:	9998ebc4 	.word	0x9998ebc4
 8008ef4:	3fc99999 	.word	0x3fc99999
 8008ef8:	54442d18 	.word	0x54442d18
 8008efc:	3ff921fb 	.word	0x3ff921fb
 8008f00:	440fffff 	.word	0x440fffff
 8008f04:	7ff00000 	.word	0x7ff00000
 8008f08:	3fdbffff 	.word	0x3fdbffff
 8008f0c:	3ff00000 	.word	0x3ff00000
 8008f10:	3ff2ffff 	.word	0x3ff2ffff
 8008f14:	40038000 	.word	0x40038000
 8008f18:	3ff80000 	.word	0x3ff80000
 8008f1c:	bff00000 	.word	0xbff00000
 8008f20:	08009de8 	.word	0x08009de8
 8008f24:	08009dc8 	.word	0x08009dc8

08008f28 <fabs>:
 8008f28:	ec51 0b10 	vmov	r0, r1, d0
 8008f2c:	ee10 2a10 	vmov	r2, s0
 8008f30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f34:	ec43 2b10 	vmov	d0, r2, r3
 8008f38:	4770      	bx	lr

08008f3a <finite>:
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	ed8d 0b00 	vstr	d0, [sp]
 8008f40:	9801      	ldr	r0, [sp, #4]
 8008f42:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008f46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f4a:	0fc0      	lsrs	r0, r0, #31
 8008f4c:	b002      	add	sp, #8
 8008f4e:	4770      	bx	lr

08008f50 <__ieee754_sqrt>:
 8008f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	ec55 4b10 	vmov	r4, r5, d0
 8008f58:	4e67      	ldr	r6, [pc, #412]	; (80090f8 <__ieee754_sqrt+0x1a8>)
 8008f5a:	43ae      	bics	r6, r5
 8008f5c:	ee10 0a10 	vmov	r0, s0
 8008f60:	ee10 2a10 	vmov	r2, s0
 8008f64:	4629      	mov	r1, r5
 8008f66:	462b      	mov	r3, r5
 8008f68:	d10d      	bne.n	8008f86 <__ieee754_sqrt+0x36>
 8008f6a:	f7f7 fb0d 	bl	8000588 <__aeabi_dmul>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7f7 f951 	bl	800021c <__adddf3>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	ec45 4b10 	vmov	d0, r4, r5
 8008f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	dc0b      	bgt.n	8008fa2 <__ieee754_sqrt+0x52>
 8008f8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f8e:	4326      	orrs	r6, r4
 8008f90:	d0f5      	beq.n	8008f7e <__ieee754_sqrt+0x2e>
 8008f92:	b135      	cbz	r5, 8008fa2 <__ieee754_sqrt+0x52>
 8008f94:	f7f7 f940 	bl	8000218 <__aeabi_dsub>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	f7f7 fc1e 	bl	80007dc <__aeabi_ddiv>
 8008fa0:	e7eb      	b.n	8008f7a <__ieee754_sqrt+0x2a>
 8008fa2:	1509      	asrs	r1, r1, #20
 8008fa4:	f000 808d 	beq.w	80090c2 <__ieee754_sqrt+0x172>
 8008fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fac:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fb4:	07c9      	lsls	r1, r1, #31
 8008fb6:	bf5c      	itt	pl
 8008fb8:	005b      	lslpl	r3, r3, #1
 8008fba:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008fbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fc2:	bf58      	it	pl
 8008fc4:	0052      	lslpl	r2, r2, #1
 8008fc6:	2500      	movs	r5, #0
 8008fc8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008fcc:	1076      	asrs	r6, r6, #1
 8008fce:	0052      	lsls	r2, r2, #1
 8008fd0:	f04f 0e16 	mov.w	lr, #22
 8008fd4:	46ac      	mov	ip, r5
 8008fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fda:	eb0c 0001 	add.w	r0, ip, r1
 8008fde:	4298      	cmp	r0, r3
 8008fe0:	bfde      	ittt	le
 8008fe2:	1a1b      	suble	r3, r3, r0
 8008fe4:	eb00 0c01 	addle.w	ip, r0, r1
 8008fe8:	186d      	addle	r5, r5, r1
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	f1be 0e01 	subs.w	lr, lr, #1
 8008ff0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ff4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008ff8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008ffc:	d1ed      	bne.n	8008fda <__ieee754_sqrt+0x8a>
 8008ffe:	4674      	mov	r4, lr
 8009000:	2720      	movs	r7, #32
 8009002:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009006:	4563      	cmp	r3, ip
 8009008:	eb01 000e 	add.w	r0, r1, lr
 800900c:	dc02      	bgt.n	8009014 <__ieee754_sqrt+0xc4>
 800900e:	d113      	bne.n	8009038 <__ieee754_sqrt+0xe8>
 8009010:	4290      	cmp	r0, r2
 8009012:	d811      	bhi.n	8009038 <__ieee754_sqrt+0xe8>
 8009014:	2800      	cmp	r0, #0
 8009016:	eb00 0e01 	add.w	lr, r0, r1
 800901a:	da57      	bge.n	80090cc <__ieee754_sqrt+0x17c>
 800901c:	f1be 0f00 	cmp.w	lr, #0
 8009020:	db54      	blt.n	80090cc <__ieee754_sqrt+0x17c>
 8009022:	f10c 0801 	add.w	r8, ip, #1
 8009026:	eba3 030c 	sub.w	r3, r3, ip
 800902a:	4290      	cmp	r0, r2
 800902c:	bf88      	it	hi
 800902e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009032:	1a12      	subs	r2, r2, r0
 8009034:	440c      	add	r4, r1
 8009036:	46c4      	mov	ip, r8
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	3f01      	subs	r7, #1
 800903c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009040:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009044:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009048:	d1dd      	bne.n	8009006 <__ieee754_sqrt+0xb6>
 800904a:	4313      	orrs	r3, r2
 800904c:	d01b      	beq.n	8009086 <__ieee754_sqrt+0x136>
 800904e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80090fc <__ieee754_sqrt+0x1ac>
 8009052:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009100 <__ieee754_sqrt+0x1b0>
 8009056:	e9da 0100 	ldrd	r0, r1, [sl]
 800905a:	e9db 2300 	ldrd	r2, r3, [fp]
 800905e:	f7f7 f8db 	bl	8000218 <__aeabi_dsub>
 8009062:	e9da 8900 	ldrd	r8, r9, [sl]
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4640      	mov	r0, r8
 800906c:	4649      	mov	r1, r9
 800906e:	f7f7 fd07 	bl	8000a80 <__aeabi_dcmple>
 8009072:	b140      	cbz	r0, 8009086 <__ieee754_sqrt+0x136>
 8009074:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009078:	e9da 0100 	ldrd	r0, r1, [sl]
 800907c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009080:	d126      	bne.n	80090d0 <__ieee754_sqrt+0x180>
 8009082:	3501      	adds	r5, #1
 8009084:	463c      	mov	r4, r7
 8009086:	106a      	asrs	r2, r5, #1
 8009088:	0863      	lsrs	r3, r4, #1
 800908a:	07e9      	lsls	r1, r5, #31
 800908c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009090:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009094:	bf48      	it	mi
 8009096:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800909a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800909e:	461c      	mov	r4, r3
 80090a0:	e76d      	b.n	8008f7e <__ieee754_sqrt+0x2e>
 80090a2:	0ad3      	lsrs	r3, r2, #11
 80090a4:	3815      	subs	r0, #21
 80090a6:	0552      	lsls	r2, r2, #21
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0fa      	beq.n	80090a2 <__ieee754_sqrt+0x152>
 80090ac:	02dc      	lsls	r4, r3, #11
 80090ae:	d50a      	bpl.n	80090c6 <__ieee754_sqrt+0x176>
 80090b0:	f1c1 0420 	rsb	r4, r1, #32
 80090b4:	fa22 f404 	lsr.w	r4, r2, r4
 80090b8:	1e4d      	subs	r5, r1, #1
 80090ba:	408a      	lsls	r2, r1
 80090bc:	4323      	orrs	r3, r4
 80090be:	1b41      	subs	r1, r0, r5
 80090c0:	e772      	b.n	8008fa8 <__ieee754_sqrt+0x58>
 80090c2:	4608      	mov	r0, r1
 80090c4:	e7f0      	b.n	80090a8 <__ieee754_sqrt+0x158>
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	3101      	adds	r1, #1
 80090ca:	e7ef      	b.n	80090ac <__ieee754_sqrt+0x15c>
 80090cc:	46e0      	mov	r8, ip
 80090ce:	e7aa      	b.n	8009026 <__ieee754_sqrt+0xd6>
 80090d0:	f7f7 f8a4 	bl	800021c <__adddf3>
 80090d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 fcc4 	bl	8000a6c <__aeabi_dcmplt>
 80090e4:	b120      	cbz	r0, 80090f0 <__ieee754_sqrt+0x1a0>
 80090e6:	1ca0      	adds	r0, r4, #2
 80090e8:	bf08      	it	eq
 80090ea:	3501      	addeq	r5, #1
 80090ec:	3402      	adds	r4, #2
 80090ee:	e7ca      	b.n	8009086 <__ieee754_sqrt+0x136>
 80090f0:	3401      	adds	r4, #1
 80090f2:	f024 0401 	bic.w	r4, r4, #1
 80090f6:	e7c6      	b.n	8009086 <__ieee754_sqrt+0x136>
 80090f8:	7ff00000 	.word	0x7ff00000
 80090fc:	20000068 	.word	0x20000068
 8009100:	20000070 	.word	0x20000070
 8009104:	00000000 	.word	0x00000000

08009108 <__ieee754_pow>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	ed2d 8b06 	vpush	{d8-d10}
 8009110:	b089      	sub	sp, #36	; 0x24
 8009112:	ed8d 1b00 	vstr	d1, [sp]
 8009116:	e9dd 2900 	ldrd	r2, r9, [sp]
 800911a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800911e:	ea58 0102 	orrs.w	r1, r8, r2
 8009122:	ec57 6b10 	vmov	r6, r7, d0
 8009126:	d115      	bne.n	8009154 <__ieee754_pow+0x4c>
 8009128:	19b3      	adds	r3, r6, r6
 800912a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800912e:	4152      	adcs	r2, r2
 8009130:	4299      	cmp	r1, r3
 8009132:	4b89      	ldr	r3, [pc, #548]	; (8009358 <__ieee754_pow+0x250>)
 8009134:	4193      	sbcs	r3, r2
 8009136:	f080 84d1 	bcs.w	8009adc <__ieee754_pow+0x9d4>
 800913a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800913e:	4630      	mov	r0, r6
 8009140:	4639      	mov	r1, r7
 8009142:	f7f7 f86b 	bl	800021c <__adddf3>
 8009146:	ec41 0b10 	vmov	d0, r0, r1
 800914a:	b009      	add	sp, #36	; 0x24
 800914c:	ecbd 8b06 	vpop	{d8-d10}
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009154:	4b81      	ldr	r3, [pc, #516]	; (800935c <__ieee754_pow+0x254>)
 8009156:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800915a:	429c      	cmp	r4, r3
 800915c:	ee10 aa10 	vmov	sl, s0
 8009160:	463d      	mov	r5, r7
 8009162:	dc06      	bgt.n	8009172 <__ieee754_pow+0x6a>
 8009164:	d101      	bne.n	800916a <__ieee754_pow+0x62>
 8009166:	2e00      	cmp	r6, #0
 8009168:	d1e7      	bne.n	800913a <__ieee754_pow+0x32>
 800916a:	4598      	cmp	r8, r3
 800916c:	dc01      	bgt.n	8009172 <__ieee754_pow+0x6a>
 800916e:	d10f      	bne.n	8009190 <__ieee754_pow+0x88>
 8009170:	b172      	cbz	r2, 8009190 <__ieee754_pow+0x88>
 8009172:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009176:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800917a:	ea55 050a 	orrs.w	r5, r5, sl
 800917e:	d1dc      	bne.n	800913a <__ieee754_pow+0x32>
 8009180:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009184:	18db      	adds	r3, r3, r3
 8009186:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800918a:	4152      	adcs	r2, r2
 800918c:	429d      	cmp	r5, r3
 800918e:	e7d0      	b.n	8009132 <__ieee754_pow+0x2a>
 8009190:	2d00      	cmp	r5, #0
 8009192:	da3b      	bge.n	800920c <__ieee754_pow+0x104>
 8009194:	4b72      	ldr	r3, [pc, #456]	; (8009360 <__ieee754_pow+0x258>)
 8009196:	4598      	cmp	r8, r3
 8009198:	dc51      	bgt.n	800923e <__ieee754_pow+0x136>
 800919a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800919e:	4598      	cmp	r8, r3
 80091a0:	f340 84ab 	ble.w	8009afa <__ieee754_pow+0x9f2>
 80091a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80091a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80091ac:	2b14      	cmp	r3, #20
 80091ae:	dd0f      	ble.n	80091d0 <__ieee754_pow+0xc8>
 80091b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80091b4:	fa22 f103 	lsr.w	r1, r2, r3
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	4293      	cmp	r3, r2
 80091be:	f040 849c 	bne.w	8009afa <__ieee754_pow+0x9f2>
 80091c2:	f001 0101 	and.w	r1, r1, #1
 80091c6:	f1c1 0302 	rsb	r3, r1, #2
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	b182      	cbz	r2, 80091f0 <__ieee754_pow+0xe8>
 80091ce:	e05f      	b.n	8009290 <__ieee754_pow+0x188>
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	d15b      	bne.n	800928c <__ieee754_pow+0x184>
 80091d4:	f1c3 0314 	rsb	r3, r3, #20
 80091d8:	fa48 f103 	asr.w	r1, r8, r3
 80091dc:	fa01 f303 	lsl.w	r3, r1, r3
 80091e0:	4543      	cmp	r3, r8
 80091e2:	f040 8487 	bne.w	8009af4 <__ieee754_pow+0x9ec>
 80091e6:	f001 0101 	and.w	r1, r1, #1
 80091ea:	f1c1 0302 	rsb	r3, r1, #2
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	4b5c      	ldr	r3, [pc, #368]	; (8009364 <__ieee754_pow+0x25c>)
 80091f2:	4598      	cmp	r8, r3
 80091f4:	d132      	bne.n	800925c <__ieee754_pow+0x154>
 80091f6:	f1b9 0f00 	cmp.w	r9, #0
 80091fa:	f280 8477 	bge.w	8009aec <__ieee754_pow+0x9e4>
 80091fe:	4959      	ldr	r1, [pc, #356]	; (8009364 <__ieee754_pow+0x25c>)
 8009200:	4632      	mov	r2, r6
 8009202:	463b      	mov	r3, r7
 8009204:	2000      	movs	r0, #0
 8009206:	f7f7 fae9 	bl	80007dc <__aeabi_ddiv>
 800920a:	e79c      	b.n	8009146 <__ieee754_pow+0x3e>
 800920c:	2300      	movs	r3, #0
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	2a00      	cmp	r2, #0
 8009212:	d13d      	bne.n	8009290 <__ieee754_pow+0x188>
 8009214:	4b51      	ldr	r3, [pc, #324]	; (800935c <__ieee754_pow+0x254>)
 8009216:	4598      	cmp	r8, r3
 8009218:	d1ea      	bne.n	80091f0 <__ieee754_pow+0xe8>
 800921a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800921e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009222:	ea53 030a 	orrs.w	r3, r3, sl
 8009226:	f000 8459 	beq.w	8009adc <__ieee754_pow+0x9d4>
 800922a:	4b4f      	ldr	r3, [pc, #316]	; (8009368 <__ieee754_pow+0x260>)
 800922c:	429c      	cmp	r4, r3
 800922e:	dd08      	ble.n	8009242 <__ieee754_pow+0x13a>
 8009230:	f1b9 0f00 	cmp.w	r9, #0
 8009234:	f2c0 8456 	blt.w	8009ae4 <__ieee754_pow+0x9dc>
 8009238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800923c:	e783      	b.n	8009146 <__ieee754_pow+0x3e>
 800923e:	2302      	movs	r3, #2
 8009240:	e7e5      	b.n	800920e <__ieee754_pow+0x106>
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	f04f 0000 	mov.w	r0, #0
 800924a:	f04f 0100 	mov.w	r1, #0
 800924e:	f6bf af7a 	bge.w	8009146 <__ieee754_pow+0x3e>
 8009252:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009256:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800925a:	e774      	b.n	8009146 <__ieee754_pow+0x3e>
 800925c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009260:	d106      	bne.n	8009270 <__ieee754_pow+0x168>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 f98d 	bl	8000588 <__aeabi_dmul>
 800926e:	e76a      	b.n	8009146 <__ieee754_pow+0x3e>
 8009270:	4b3e      	ldr	r3, [pc, #248]	; (800936c <__ieee754_pow+0x264>)
 8009272:	4599      	cmp	r9, r3
 8009274:	d10c      	bne.n	8009290 <__ieee754_pow+0x188>
 8009276:	2d00      	cmp	r5, #0
 8009278:	db0a      	blt.n	8009290 <__ieee754_pow+0x188>
 800927a:	ec47 6b10 	vmov	d0, r6, r7
 800927e:	b009      	add	sp, #36	; 0x24
 8009280:	ecbd 8b06 	vpop	{d8-d10}
 8009284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	f7ff be62 	b.w	8008f50 <__ieee754_sqrt>
 800928c:	2300      	movs	r3, #0
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	ec47 6b10 	vmov	d0, r6, r7
 8009294:	f7ff fe48 	bl	8008f28 <fabs>
 8009298:	ec51 0b10 	vmov	r0, r1, d0
 800929c:	f1ba 0f00 	cmp.w	sl, #0
 80092a0:	d129      	bne.n	80092f6 <__ieee754_pow+0x1ee>
 80092a2:	b124      	cbz	r4, 80092ae <__ieee754_pow+0x1a6>
 80092a4:	4b2f      	ldr	r3, [pc, #188]	; (8009364 <__ieee754_pow+0x25c>)
 80092a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d123      	bne.n	80092f6 <__ieee754_pow+0x1ee>
 80092ae:	f1b9 0f00 	cmp.w	r9, #0
 80092b2:	da05      	bge.n	80092c0 <__ieee754_pow+0x1b8>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	2000      	movs	r0, #0
 80092ba:	492a      	ldr	r1, [pc, #168]	; (8009364 <__ieee754_pow+0x25c>)
 80092bc:	f7f7 fa8e 	bl	80007dc <__aeabi_ddiv>
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	f6bf af40 	bge.w	8009146 <__ieee754_pow+0x3e>
 80092c6:	9b04      	ldr	r3, [sp, #16]
 80092c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80092cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092d0:	431c      	orrs	r4, r3
 80092d2:	d108      	bne.n	80092e6 <__ieee754_pow+0x1de>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4610      	mov	r0, r2
 80092da:	4619      	mov	r1, r3
 80092dc:	f7f6 ff9c 	bl	8000218 <__aeabi_dsub>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	e78f      	b.n	8009206 <__ieee754_pow+0xfe>
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f47f af2c 	bne.w	8009146 <__ieee754_pow+0x3e>
 80092ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092f2:	4619      	mov	r1, r3
 80092f4:	e727      	b.n	8009146 <__ieee754_pow+0x3e>
 80092f6:	0feb      	lsrs	r3, r5, #31
 80092f8:	3b01      	subs	r3, #1
 80092fa:	9306      	str	r3, [sp, #24]
 80092fc:	9a06      	ldr	r2, [sp, #24]
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	d102      	bne.n	800930a <__ieee754_pow+0x202>
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	e7e6      	b.n	80092d8 <__ieee754_pow+0x1d0>
 800930a:	4b19      	ldr	r3, [pc, #100]	; (8009370 <__ieee754_pow+0x268>)
 800930c:	4598      	cmp	r8, r3
 800930e:	f340 80fb 	ble.w	8009508 <__ieee754_pow+0x400>
 8009312:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009316:	4598      	cmp	r8, r3
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <__ieee754_pow+0x260>)
 800931a:	dd0c      	ble.n	8009336 <__ieee754_pow+0x22e>
 800931c:	429c      	cmp	r4, r3
 800931e:	dc0f      	bgt.n	8009340 <__ieee754_pow+0x238>
 8009320:	f1b9 0f00 	cmp.w	r9, #0
 8009324:	da0f      	bge.n	8009346 <__ieee754_pow+0x23e>
 8009326:	2000      	movs	r0, #0
 8009328:	b009      	add	sp, #36	; 0x24
 800932a:	ecbd 8b06 	vpop	{d8-d10}
 800932e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009332:	f000 bcba 	b.w	8009caa <__math_oflow>
 8009336:	429c      	cmp	r4, r3
 8009338:	dbf2      	blt.n	8009320 <__ieee754_pow+0x218>
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <__ieee754_pow+0x25c>)
 800933c:	429c      	cmp	r4, r3
 800933e:	dd19      	ble.n	8009374 <__ieee754_pow+0x26c>
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	dcef      	bgt.n	8009326 <__ieee754_pow+0x21e>
 8009346:	2000      	movs	r0, #0
 8009348:	b009      	add	sp, #36	; 0x24
 800934a:	ecbd 8b06 	vpop	{d8-d10}
 800934e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009352:	f000 bca1 	b.w	8009c98 <__math_uflow>
 8009356:	bf00      	nop
 8009358:	fff00000 	.word	0xfff00000
 800935c:	7ff00000 	.word	0x7ff00000
 8009360:	433fffff 	.word	0x433fffff
 8009364:	3ff00000 	.word	0x3ff00000
 8009368:	3fefffff 	.word	0x3fefffff
 800936c:	3fe00000 	.word	0x3fe00000
 8009370:	41e00000 	.word	0x41e00000
 8009374:	4b60      	ldr	r3, [pc, #384]	; (80094f8 <__ieee754_pow+0x3f0>)
 8009376:	2200      	movs	r2, #0
 8009378:	f7f6 ff4e 	bl	8000218 <__aeabi_dsub>
 800937c:	a354      	add	r3, pc, #336	; (adr r3, 80094d0 <__ieee754_pow+0x3c8>)
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	f7f7 f8ff 	bl	8000588 <__aeabi_dmul>
 800938a:	a353      	add	r3, pc, #332	; (adr r3, 80094d8 <__ieee754_pow+0x3d0>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	4606      	mov	r6, r0
 8009392:	460f      	mov	r7, r1
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f7 f8f6 	bl	8000588 <__aeabi_dmul>
 800939c:	4b57      	ldr	r3, [pc, #348]	; (80094fc <__ieee754_pow+0x3f4>)
 800939e:	4682      	mov	sl, r0
 80093a0:	468b      	mov	fp, r1
 80093a2:	2200      	movs	r2, #0
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7f7 f8ee 	bl	8000588 <__aeabi_dmul>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	a14b      	add	r1, pc, #300	; (adr r1, 80094e0 <__ieee754_pow+0x3d8>)
 80093b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b6:	f7f6 ff2f 	bl	8000218 <__aeabi_dsub>
 80093ba:	4622      	mov	r2, r4
 80093bc:	462b      	mov	r3, r5
 80093be:	f7f7 f8e3 	bl	8000588 <__aeabi_dmul>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	2000      	movs	r0, #0
 80093c8:	494d      	ldr	r1, [pc, #308]	; (8009500 <__ieee754_pow+0x3f8>)
 80093ca:	f7f6 ff25 	bl	8000218 <__aeabi_dsub>
 80093ce:	4622      	mov	r2, r4
 80093d0:	4680      	mov	r8, r0
 80093d2:	4689      	mov	r9, r1
 80093d4:	462b      	mov	r3, r5
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f7 f8d5 	bl	8000588 <__aeabi_dmul>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f7 f8cf 	bl	8000588 <__aeabi_dmul>
 80093ea:	a33f      	add	r3, pc, #252	; (adr r3, 80094e8 <__ieee754_pow+0x3e0>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f7 f8ca 	bl	8000588 <__aeabi_dmul>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4650      	mov	r0, sl
 80093fa:	4659      	mov	r1, fp
 80093fc:	f7f6 ff0c 	bl	8000218 <__aeabi_dsub>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4680      	mov	r8, r0
 8009406:	4689      	mov	r9, r1
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f6 ff06 	bl	800021c <__adddf3>
 8009410:	2000      	movs	r0, #0
 8009412:	4632      	mov	r2, r6
 8009414:	463b      	mov	r3, r7
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	f7f6 fefd 	bl	8000218 <__aeabi_dsub>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f6 fef7 	bl	8000218 <__aeabi_dsub>
 800942a:	9b04      	ldr	r3, [sp, #16]
 800942c:	9a06      	ldr	r2, [sp, #24]
 800942e:	3b01      	subs	r3, #1
 8009430:	4313      	orrs	r3, r2
 8009432:	4682      	mov	sl, r0
 8009434:	468b      	mov	fp, r1
 8009436:	f040 81e7 	bne.w	8009808 <__ieee754_pow+0x700>
 800943a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80094f0 <__ieee754_pow+0x3e8>
 800943e:	eeb0 8a47 	vmov.f32	s16, s14
 8009442:	eef0 8a67 	vmov.f32	s17, s15
 8009446:	e9dd 6700 	ldrd	r6, r7, [sp]
 800944a:	2600      	movs	r6, #0
 800944c:	4632      	mov	r2, r6
 800944e:	463b      	mov	r3, r7
 8009450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009454:	f7f6 fee0 	bl	8000218 <__aeabi_dsub>
 8009458:	4622      	mov	r2, r4
 800945a:	462b      	mov	r3, r5
 800945c:	f7f7 f894 	bl	8000588 <__aeabi_dmul>
 8009460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009464:	4680      	mov	r8, r0
 8009466:	4689      	mov	r9, r1
 8009468:	4650      	mov	r0, sl
 800946a:	4659      	mov	r1, fp
 800946c:	f7f7 f88c 	bl	8000588 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	f7f6 fed0 	bl	800021c <__adddf3>
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	4680      	mov	r8, r0
 8009482:	4689      	mov	r9, r1
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f7 f87e 	bl	8000588 <__aeabi_dmul>
 800948c:	460b      	mov	r3, r1
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
 8009492:	4602      	mov	r2, r0
 8009494:	4649      	mov	r1, r9
 8009496:	4640      	mov	r0, r8
 8009498:	f7f6 fec0 	bl	800021c <__adddf3>
 800949c:	4b19      	ldr	r3, [pc, #100]	; (8009504 <__ieee754_pow+0x3fc>)
 800949e:	4299      	cmp	r1, r3
 80094a0:	ec45 4b19 	vmov	d9, r4, r5
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	468b      	mov	fp, r1
 80094aa:	f340 82f0 	ble.w	8009a8e <__ieee754_pow+0x986>
 80094ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80094b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80094b6:	4303      	orrs	r3, r0
 80094b8:	f000 81e4 	beq.w	8009884 <__ieee754_pow+0x77c>
 80094bc:	ec51 0b18 	vmov	r0, r1, d8
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	f7f7 fad2 	bl	8000a6c <__aeabi_dcmplt>
 80094c8:	3800      	subs	r0, #0
 80094ca:	bf18      	it	ne
 80094cc:	2001      	movne	r0, #1
 80094ce:	e72b      	b.n	8009328 <__ieee754_pow+0x220>
 80094d0:	60000000 	.word	0x60000000
 80094d4:	3ff71547 	.word	0x3ff71547
 80094d8:	f85ddf44 	.word	0xf85ddf44
 80094dc:	3e54ae0b 	.word	0x3e54ae0b
 80094e0:	55555555 	.word	0x55555555
 80094e4:	3fd55555 	.word	0x3fd55555
 80094e8:	652b82fe 	.word	0x652b82fe
 80094ec:	3ff71547 	.word	0x3ff71547
 80094f0:	00000000 	.word	0x00000000
 80094f4:	bff00000 	.word	0xbff00000
 80094f8:	3ff00000 	.word	0x3ff00000
 80094fc:	3fd00000 	.word	0x3fd00000
 8009500:	3fe00000 	.word	0x3fe00000
 8009504:	408fffff 	.word	0x408fffff
 8009508:	4bd5      	ldr	r3, [pc, #852]	; (8009860 <__ieee754_pow+0x758>)
 800950a:	402b      	ands	r3, r5
 800950c:	2200      	movs	r2, #0
 800950e:	b92b      	cbnz	r3, 800951c <__ieee754_pow+0x414>
 8009510:	4bd4      	ldr	r3, [pc, #848]	; (8009864 <__ieee754_pow+0x75c>)
 8009512:	f7f7 f839 	bl	8000588 <__aeabi_dmul>
 8009516:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800951a:	460c      	mov	r4, r1
 800951c:	1523      	asrs	r3, r4, #20
 800951e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009522:	4413      	add	r3, r2
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	4bd0      	ldr	r3, [pc, #832]	; (8009868 <__ieee754_pow+0x760>)
 8009528:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800952c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009530:	429c      	cmp	r4, r3
 8009532:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009536:	dd08      	ble.n	800954a <__ieee754_pow+0x442>
 8009538:	4bcc      	ldr	r3, [pc, #816]	; (800986c <__ieee754_pow+0x764>)
 800953a:	429c      	cmp	r4, r3
 800953c:	f340 8162 	ble.w	8009804 <__ieee754_pow+0x6fc>
 8009540:	9b05      	ldr	r3, [sp, #20]
 8009542:	3301      	adds	r3, #1
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800954a:	2400      	movs	r4, #0
 800954c:	00e3      	lsls	r3, r4, #3
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	4bc7      	ldr	r3, [pc, #796]	; (8009870 <__ieee754_pow+0x768>)
 8009552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009556:	ed93 7b00 	vldr	d7, [r3]
 800955a:	4629      	mov	r1, r5
 800955c:	ec53 2b17 	vmov	r2, r3, d7
 8009560:	eeb0 9a47 	vmov.f32	s18, s14
 8009564:	eef0 9a67 	vmov.f32	s19, s15
 8009568:	4682      	mov	sl, r0
 800956a:	f7f6 fe55 	bl	8000218 <__aeabi_dsub>
 800956e:	4652      	mov	r2, sl
 8009570:	4606      	mov	r6, r0
 8009572:	460f      	mov	r7, r1
 8009574:	462b      	mov	r3, r5
 8009576:	ec51 0b19 	vmov	r0, r1, d9
 800957a:	f7f6 fe4f 	bl	800021c <__adddf3>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	2000      	movs	r0, #0
 8009584:	49bb      	ldr	r1, [pc, #748]	; (8009874 <__ieee754_pow+0x76c>)
 8009586:	f7f7 f929 	bl	80007dc <__aeabi_ddiv>
 800958a:	ec41 0b1a 	vmov	d10, r0, r1
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f6 fff7 	bl	8000588 <__aeabi_dmul>
 800959a:	2300      	movs	r3, #0
 800959c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80095a6:	46ab      	mov	fp, r5
 80095a8:	106d      	asrs	r5, r5, #1
 80095aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80095ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80095b2:	ec41 0b18 	vmov	d8, r0, r1
 80095b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80095ba:	2200      	movs	r2, #0
 80095bc:	4640      	mov	r0, r8
 80095be:	4649      	mov	r1, r9
 80095c0:	4614      	mov	r4, r2
 80095c2:	461d      	mov	r5, r3
 80095c4:	f7f6 ffe0 	bl	8000588 <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f6 fe22 	bl	8000218 <__aeabi_dsub>
 80095d4:	ec53 2b19 	vmov	r2, r3, d9
 80095d8:	4606      	mov	r6, r0
 80095da:	460f      	mov	r7, r1
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe1a 	bl	8000218 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4650      	mov	r0, sl
 80095ea:	4659      	mov	r1, fp
 80095ec:	f7f6 fe14 	bl	8000218 <__aeabi_dsub>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	f7f6 ffc8 	bl	8000588 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f6 fe0a 	bl	8000218 <__aeabi_dsub>
 8009604:	ec53 2b1a 	vmov	r2, r3, d10
 8009608:	f7f6 ffbe 	bl	8000588 <__aeabi_dmul>
 800960c:	ec53 2b18 	vmov	r2, r3, d8
 8009610:	ec41 0b19 	vmov	d9, r0, r1
 8009614:	ec51 0b18 	vmov	r0, r1, d8
 8009618:	f7f6 ffb6 	bl	8000588 <__aeabi_dmul>
 800961c:	a37c      	add	r3, pc, #496	; (adr r3, 8009810 <__ieee754_pow+0x708>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	4604      	mov	r4, r0
 8009624:	460d      	mov	r5, r1
 8009626:	f7f6 ffaf 	bl	8000588 <__aeabi_dmul>
 800962a:	a37b      	add	r3, pc, #492	; (adr r3, 8009818 <__ieee754_pow+0x710>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	f7f6 fdf4 	bl	800021c <__adddf3>
 8009634:	4622      	mov	r2, r4
 8009636:	462b      	mov	r3, r5
 8009638:	f7f6 ffa6 	bl	8000588 <__aeabi_dmul>
 800963c:	a378      	add	r3, pc, #480	; (adr r3, 8009820 <__ieee754_pow+0x718>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f6 fdeb 	bl	800021c <__adddf3>
 8009646:	4622      	mov	r2, r4
 8009648:	462b      	mov	r3, r5
 800964a:	f7f6 ff9d 	bl	8000588 <__aeabi_dmul>
 800964e:	a376      	add	r3, pc, #472	; (adr r3, 8009828 <__ieee754_pow+0x720>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 fde2 	bl	800021c <__adddf3>
 8009658:	4622      	mov	r2, r4
 800965a:	462b      	mov	r3, r5
 800965c:	f7f6 ff94 	bl	8000588 <__aeabi_dmul>
 8009660:	a373      	add	r3, pc, #460	; (adr r3, 8009830 <__ieee754_pow+0x728>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 fdd9 	bl	800021c <__adddf3>
 800966a:	4622      	mov	r2, r4
 800966c:	462b      	mov	r3, r5
 800966e:	f7f6 ff8b 	bl	8000588 <__aeabi_dmul>
 8009672:	a371      	add	r3, pc, #452	; (adr r3, 8009838 <__ieee754_pow+0x730>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 fdd0 	bl	800021c <__adddf3>
 800967c:	4622      	mov	r2, r4
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	462b      	mov	r3, r5
 8009684:	4620      	mov	r0, r4
 8009686:	4629      	mov	r1, r5
 8009688:	f7f6 ff7e 	bl	8000588 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 ff78 	bl	8000588 <__aeabi_dmul>
 8009698:	4642      	mov	r2, r8
 800969a:	4604      	mov	r4, r0
 800969c:	460d      	mov	r5, r1
 800969e:	464b      	mov	r3, r9
 80096a0:	ec51 0b18 	vmov	r0, r1, d8
 80096a4:	f7f6 fdba 	bl	800021c <__adddf3>
 80096a8:	ec53 2b19 	vmov	r2, r3, d9
 80096ac:	f7f6 ff6c 	bl	8000588 <__aeabi_dmul>
 80096b0:	4622      	mov	r2, r4
 80096b2:	462b      	mov	r3, r5
 80096b4:	f7f6 fdb2 	bl	800021c <__adddf3>
 80096b8:	4642      	mov	r2, r8
 80096ba:	4682      	mov	sl, r0
 80096bc:	468b      	mov	fp, r1
 80096be:	464b      	mov	r3, r9
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f6 ff60 	bl	8000588 <__aeabi_dmul>
 80096c8:	4b6b      	ldr	r3, [pc, #428]	; (8009878 <__ieee754_pow+0x770>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	f7f6 fda4 	bl	800021c <__adddf3>
 80096d4:	4652      	mov	r2, sl
 80096d6:	465b      	mov	r3, fp
 80096d8:	f7f6 fda0 	bl	800021c <__adddf3>
 80096dc:	2000      	movs	r0, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	460d      	mov	r5, r1
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f6 ff4d 	bl	8000588 <__aeabi_dmul>
 80096ee:	4b62      	ldr	r3, [pc, #392]	; (8009878 <__ieee754_pow+0x770>)
 80096f0:	4680      	mov	r8, r0
 80096f2:	4689      	mov	r9, r1
 80096f4:	2200      	movs	r2, #0
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7f6 fd8d 	bl	8000218 <__aeabi_dsub>
 80096fe:	4632      	mov	r2, r6
 8009700:	463b      	mov	r3, r7
 8009702:	f7f6 fd89 	bl	8000218 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4650      	mov	r0, sl
 800970c:	4659      	mov	r1, fp
 800970e:	f7f6 fd83 	bl	8000218 <__aeabi_dsub>
 8009712:	ec53 2b18 	vmov	r2, r3, d8
 8009716:	f7f6 ff37 	bl	8000588 <__aeabi_dmul>
 800971a:	4622      	mov	r2, r4
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	462b      	mov	r3, r5
 8009722:	ec51 0b19 	vmov	r0, r1, d9
 8009726:	f7f6 ff2f 	bl	8000588 <__aeabi_dmul>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f6 fd73 	bl	800021c <__adddf3>
 8009736:	4606      	mov	r6, r0
 8009738:	460f      	mov	r7, r1
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4640      	mov	r0, r8
 8009740:	4649      	mov	r1, r9
 8009742:	f7f6 fd6b 	bl	800021c <__adddf3>
 8009746:	a33e      	add	r3, pc, #248	; (adr r3, 8009840 <__ieee754_pow+0x738>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	2000      	movs	r0, #0
 800974e:	4604      	mov	r4, r0
 8009750:	460d      	mov	r5, r1
 8009752:	f7f6 ff19 	bl	8000588 <__aeabi_dmul>
 8009756:	4642      	mov	r2, r8
 8009758:	ec41 0b18 	vmov	d8, r0, r1
 800975c:	464b      	mov	r3, r9
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f6 fd59 	bl	8000218 <__aeabi_dsub>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4630      	mov	r0, r6
 800976c:	4639      	mov	r1, r7
 800976e:	f7f6 fd53 	bl	8000218 <__aeabi_dsub>
 8009772:	a335      	add	r3, pc, #212	; (adr r3, 8009848 <__ieee754_pow+0x740>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f7f6 ff06 	bl	8000588 <__aeabi_dmul>
 800977c:	a334      	add	r3, pc, #208	; (adr r3, 8009850 <__ieee754_pow+0x748>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fefd 	bl	8000588 <__aeabi_dmul>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4630      	mov	r0, r6
 8009794:	4639      	mov	r1, r7
 8009796:	f7f6 fd41 	bl	800021c <__adddf3>
 800979a:	9a07      	ldr	r2, [sp, #28]
 800979c:	4b37      	ldr	r3, [pc, #220]	; (800987c <__ieee754_pow+0x774>)
 800979e:	4413      	add	r3, r2
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 fd3a 	bl	800021c <__adddf3>
 80097a8:	4682      	mov	sl, r0
 80097aa:	9805      	ldr	r0, [sp, #20]
 80097ac:	468b      	mov	fp, r1
 80097ae:	f7f6 fe81 	bl	80004b4 <__aeabi_i2d>
 80097b2:	9a07      	ldr	r2, [sp, #28]
 80097b4:	4b32      	ldr	r3, [pc, #200]	; (8009880 <__ieee754_pow+0x778>)
 80097b6:	4413      	add	r3, r2
 80097b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097bc:	4606      	mov	r6, r0
 80097be:	460f      	mov	r7, r1
 80097c0:	4652      	mov	r2, sl
 80097c2:	465b      	mov	r3, fp
 80097c4:	ec51 0b18 	vmov	r0, r1, d8
 80097c8:	f7f6 fd28 	bl	800021c <__adddf3>
 80097cc:	4642      	mov	r2, r8
 80097ce:	464b      	mov	r3, r9
 80097d0:	f7f6 fd24 	bl	800021c <__adddf3>
 80097d4:	4632      	mov	r2, r6
 80097d6:	463b      	mov	r3, r7
 80097d8:	f7f6 fd20 	bl	800021c <__adddf3>
 80097dc:	2000      	movs	r0, #0
 80097de:	4632      	mov	r2, r6
 80097e0:	463b      	mov	r3, r7
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	f7f6 fd17 	bl	8000218 <__aeabi_dsub>
 80097ea:	4642      	mov	r2, r8
 80097ec:	464b      	mov	r3, r9
 80097ee:	f7f6 fd13 	bl	8000218 <__aeabi_dsub>
 80097f2:	ec53 2b18 	vmov	r2, r3, d8
 80097f6:	f7f6 fd0f 	bl	8000218 <__aeabi_dsub>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4650      	mov	r0, sl
 8009800:	4659      	mov	r1, fp
 8009802:	e610      	b.n	8009426 <__ieee754_pow+0x31e>
 8009804:	2401      	movs	r4, #1
 8009806:	e6a1      	b.n	800954c <__ieee754_pow+0x444>
 8009808:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009858 <__ieee754_pow+0x750>
 800980c:	e617      	b.n	800943e <__ieee754_pow+0x336>
 800980e:	bf00      	nop
 8009810:	4a454eef 	.word	0x4a454eef
 8009814:	3fca7e28 	.word	0x3fca7e28
 8009818:	93c9db65 	.word	0x93c9db65
 800981c:	3fcd864a 	.word	0x3fcd864a
 8009820:	a91d4101 	.word	0xa91d4101
 8009824:	3fd17460 	.word	0x3fd17460
 8009828:	518f264d 	.word	0x518f264d
 800982c:	3fd55555 	.word	0x3fd55555
 8009830:	db6fabff 	.word	0xdb6fabff
 8009834:	3fdb6db6 	.word	0x3fdb6db6
 8009838:	33333303 	.word	0x33333303
 800983c:	3fe33333 	.word	0x3fe33333
 8009840:	e0000000 	.word	0xe0000000
 8009844:	3feec709 	.word	0x3feec709
 8009848:	dc3a03fd 	.word	0xdc3a03fd
 800984c:	3feec709 	.word	0x3feec709
 8009850:	145b01f5 	.word	0x145b01f5
 8009854:	be3e2fe0 	.word	0xbe3e2fe0
 8009858:	00000000 	.word	0x00000000
 800985c:	3ff00000 	.word	0x3ff00000
 8009860:	7ff00000 	.word	0x7ff00000
 8009864:	43400000 	.word	0x43400000
 8009868:	0003988e 	.word	0x0003988e
 800986c:	000bb679 	.word	0x000bb679
 8009870:	08009e08 	.word	0x08009e08
 8009874:	3ff00000 	.word	0x3ff00000
 8009878:	40080000 	.word	0x40080000
 800987c:	08009e28 	.word	0x08009e28
 8009880:	08009e18 	.word	0x08009e18
 8009884:	a3b3      	add	r3, pc, #716	; (adr r3, 8009b54 <__ieee754_pow+0xa4c>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	f7f6 fcc5 	bl	800021c <__adddf3>
 8009892:	4622      	mov	r2, r4
 8009894:	ec41 0b1a 	vmov	d10, r0, r1
 8009898:	462b      	mov	r3, r5
 800989a:	4630      	mov	r0, r6
 800989c:	4639      	mov	r1, r7
 800989e:	f7f6 fcbb 	bl	8000218 <__aeabi_dsub>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	ec51 0b1a 	vmov	r0, r1, d10
 80098aa:	f7f7 f8fd 	bl	8000aa8 <__aeabi_dcmpgt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f47f ae04 	bne.w	80094bc <__ieee754_pow+0x3b4>
 80098b4:	4aa2      	ldr	r2, [pc, #648]	; (8009b40 <__ieee754_pow+0xa38>)
 80098b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098ba:	4293      	cmp	r3, r2
 80098bc:	f340 8107 	ble.w	8009ace <__ieee754_pow+0x9c6>
 80098c0:	151b      	asrs	r3, r3, #20
 80098c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80098c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80098ca:	fa4a fa03 	asr.w	sl, sl, r3
 80098ce:	44da      	add	sl, fp
 80098d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80098d4:	489b      	ldr	r0, [pc, #620]	; (8009b44 <__ieee754_pow+0xa3c>)
 80098d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80098da:	4108      	asrs	r0, r1
 80098dc:	ea00 030a 	and.w	r3, r0, sl
 80098e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80098e4:	f1c1 0114 	rsb	r1, r1, #20
 80098e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80098ec:	fa4a fa01 	asr.w	sl, sl, r1
 80098f0:	f1bb 0f00 	cmp.w	fp, #0
 80098f4:	f04f 0200 	mov.w	r2, #0
 80098f8:	4620      	mov	r0, r4
 80098fa:	4629      	mov	r1, r5
 80098fc:	bfb8      	it	lt
 80098fe:	f1ca 0a00 	rsblt	sl, sl, #0
 8009902:	f7f6 fc89 	bl	8000218 <__aeabi_dsub>
 8009906:	ec41 0b19 	vmov	d9, r0, r1
 800990a:	4642      	mov	r2, r8
 800990c:	464b      	mov	r3, r9
 800990e:	ec51 0b19 	vmov	r0, r1, d9
 8009912:	f7f6 fc83 	bl	800021c <__adddf3>
 8009916:	a37a      	add	r3, pc, #488	; (adr r3, 8009b00 <__ieee754_pow+0x9f8>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	2000      	movs	r0, #0
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	f7f6 fe31 	bl	8000588 <__aeabi_dmul>
 8009926:	ec53 2b19 	vmov	r2, r3, d9
 800992a:	4606      	mov	r6, r0
 800992c:	460f      	mov	r7, r1
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f6 fc71 	bl	8000218 <__aeabi_dsub>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f6 fc6b 	bl	8000218 <__aeabi_dsub>
 8009942:	a371      	add	r3, pc, #452	; (adr r3, 8009b08 <__ieee754_pow+0xa00>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fe1e 	bl	8000588 <__aeabi_dmul>
 800994c:	a370      	add	r3, pc, #448	; (adr r3, 8009b10 <__ieee754_pow+0xa08>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	4680      	mov	r8, r0
 8009954:	4689      	mov	r9, r1
 8009956:	4620      	mov	r0, r4
 8009958:	4629      	mov	r1, r5
 800995a:	f7f6 fe15 	bl	8000588 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4640      	mov	r0, r8
 8009964:	4649      	mov	r1, r9
 8009966:	f7f6 fc59 	bl	800021c <__adddf3>
 800996a:	4604      	mov	r4, r0
 800996c:	460d      	mov	r5, r1
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4630      	mov	r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	f7f6 fc51 	bl	800021c <__adddf3>
 800997a:	4632      	mov	r2, r6
 800997c:	463b      	mov	r3, r7
 800997e:	4680      	mov	r8, r0
 8009980:	4689      	mov	r9, r1
 8009982:	f7f6 fc49 	bl	8000218 <__aeabi_dsub>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4620      	mov	r0, r4
 800998c:	4629      	mov	r1, r5
 800998e:	f7f6 fc43 	bl	8000218 <__aeabi_dsub>
 8009992:	4642      	mov	r2, r8
 8009994:	4606      	mov	r6, r0
 8009996:	460f      	mov	r7, r1
 8009998:	464b      	mov	r3, r9
 800999a:	4640      	mov	r0, r8
 800999c:	4649      	mov	r1, r9
 800999e:	f7f6 fdf3 	bl	8000588 <__aeabi_dmul>
 80099a2:	a35d      	add	r3, pc, #372	; (adr r3, 8009b18 <__ieee754_pow+0xa10>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	f7f6 fdec 	bl	8000588 <__aeabi_dmul>
 80099b0:	a35b      	add	r3, pc, #364	; (adr r3, 8009b20 <__ieee754_pow+0xa18>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 fc2f 	bl	8000218 <__aeabi_dsub>
 80099ba:	4622      	mov	r2, r4
 80099bc:	462b      	mov	r3, r5
 80099be:	f7f6 fde3 	bl	8000588 <__aeabi_dmul>
 80099c2:	a359      	add	r3, pc, #356	; (adr r3, 8009b28 <__ieee754_pow+0xa20>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fc28 	bl	800021c <__adddf3>
 80099cc:	4622      	mov	r2, r4
 80099ce:	462b      	mov	r3, r5
 80099d0:	f7f6 fdda 	bl	8000588 <__aeabi_dmul>
 80099d4:	a356      	add	r3, pc, #344	; (adr r3, 8009b30 <__ieee754_pow+0xa28>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7f6 fc1d 	bl	8000218 <__aeabi_dsub>
 80099de:	4622      	mov	r2, r4
 80099e0:	462b      	mov	r3, r5
 80099e2:	f7f6 fdd1 	bl	8000588 <__aeabi_dmul>
 80099e6:	a354      	add	r3, pc, #336	; (adr r3, 8009b38 <__ieee754_pow+0xa30>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f6 fc16 	bl	800021c <__adddf3>
 80099f0:	4622      	mov	r2, r4
 80099f2:	462b      	mov	r3, r5
 80099f4:	f7f6 fdc8 	bl	8000588 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fc0a 	bl	8000218 <__aeabi_dsub>
 8009a04:	4604      	mov	r4, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f6 fdba 	bl	8000588 <__aeabi_dmul>
 8009a14:	2200      	movs	r2, #0
 8009a16:	ec41 0b19 	vmov	d9, r0, r1
 8009a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 fbf9 	bl	8000218 <__aeabi_dsub>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	ec51 0b19 	vmov	r0, r1, d9
 8009a2e:	f7f6 fed5 	bl	80007dc <__aeabi_ddiv>
 8009a32:	4632      	mov	r2, r6
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	463b      	mov	r3, r7
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	f7f6 fda3 	bl	8000588 <__aeabi_dmul>
 8009a42:	4632      	mov	r2, r6
 8009a44:	463b      	mov	r3, r7
 8009a46:	f7f6 fbe9 	bl	800021c <__adddf3>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 fbe1 	bl	8000218 <__aeabi_dsub>
 8009a56:	4642      	mov	r2, r8
 8009a58:	464b      	mov	r3, r9
 8009a5a:	f7f6 fbdd 	bl	8000218 <__aeabi_dsub>
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4602      	mov	r2, r0
 8009a62:	4939      	ldr	r1, [pc, #228]	; (8009b48 <__ieee754_pow+0xa40>)
 8009a64:	2000      	movs	r0, #0
 8009a66:	f7f6 fbd7 	bl	8000218 <__aeabi_dsub>
 8009a6a:	ec41 0b10 	vmov	d0, r0, r1
 8009a6e:	ee10 3a90 	vmov	r3, s1
 8009a72:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a7a:	da2b      	bge.n	8009ad4 <__ieee754_pow+0x9cc>
 8009a7c:	4650      	mov	r0, sl
 8009a7e:	f000 f86f 	bl	8009b60 <scalbn>
 8009a82:	ec51 0b10 	vmov	r0, r1, d0
 8009a86:	ec53 2b18 	vmov	r2, r3, d8
 8009a8a:	f7ff bbee 	b.w	800926a <__ieee754_pow+0x162>
 8009a8e:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <__ieee754_pow+0xa44>)
 8009a90:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a94:	429e      	cmp	r6, r3
 8009a96:	f77f af0d 	ble.w	80098b4 <__ieee754_pow+0x7ac>
 8009a9a:	4b2d      	ldr	r3, [pc, #180]	; (8009b50 <__ieee754_pow+0xa48>)
 8009a9c:	440b      	add	r3, r1
 8009a9e:	4303      	orrs	r3, r0
 8009aa0:	d009      	beq.n	8009ab6 <__ieee754_pow+0x9ae>
 8009aa2:	ec51 0b18 	vmov	r0, r1, d8
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f7f6 ffdf 	bl	8000a6c <__aeabi_dcmplt>
 8009aae:	3800      	subs	r0, #0
 8009ab0:	bf18      	it	ne
 8009ab2:	2001      	movne	r0, #1
 8009ab4:	e448      	b.n	8009348 <__ieee754_pow+0x240>
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	462b      	mov	r3, r5
 8009aba:	f7f6 fbad 	bl	8000218 <__aeabi_dsub>
 8009abe:	4642      	mov	r2, r8
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	f7f6 ffe7 	bl	8000a94 <__aeabi_dcmpge>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	f43f aef4 	beq.w	80098b4 <__ieee754_pow+0x7ac>
 8009acc:	e7e9      	b.n	8009aa2 <__ieee754_pow+0x99a>
 8009ace:	f04f 0a00 	mov.w	sl, #0
 8009ad2:	e71a      	b.n	800990a <__ieee754_pow+0x802>
 8009ad4:	ec51 0b10 	vmov	r0, r1, d0
 8009ad8:	4619      	mov	r1, r3
 8009ada:	e7d4      	b.n	8009a86 <__ieee754_pow+0x97e>
 8009adc:	491a      	ldr	r1, [pc, #104]	; (8009b48 <__ieee754_pow+0xa40>)
 8009ade:	2000      	movs	r0, #0
 8009ae0:	f7ff bb31 	b.w	8009146 <__ieee754_pow+0x3e>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f7ff bb2d 	b.w	8009146 <__ieee754_pow+0x3e>
 8009aec:	4630      	mov	r0, r6
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7ff bb29 	b.w	8009146 <__ieee754_pow+0x3e>
 8009af4:	9204      	str	r2, [sp, #16]
 8009af6:	f7ff bb7b 	b.w	80091f0 <__ieee754_pow+0xe8>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f7ff bb65 	b.w	80091ca <__ieee754_pow+0xc2>
 8009b00:	00000000 	.word	0x00000000
 8009b04:	3fe62e43 	.word	0x3fe62e43
 8009b08:	fefa39ef 	.word	0xfefa39ef
 8009b0c:	3fe62e42 	.word	0x3fe62e42
 8009b10:	0ca86c39 	.word	0x0ca86c39
 8009b14:	be205c61 	.word	0xbe205c61
 8009b18:	72bea4d0 	.word	0x72bea4d0
 8009b1c:	3e663769 	.word	0x3e663769
 8009b20:	c5d26bf1 	.word	0xc5d26bf1
 8009b24:	3ebbbd41 	.word	0x3ebbbd41
 8009b28:	af25de2c 	.word	0xaf25de2c
 8009b2c:	3f11566a 	.word	0x3f11566a
 8009b30:	16bebd93 	.word	0x16bebd93
 8009b34:	3f66c16c 	.word	0x3f66c16c
 8009b38:	5555553e 	.word	0x5555553e
 8009b3c:	3fc55555 	.word	0x3fc55555
 8009b40:	3fe00000 	.word	0x3fe00000
 8009b44:	fff00000 	.word	0xfff00000
 8009b48:	3ff00000 	.word	0x3ff00000
 8009b4c:	4090cbff 	.word	0x4090cbff
 8009b50:	3f6f3400 	.word	0x3f6f3400
 8009b54:	652b82fe 	.word	0x652b82fe
 8009b58:	3c971547 	.word	0x3c971547
 8009b5c:	00000000 	.word	0x00000000

08009b60 <scalbn>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	ec55 4b10 	vmov	r4, r5, d0
 8009b66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	b999      	cbnz	r1, 8009b98 <scalbn+0x38>
 8009b70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b74:	4323      	orrs	r3, r4
 8009b76:	d03f      	beq.n	8009bf8 <scalbn+0x98>
 8009b78:	4b35      	ldr	r3, [pc, #212]	; (8009c50 <scalbn+0xf0>)
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	ee10 0a10 	vmov	r0, s0
 8009b80:	2200      	movs	r2, #0
 8009b82:	f7f6 fd01 	bl	8000588 <__aeabi_dmul>
 8009b86:	4b33      	ldr	r3, [pc, #204]	; (8009c54 <scalbn+0xf4>)
 8009b88:	429e      	cmp	r6, r3
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	da10      	bge.n	8009bb2 <scalbn+0x52>
 8009b90:	a327      	add	r3, pc, #156	; (adr r3, 8009c30 <scalbn+0xd0>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	e01f      	b.n	8009bd8 <scalbn+0x78>
 8009b98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009b9c:	4291      	cmp	r1, r2
 8009b9e:	d10c      	bne.n	8009bba <scalbn+0x5a>
 8009ba0:	ee10 2a10 	vmov	r2, s0
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fb38 	bl	800021c <__adddf3>
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	e022      	b.n	8009bf8 <scalbn+0x98>
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009bb8:	3936      	subs	r1, #54	; 0x36
 8009bba:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009bbe:	4296      	cmp	r6, r2
 8009bc0:	dd0d      	ble.n	8009bde <scalbn+0x7e>
 8009bc2:	2d00      	cmp	r5, #0
 8009bc4:	a11c      	add	r1, pc, #112	; (adr r1, 8009c38 <scalbn+0xd8>)
 8009bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bca:	da02      	bge.n	8009bd2 <scalbn+0x72>
 8009bcc:	a11c      	add	r1, pc, #112	; (adr r1, 8009c40 <scalbn+0xe0>)
 8009bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd2:	a319      	add	r3, pc, #100	; (adr r3, 8009c38 <scalbn+0xd8>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f7f6 fcd6 	bl	8000588 <__aeabi_dmul>
 8009bdc:	e7e6      	b.n	8009bac <scalbn+0x4c>
 8009bde:	1872      	adds	r2, r6, r1
 8009be0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009be4:	428a      	cmp	r2, r1
 8009be6:	dcec      	bgt.n	8009bc2 <scalbn+0x62>
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	dd08      	ble.n	8009bfe <scalbn+0x9e>
 8009bec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009bf8:	ec45 4b10 	vmov	d0, r4, r5
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
 8009bfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c02:	da08      	bge.n	8009c16 <scalbn+0xb6>
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	a10a      	add	r1, pc, #40	; (adr r1, 8009c30 <scalbn+0xd0>)
 8009c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c0c:	dac0      	bge.n	8009b90 <scalbn+0x30>
 8009c0e:	a10e      	add	r1, pc, #56	; (adr r1, 8009c48 <scalbn+0xe8>)
 8009c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c14:	e7bc      	b.n	8009b90 <scalbn+0x30>
 8009c16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c1a:	3236      	adds	r2, #54	; 0x36
 8009c1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c24:	4620      	mov	r0, r4
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <scalbn+0xf8>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	e7d5      	b.n	8009bd8 <scalbn+0x78>
 8009c2c:	f3af 8000 	nop.w
 8009c30:	c2f8f359 	.word	0xc2f8f359
 8009c34:	01a56e1f 	.word	0x01a56e1f
 8009c38:	8800759c 	.word	0x8800759c
 8009c3c:	7e37e43c 	.word	0x7e37e43c
 8009c40:	8800759c 	.word	0x8800759c
 8009c44:	fe37e43c 	.word	0xfe37e43c
 8009c48:	c2f8f359 	.word	0xc2f8f359
 8009c4c:	81a56e1f 	.word	0x81a56e1f
 8009c50:	43500000 	.word	0x43500000
 8009c54:	ffff3cb0 	.word	0xffff3cb0
 8009c58:	3c900000 	.word	0x3c900000

08009c5c <with_errno>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	4604      	mov	r4, r0
 8009c60:	460d      	mov	r5, r1
 8009c62:	4616      	mov	r6, r2
 8009c64:	f7fe fe90 	bl	8008988 <__errno>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	6006      	str	r6, [r0, #0]
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}

08009c70 <xflow>:
 8009c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c72:	4614      	mov	r4, r2
 8009c74:	461d      	mov	r5, r3
 8009c76:	b108      	cbz	r0, 8009c7c <xflow+0xc>
 8009c78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c7c:	e9cd 2300 	strd	r2, r3, [sp]
 8009c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	f7f6 fc7e 	bl	8000588 <__aeabi_dmul>
 8009c8c:	2222      	movs	r2, #34	; 0x22
 8009c8e:	b003      	add	sp, #12
 8009c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c94:	f7ff bfe2 	b.w	8009c5c <with_errno>

08009c98 <__math_uflow>:
 8009c98:	b508      	push	{r3, lr}
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ca0:	f7ff ffe6 	bl	8009c70 <xflow>
 8009ca4:	ec41 0b10 	vmov	d0, r0, r1
 8009ca8:	bd08      	pop	{r3, pc}

08009caa <__math_oflow>:
 8009caa:	b508      	push	{r3, lr}
 8009cac:	2200      	movs	r2, #0
 8009cae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009cb2:	f7ff ffdd 	bl	8009c70 <xflow>
 8009cb6:	ec41 0b10 	vmov	d0, r0, r1
 8009cba:	bd08      	pop	{r3, pc}

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
